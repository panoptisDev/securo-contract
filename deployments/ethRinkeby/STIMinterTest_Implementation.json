{
  "address": "0x3eb9bE772B56F50Dd25F087CD2Ff708A4F1B9f03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shareBurned",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shareMinted",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetPerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBiconomy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBiconomy",
          "type": "address"
        }
      ],
      "name": "SetBiconomy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STI",
      "outputs": [
        {
          "internalType": "contract ISTI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "burnByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewaySigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_APRs",
          "type": "uint256[]"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getAPR1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getAllPoolInUSD1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_poolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc1",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getCurrentTokenCompositionPercWithSig",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_poolInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenComposition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenComposition1",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getDepositTokenComposition1WithSig",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPoolsUnbonded1",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getPoolsUnbonded1WithSig",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_waitings",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_waitingInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unbondedInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_waitForTses",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getPricePerFullShare1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawableSharePerc1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getWithdrawableSharePerc1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_STI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "mintByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "setBiconomy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setGatewaySigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_targetPerc",
          "type": "uint256[]"
        }
      ],
      "name": "setTokenCompositionTargetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "name": "setUrls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targetPercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "urls",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x15941b68cdb50389205affe30e69370281dc91592ee8343f88317569bc0caef9",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x3eb9bE772B56F50Dd25F087CD2Ff708A4F1B9f03",
    "transactionIndex": 5,
    "gasUsed": "3801132",
    "logsBloom": "0x
    "blockHash": "0xb197014043c71b26f09a89f8783ed0f32a364ebb5d6b6012495a8ab466beaaf1",
    "transactionHash": "0x15941b68cdb50389205affe30e69370281dc91592ee8343f88317569bc0caef9",
    "logs": [],
    "blockNumber": 11153898,
    "cumulativeGasUsed": "4745576",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "30393b3060a535cd32ad26225a67306c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareBurned\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareMinted\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetPerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBiconomy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBiconomy\",\"type\":\"address\"}],\"name\":\"SetBiconomy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STI\",\"outputs\":[{\"internalType\":\"contract ISTI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"burnByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewaySigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_APRs\",\"type\":\"uint256[]\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getAPR1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getAllPoolInUSD1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getCurrentTokenCompositionPercWithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_USDTAmt\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenComposition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDTAmt\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenComposition1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getDepositTokenComposition1WithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPoolsUnbonded1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getPoolsUnbonded1WithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_waitings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_waitingInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unbondedInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_waitForTses\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getPricePerFullShare1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"getWithdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableSharePerc1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getWithdrawableSharePerc1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_STI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_USDTAmt\",\"type\":\"uint256\"}],\"name\":\"mintByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setGatewaySigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetPerc\",\"type\":\"uint256[]\"}],\"name\":\"setTokenCompositionTargetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"name\":\"setUrls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"urls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnByAdmin(address,uint256)\":{\"details\":\"mint STIs according to the deposited USDT\",\"params\":{\"_account\":\"account to which STIs will be minted\",\"_share\":\"amount of STI to be burnt\"}},\"getDepositTokenComposition(uint256[],address[],uint256[],uint256)\":{\"params\":{\"_USDTAmt\":\"amount of USDT with 6 decimals\"},\"returns\":{\"_0\":\"_USDTAmts amount of USDT should be deposited to each pools\"}},\"getPoolsUnbonded1(address)\":{\"returns\":{\"_0\":\"_chainIDs is an array of chain IDs.\",\"_1\":\"_tokens is an array of tokens.\",\"_2\":\"_waitings is an array of token amounts that is not unbonded.\",\"_3\":\"_waitingInUSDs is an array of USD value of token amounts that is not unbonded.\",\"_4\":\"_unbondeds is an array of token amounts that is unbonded.\",\"_5\":\"_unbondedInUSDs is an array USD value of token amounts that is unbonded.\",\"_6\":\"_waitForTses is an array of timestamps to wait to the next claim.\"}},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"getWithdrawPerc(address,uint256)\":{\"params\":{\"_share\":\"amount of STI to be withdrawn\"},\"returns\":{\"_sharePerc\":\"percentage of assets which should be withdrawn. It's 18 decimals\"}},\"mintByAdmin(uint256,address,uint256)\":{\"details\":\"mint STIs according to the deposited USDT\",\"params\":{\"_USDTAmt\":\"the deposited amount of USDT with 6 decimals\",\"_account\":\"account to which STIs will be minted\",\"_pool\":\"total USD worth in all pools of STI after deposited\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToken(uint256,address)\":{\"notice\":\"After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\"},\"getAPR(uint256[],uint256[])\":{\"notice\":\"The length of array is based on network count. And the lengths should be same on the arraies.\"},\"getAllPoolInUSD(uint256[])\":{\"notice\":\"The length of array is based on network count. And the lengths should be same on the arraies.\"},\"getCurrentTokenCompositionPerc(uint256[],address[],uint256[])\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"getDepositTokenComposition(uint256[],address[],uint256[],uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"getPricePerFullShare(uint256[])\":{\"notice\":\"Can be used for calculate both user shares & APR\"},\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"},\"removeToken(uint256)\":{\"notice\":\"After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\"},\"setTokenCompositionTargetPerc(uint256[])\":{\"notice\":\"The length of array is based on token count.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sti/STIMinterTest.sol\":\"STIMinterTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstantTest {\\n    uint internal constant CHAINID = 1313161555;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802; // Should be replaced with testnet address\\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n}\\n\",\"keccak256\":\"0xa19460fa3f59876ed69f452358a979f00da1c5edb773fc80ecf3dd32ca91c3dc\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664; // Should be replaced with testnet address\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x7536e002827bce7dde31950fff83577b8236433829ddd5c4c13b31ae5fb99ebe\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstant {\\n    uint internal constant CHAINID = 56;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address internal constant aBNBb = 0xBb1Aa6e59E5163D8722a122cd66EBA614b59df0d;\\n}\\n\",\"keccak256\":\"0xd0c4c785ade0a75733c82781329443ec20ba40754d99575689064ac9e7196adf\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstantTest {\\n    uint internal constant CHAINID = 97;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Should be replaced with testnet address\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; // Should be replaced with testnet address\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d; // Should be replaced with testnet address\\n    address internal constant USDT = 0x1F326a8CA5399418a76eA0efa0403Cbb00790C67;\\n    address internal constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n\\n    address internal constant aBNBb = 0xaB56897fE4e9f0757e02B54C27E81B9ddd6A30AE;\\n}\\n\",\"keccak256\":\"0xd0ac5570ca8ada8d91320bf4db7fb6e061ad7433ab21be191941a70de5be4acc\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstant {\\n    uint internal constant CHAINID = 1;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\\n    address internal constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\",\"keccak256\":\"0x7d278bbafd2c0dae080f4aea2c853ec12ea88f767de21cdaa1ddd4be393143e1\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstantTest {\\n    uint internal constant CHAINID = 4;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0; // Should be replaced with testnet address\\n    address internal constant stETH = 0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599; // Should be replaced with testnet address\\n    address internal constant USDC = 0xDf5324ebe6F6b852Ff5cBf73627eE137e9075276;\\n    address internal constant USDT = 0x21e48034753E490ff04f2f75f7CAEdF081B320d5;\\n    address internal constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n}\\n\",\"keccak256\":\"0x2711954dbd697694829429f6b66d704bb80b214e8f5077f8c79554c2af901a38\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/sti/STIMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../bni/priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../bni/constant/AuroraConstant.sol\\\";\\nimport \\\"../bni/constant/AvaxConstant.sol\\\";\\nimport \\\"../bni/constant/BscConstant.sol\\\";\\nimport \\\"../bni/constant/EthConstant.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"../../libs/BaseRelayRecipient.sol\\\";\\n\\ninterface ISTI is IERC20Upgradeable {\\n    function decimals() external view returns (uint8);\\n    function mint(address account_, uint256 amount_) external;\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\nerror OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\ninterface Gateway {\\n    function getCurrentTokenCompositionPerc1() external view returns (\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\\n        bytes memory sig\\n    );\\n    function getAllPoolInUSD1() external view returns (\\n        uint[] memory _allPoolInUSDs,\\n        bytes memory sig\\n    );\\n    function getPricePerFullShare1() external view returns (\\n        uint[] memory _allPoolInUSDs,\\n        bytes memory sig\\n    );\\n    function getAPR1() external view returns (\\n        uint[] memory _allPoolInUSDs,  uint[] memory _APRs,\\n        bytes memory sig\\n    );\\n    function getDepositTokenComposition1() external view returns (\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\\n        bytes memory sig\\n    );\\n    function getPoolsUnbonded1() external view returns (\\n        uint[] memory _chainIDs, address[] memory _tokens,\\n        uint[] memory _waitings, uint[] memory _waitingInUSDs,\\n        uint[] memory _unbondeds, uint[] memory _unbondedInUSDs,\\n        uint[] memory _waitForTses,\\n        bytes memory sig\\n    );\\n    function getWithdrawableSharePerc1() external view returns(\\n        uint _sharePerc,\\n        bytes memory sig\\n    );\\n}\\n\\ncontract STIMinter is BaseRelayRecipient, ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n\\n    uint[] public chainIDs;\\n    address[] public tokens;\\n    uint[] public targetPercentages;\\n    mapping(uint => mapping(address => uint)) public tid; // Token indices in arrays\\n\\n    address public admin;\\n    ISTI public STI;\\n    IPriceOracle public priceOracle;\\n\\n    string[] public urls;\\n    address public gatewaySigner;\\n\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\\n    event AddToken(uint chainID, address token, uint tid);\\n    event RemoveToken(uint chainID, address token, uint targetPerc, uint tid);\\n    event Mint(address caller, uint amtDeposit, uint shareMinted);\\n    event Burn(address caller, uint shareBurned);\\n\\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == address(admin), \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _admin, address _biconomy,\\n        address _STI, address _priceOracle\\n    ) external virtual initializer {\\n        __Ownable_init();\\n\\n        admin = _admin;\\n        trustedForwarder = _biconomy;\\n        STI = ISTI(_STI);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        chainIDs.push(EthConstant.CHAINID);\\n        tokens.push(Const.NATIVE_ASSET); // ETH\\n        chainIDs.push(EthConstant.CHAINID);\\n        tokens.push(EthConstant.MATIC);\\n        chainIDs.push(BscConstant.CHAINID);\\n        tokens.push(Const.NATIVE_ASSET); // BNB\\n        chainIDs.push(AvaxConstant.CHAINID);\\n        tokens.push(Const.NATIVE_ASSET); // AVAX\\n        chainIDs.push(AuroraConstant.CHAINID);\\n        tokens.push(AuroraConstant.WNEAR);\\n\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n\\n        updateTid();\\n\\n        urls.push(\\\"http://localhost:8001/\\\");\\n        gatewaySigner = _admin;\\n    }\\n\\n    function updateTid() internal {\\n        uint[] memory _chainIDs = chainIDs;\\n        address[] memory _tokens = tokens;\\n\\n        uint tokenCnt = _tokens.length;\\n        for (uint i = 0; i < tokenCnt; i ++) {\\n            tid[_chainIDs[i]][_tokens[i]] = i;\\n        }\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    function setBiconomy(address _biconomy) external onlyOwner {\\n        address oldBiconomy = trustedForwarder;\\n        trustedForwarder = _biconomy;\\n        emit SetBiconomy(oldBiconomy, _biconomy);\\n    }\\n\\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n\\n    function versionRecipient() external pure override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function setGatewaySigner(address _signer) external onlyOwner {\\n        gatewaySigner = _signer;\\n    }\\n\\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\\n    function addToken(uint _chainID, address _token) external onlyOwner {\\n        uint _tid = tid[_chainID][_token];\\n        require ((_tid == 0 && _chainID != chainIDs[0] && _token != tokens[0]), \\\"Already added\\\");\\n\\n        chainIDs.push(_chainID);\\n        tokens.push(_token);\\n        targetPercentages.push(0);\\n\\n        _tid = tokens.length-1;\\n        tid[_chainID][_token] = _tid;\\n\\n        emit AddToken(_chainID, _token, _tid);\\n    }\\n\\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\\n    function removeToken(uint _tid) external onlyOwner {\\n        uint tokenCnt = tokens.length;\\n        require(_tid < tokenCnt, \\\"Invalid tid\\\");\\n\\n        uint _chainID = chainIDs[_tid];\\n        address _token = tokens[_tid];\\n        uint _targetPerc = targetPercentages[_tid];\\n\\n        chainIDs[_tid] = chainIDs[tokenCnt-1];\\n        chainIDs.pop();\\n        tokens[_tid] = tokens[tokenCnt-1];\\n        tokens.pop();\\n        targetPercentages[_tid] = targetPercentages[tokenCnt-1];\\n        targetPercentages.pop();\\n\\n        tid[_chainID][_token] = 0;\\n        updateTid();\\n\\n        emit RemoveToken(_chainID, _token, _targetPerc, _tid);\\n    }\\n\\n    /// @notice The length of array is based on token count.\\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) public onlyOwner {\\n        uint targetCnt = _targetPerc.length;\\n        require(targetCnt == targetPercentages.length, \\\"Invalid count\\\");\\n\\n        uint sum;\\n        for (uint i = 0; i < targetCnt; i ++) {\\n            targetPercentages[i] = _targetPerc[i];\\n            sum += _targetPerc[i];\\n        }\\n        require(sum == Const.DENOMINATOR, \\\"Invalid parameter\\\");\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    function getEachPoolInUSD(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\\n    ) private view returns (uint[] memory pools) {\\n        uint inputCnt = _tokens.length;\\n        uint tokenCnt = tokens.length;\\n        pools = new uint[](tokenCnt);\\n\\n        for (uint i = 0; i < inputCnt; i ++) {\\n            uint _chainID = _chainIDs[i];\\n            address _token = _tokens[i];\\n            uint _tid = tid[_chainID][_token];\\n            if (tokenCnt <= _tid) continue;\\n            if (_tid == 0 && (_chainID != chainIDs[0] || _token != tokens[0])) continue;\\n\\n            pools[_tid] = _poolInUSDs[i];\\n        }\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    function getCurrentTokenCompositionPerc(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\\n    ) public view returns (\\n        uint[] memory, address[] memory, uint[] memory pools, uint[] memory percentages\\n    ) {\\n        pools = getEachPoolInUSD(_chainIDs, _tokens, _poolInUSDs);\\n        uint poolCnt = pools.length;\\n\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        percentages = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * Const.DENOMINATOR / allPool;\\n        }\\n\\n        return (chainIDs, tokens, pools, percentages);\\n    }\\n    function getCurrentTokenCompositionPerc1() external view returns (\\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getCurrentTokenCompositionPerc1.selector),\\n            STIMinter.getCurrentTokenCompositionPercWithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getCurrentTokenCompositionPercWithSig(bytes calldata result, bytes calldata extraData) external view returns(\\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\\n    ) {\\n        extraData;\\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\\n            = abi.decode(result, (uint[], address[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\\n    }\\n\\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\\n    function getAllPoolInUSD(uint[] memory _allPoolInUSDs) public pure returns (uint) {\\n        uint networkCnt = _allPoolInUSDs.length;\\n        uint allPoolInUSD;\\n        for (uint i = 0; i < networkCnt; i ++) {\\n            allPoolInUSD += _allPoolInUSDs[i];\\n        }\\n        return allPoolInUSD;\\n    }\\n    function getAllPoolInUSD1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getAllPoolInUSD1.selector),\\n            STIMinter.getAllPoolInUSD1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getAllPoolInUSD1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getAllPoolInUSD(_allPoolInUSDs);\\n    }\\n\\n    /// @notice Can be used for calculate both user shares & APR\\n    function getPricePerFullShare(uint[] memory _allPoolInUSDs) public view returns (uint) {\\n        uint _totalSupply = STI.totalSupply();\\n        if (_totalSupply == 0) return 1e18;\\n        return getAllPoolInUSD(_allPoolInUSDs) * 1e18 / _totalSupply;\\n    }\\n    function getPricePerFullShare1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getPricePerFullShare1.selector),\\n            STIMinter.getPricePerFullShare1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getPricePerFullShare1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getPricePerFullShare(_allPoolInUSDs);\\n    }\\n\\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\\n    function getAPR(uint[] memory _allPoolInUSDs, uint[] memory _APRs) public pure returns (uint) {\\n        uint networkCnt = _allPoolInUSDs.length;\\n        require(networkCnt == _APRs.length, \\\"Not match array length\\\");\\n\\n        uint pool = getAllPoolInUSD(_allPoolInUSDs);\\n        if (pool == 0) return 0;\\n\\n        uint allApr;\\n        for (uint i = 0; i < networkCnt; i ++) {\\n            allApr += (_APRs[i] * _allPoolInUSDs[i]);\\n        }\\n        return (allApr / pool);\\n    }\\n    function getAPR1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getAPR1.selector),\\n            STIMinter.getAPR1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getAPR1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs,  uint[] memory _APRs, bytes memory sig) = abi.decode(result, (uint[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs, _APRs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getAPR(_allPoolInUSDs, _APRs);\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view virtual returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(AvaxConstant.USDT);\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _USDTAmt amount of USDT with 6 decimals\\n    /// @return _USDTAmts amount of USDT should be deposited to each pools\\n    function getDepositTokenComposition(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, uint _USDTAmt\\n    ) public view returns (\\n        uint[] memory, address[] memory, uint[] memory _USDTAmts\\n    ) {\\n        (,, uint[] memory pools, uint[] memory perc) = getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\\n        uint poolCnt = perc.length;\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n\\n        uint allPool = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        uint totalAllocation;\\n        uint[] memory allocations = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            uint target = allPool * targetPercentages[i] / Const.DENOMINATOR;\\n            if (pools[i] < target) {\\n                uint diff = target - pools[i];\\n                allocations[i] = diff;\\n                totalAllocation += diff;\\n            }\\n        }\\n\\n        _USDTAmts = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            _USDTAmts[i] = _USDTAmt * allocations[i] / totalAllocation;\\n        }\\n\\n        return (chainIDs, tokens, _USDTAmts);\\n    }\\n    function getDepositTokenComposition1(uint _USDTAmt) external view returns (\\n        uint[] memory, address[] memory, uint[] memory\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getDepositTokenComposition1.selector),\\n            STIMinter.getDepositTokenComposition1WithSig.selector,\\n            abi.encode(_USDTAmt)\\n        );\\n    }\\n    function getDepositTokenComposition1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\\n        uint[] memory, address[] memory, uint[] memory\\n    ) {\\n        (uint _USDTAmt) = abi.decode(extraData, (uint));\\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\\n            = abi.decode(result, (uint[], address[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getDepositTokenComposition(_chainIDs, _tokens, _poolInUSDs, _USDTAmt);\\n    }\\n\\n    ///@return _chainIDs is an array of chain IDs.\\n    ///@return _tokens is an array of tokens.\\n    ///@return _waitings is an array of token amounts that is not unbonded.\\n    ///@return _waitingInUSDs is an array of USD value of token amounts that is not unbonded.\\n    ///@return _unbondeds is an array of token amounts that is unbonded.\\n    ///@return _unbondedInUSDs is an array USD value of token amounts that is unbonded.\\n    ///@return _waitForTses is an array of timestamps to wait to the next claim.\\n    function getPoolsUnbonded1(address _account) external view returns (\\n        uint[] memory, // _chainIDs\\n        address[] memory, // _tokens\\n        uint[] memory, // _waitings\\n        uint[] memory, // _waitingInUSDs\\n        uint[] memory, // _unbondeds\\n        uint[] memory, // _unbondedInUSDs\\n        uint[] memory // _waitForTses\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getPoolsUnbonded1.selector),\\n            STIMinter.getPoolsUnbonded1WithSig.selector,\\n            abi.encode(_account)\\n        );\\n    }\\n    function getPoolsUnbonded1WithSig(bytes calldata result, bytes calldata) external view returns(\\n        uint[] memory _chainIDs,\\n        address[] memory _tokens,\\n        uint[] memory _waitings,\\n        uint[] memory _waitingInUSDs,\\n        uint[] memory _unbondeds,\\n        uint[] memory _unbondedInUSDs,\\n        uint[] memory _waitForTses\\n    ) {\\n        bytes memory sig;\\n        (_chainIDs, _tokens, _waitings, _waitingInUSDs, _unbondeds, _unbondedInUSDs, _waitForTses, sig)\\n            = abi.decode(result, (uint[], address[], uint[], uint[], uint[], uint[], uint[], bytes));\\n\\n        bytes32 messageHash1 = keccak256(abi.encodePacked(_chainIDs, _tokens, _waitings, _waitingInUSDs, _unbondeds, _unbondedInUSDs));\\n        bytes32 messageHash2 = keccak256(abi.encodePacked(_waitForTses));\\n        bytes32 messageHash = keccak256(abi.encodePacked(messageHash1, messageHash2));\\n        address recovered = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n    }\\n\\n    /// @dev mint STIs according to the deposited USDT\\n    /// @param _pool total USD worth in all pools of STI after deposited\\n    /// @param _account account to which STIs will be minted\\n    /// @param _USDTAmt the deposited amount of USDT with 6 decimals\\n    function mintByAdmin(uint _pool, address _account, uint _USDTAmt) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        uint amtDeposit = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\\n        _pool = (amtDeposit < _pool) ? _pool - amtDeposit : 0;\\n\\n        uint _totalSupply = STI.totalSupply();\\n        uint share = (_pool == 0 ||_totalSupply == 0)  ? amtDeposit : _totalSupply * amtDeposit / _pool;\\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\\n        share = share * 997 / 1000;\\n\\n        STI.mint(_account, share);\\n        emit Mint(_account, amtDeposit, share);\\n    }\\n\\n    /// @param _share amount of STI to be withdrawn\\n    /// @return _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\\n    function getWithdrawPerc(address _account, uint _share) public view returns (uint _sharePerc) {\\n        require(0 < _share && _share <= STI.balanceOf(_account), \\\"Invalid share amount\\\");\\n        return (_share * 1e18) / STI.totalSupply();\\n    }\\n\\n    function getWithdrawableSharePerc1() external view returns (\\n        uint // _sharePerc\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getWithdrawableSharePerc1.selector),\\n            STIMinter.getWithdrawableSharePerc1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getWithdrawableSharePerc1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\\n        uint _sharePerc\\n    ) {\\n        extraData;\\n        (uint[] memory _chainIDs, uint[] memory _sharePercs, bytes memory sig)\\n            = abi.decode(result, (uint[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_chainIDs, _sharePercs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        uint length = _sharePercs.length;\\n        if (length > 0) {\\n            _sharePerc = _sharePercs[0];\\n        }\\n        for (uint i = 1; i < length; i++) {\\n            uint perc = _sharePercs[i];\\n            if (_sharePerc > perc) _sharePerc = perc;\\n        }\\n    }\\n\\n    /// @dev mint STIs according to the deposited USDT\\n    /// @param _account account to which STIs will be minted\\n    /// @param _share amount of STI to be burnt\\n    function burnByAdmin(address _account, uint _share) external onlyOwnerOrAdmin nonReentrant {\\n        require(0 < _share && _share <= STI.balanceOf(_account), \\\"Invalid share amount\\\");\\n        STI.burnFrom(_account, _share);\\n        emit Burn(_account, _share);\\n    }\\n\\n    function setUrls(string[] memory _urls) external onlyOwner {\\n        urls = _urls;\\n    }\\n}\\n\",\"keccak256\":\"0x1cd09439b154f1198ba3dafe334383f40f6895c11f2ab3269239a1adeca4fd5c\",\"license\":\"MIT\"},\"contracts/sti/STIMinterTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./STIMinter.sol\\\";\\nimport \\\"../bni/priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../bni/constant/AuroraConstantTest.sol\\\";\\nimport \\\"../bni/constant/AvaxConstantTest.sol\\\";\\nimport \\\"../bni/constant/BscConstantTest.sol\\\";\\nimport \\\"../bni/constant/EthConstantTest.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\n\\ncontract STIMinterTest is STIMinter {\\n\\n    function initialize(\\n        address _admin, address _biconomy,\\n        address _STI, address _priceOracle\\n    ) external override initializer {\\n        __Ownable_init();\\n\\n        admin = _admin;\\n        trustedForwarder = _biconomy;\\n        STI = ISTI(_STI);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        chainIDs.push(EthConstantTest.CHAINID);\\n        tokens.push(Const.NATIVE_ASSET); // ETH\\n        chainIDs.push(EthConstantTest.CHAINID);\\n        tokens.push(EthConstantTest.MATIC);\\n        chainIDs.push(BscConstantTest.CHAINID);\\n        tokens.push(Const.NATIVE_ASSET); // BNB\\n        chainIDs.push(AvaxConstantTest.CHAINID);\\n        tokens.push(Const.NATIVE_ASSET); // AVAX\\n        chainIDs.push(AuroraConstantTest.CHAINID);\\n        tokens.push(AuroraConstantTest.WNEAR);\\n\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n        targetPercentages.push(2000); // 20%\\n\\n        updateTid();\\n\\n        urls.push(\\\"http://localhost:8001/\\\");\\n        gatewaySigner = _admin;\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view override returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(EthConstantTest.USDT);\\n    }\\n}\\n\",\"keccak256\":\"0x0e7272c608e06e2b7244a3c05dfd7d0557fbdc8ca7cf5b7dddde27c40752571e\",\"license\":\"MIT\"},\"interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\",\"keccak256\":\"0x2feb0e97ff08902dc4fc0a993753af45c01fb5565f281cefc877f4bc490c8abf\",\"license\":\"MIT\"},\"libs/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4e6a1c99ec5a0369c516e18940336732c07df7c91f048042926154305b8fb720\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n}\\r\\n\",\"keccak256\":\"0x1fe6004a4b9bb67e1c6083bf8a0aa20a312d110f184d7fa396d34cbad86a739b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c8063796676be11610167578063b47c6a27116100ce578063ece90e9011610087578063ece90e9014610619578063f2fde38b14610621578063f3253c6314610634578063f851a44014610647578063f8c8765e1461065a578063fd6878cc1461066d57600080fd5b8063b47c6a271461059b578063b9bd5bb5146105ba578063cb25bb65146105cd578063d3b974a0146105e0578063da3bc85c146105f3578063dd8aae411461060657600080fd5b80639600abf9116101205780639600abf91461053457806397cd02e6146105475780639f86d4dd1461055a578063a08ce5201461056d578063a7645a2014610580578063af05a7491461059357600080fd5b8063796676be146104c45780637da0a877146104d75780637ed66ec6146104ea5780637fb2df42146104fd5780638da5cb5b146105105780639532a4331461052157600080fd5b80635042f9b61161020b5780635ad748e4116101c45780635ad748e4146104655780635b8e243d146104785780635c975abb1461048b5780636cc895a914610496578063704b6c02146104a9578063715018a6146104bc57600080fd5b80635042f9b6146103d75780635344cac9146103df5780635605af2c1461040557806357016b0a14610418578063572b6c051461042b5780635796d0b01461045d57600080fd5b806336c5d7241161025d57806336c5d7241461033357806338a871631461034657806340b8e57f14610369578063486ff0cd1461037c57806349445553146103a25780634f64b2be146103c457600080fd5b806309d23e241461029a5780630d8b76a8146102c0578063193ab102146102d55780631c60ffc3146102dd5780632630c12f14610308575b600080fd5b6102ad6102a8366004613317565b610680565b6040519081526020015b60405180910390f35b6102d36102ce366004613347565b6106a1565b005b6102ad610755565b6102ad6102eb366004613362565b60cc60209081526000928352604080842090915290825290205481565b60cf5461031b906001600160a01b031681565b6040516001600160a01b0390911681526020016102b7565b6102d3610341366004613317565b6107c7565b6103596103543660046133cf565b610ace565b6040516102b794939291906134ae565b6102ad6103773660046133cf565b610bc8565b6040805180820190915260018152603160f81b60208201525b6040516102b79190613553565b6103b56103b0366004613317565b610c3f565b6040516102b793929190613566565b61031b6103d2366004613317565b610c8c565b6102ad610cb6565b6103f26103ed366004613347565b610d01565b6040516102b7979695949392919061359f565b6102ad6104133660046133cf565b610d62565b6102d3610426366004613362565b610e3e565b61044d610439366004613347565b6000546001600160a01b0391821691161490565b60405190151581526020016102b7565b610359611069565b6102d3610473366004613636565b6110bc565b6102d3610486366004613660565b6112f8565b60655460ff1661044d565b6102d36104a4366004613755565b6115eb565b6102d36104b7366004613347565b61164b565b6102d36116ee565b6103956104d2366004613317565b611743565b60005461031b906001600160a01b031681565b6103b56104f83660046133cf565b6117ef565b6102d361050b36600461381f565b611889565b6097546001600160a01b031661031b565b60ce5461031b906001600160a01b031681565b6103f26105423660046133cf565b6119dd565b6102ad6105553660046138f9565b611b12565b6102ad610568366004613636565b611bdf565b6102ad61057b3660046133cf565b611d5b565b6102ad61058e366004613317565b611dcb565b6102ad611ddb565b6105a3611e26565b6040805192835260ff9091166020830152016102b7565b6102d36105c8366004613347565b611ec1565b6103596105db366004613997565b611f2c565b6103b56105ee366004613a1e565b61212a565b6102ad610601366004613aad565b612461565b6102ad6106143660046138f9565b61254a565b6102ad61259b565b6102d361062f366004613347565b6125e6565b60d15461031b906001600160a01b031681565b60cd5461031b906001600160a01b031681565b6102d3610668366004613b10565b6126a0565b6102ad61067b3660046133cf565b61298b565b60c9818154811061069057600080fd5b600091825260209091200154905081565b6106a96129ef565b6001600160a01b03166106c46097546001600160a01b031690565b6001600160a01b0316146106f35760405162461bcd60e51b81526004016106ea90613b64565b60405180910390fd5b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f56b079178193d2a52b3949d9cd8bc5503daadffd4a704722e18b8325021a974191015b60405180910390a15050565b6040805160048152602481018252602080820180516001600160e01b0316630c9d588160e11b179052825160009181018290529092309260d09290916315816bcb60e21b91015b60408051601f1981840301815290829052630556f18360e41b82526106ea9594939291600401613bd4565b6107cf6129ef565b6001600160a01b03166107ea6097546001600160a01b031690565b6001600160a01b0316146108105760405162461bcd60e51b81526004016106ea90613b64565b60ca548082106108505760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081d1a5960aa1b60448201526064016106ea565b600060c9838154811061086557610865613d01565b90600052602060002001549050600060ca848154811061088757610887613d01565b600091825260208220015460cb80546001600160a01b03909216935090869081106108b4576108b4613d01565b9060005260206000200154905060c96001856108d09190613d2d565b815481106108e0576108e0613d01565b906000526020600020015460c986815481106108fe576108fe613d01565b60009182526020909120015560c980548061091b5761091b613d44565b6001900381819060005260206000200160009055905560ca6001856109409190613d2d565b8154811061095057610950613d01565b60009182526020909120015460ca80546001600160a01b03909216918790811061097c5761097c613d01565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ca8054806109bb576109bb613d44565b600082815260209020810160001990810180546001600160a01b031916905501905560cb6109ea600186613d2d565b815481106109fa576109fa613d01565b906000526020600020015460cb8681548110610a1857610a18613d01565b60009182526020909120015560cb805480610a3557610a35613d44565b60008281526020808220830160001990810183905590920190925584825260cc815260408083206001600160a01b0386168452909152812055610a766129fe565b604080518481526001600160a01b0384166020820152908101829052606081018690527fd8cc1d279bf727e9ee02c4ed116f7c12f4965ace9b477482de71a7929a1871b3906080015b60405180910390a15050505050565b60608080806000808080610ae48b8d018d613d7a565b93509350935093506000610b7582868686604051602001610b0793929190613e79565b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c015b60405160208183030381529060405280519060200120612b4190919063ffffffff16565b60d1549091506001600160a01b03808316911614610ba55760405162461bcd60e51b81526004016106ea90613ea0565b610bb0858585611f2c565b98509850985098505050505050945094509450949050565b6000808080610bd987890189613ecd565b9250925092506000610bf8828585604051602001610b07929190613f4a565b60d1549091506001600160a01b03808316911614610c285760405162461bcd60e51b81526004016106ea90613ea0565b610c328484612461565b9998505050505050505050565b6040805160048152602481018252602080820180516001600160e01b0316633c1d708960e01b179052825190810184905260609283928392309260d09291633f6b376360e11b910161079c565b60ca8181548110610c9c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6040805160048152602481018252602080820180516001600160e01b03166328217cdb60e11b179052825160009181018290529092309260d0929091630504672960e51b910161079c565b6040805160048152602481018252602080820180516001600160e01b0316630ba9805f60e31b17905282516001600160a01b03851691810191909152606092839283928392839283928392309260d0929091639600abf960e01b910161079c565b6000808080610d7387890189613ecd565b9250925092506000610d92828585604051602001610b07929190613f4a565b60d1549091506001600160a01b03808316911614610dc25760405162461bcd60e51b81526004016106ea90613ea0565b82518015610de85783600081518110610ddd57610ddd613d01565b602002602001015195505b60015b81811015610e30576000858281518110610e0757610e07613d01565b6020026020010151905080881115610e1d578097505b5080610e2881613f59565b915050610deb565b505050505050949350505050565b610e466129ef565b6001600160a01b0316610e616097546001600160a01b031690565b6001600160a01b031614610e875760405162461bcd60e51b81526004016106ea90613b64565b600082815260cc602090815260408083206001600160a01b038516845290915290205480158015610ed6575060c9600081548110610ec757610ec7613d01565b90600052602060002001548314155b8015610f0d575060ca600081548110610ef157610ef1613d01565b6000918252602090912001546001600160a01b03838116911614155b610f495760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b60448201526064016106ea565b60c9805460018082019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280184905560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0319166001600160a01b03861617905560cb8054808401825560009182527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb015554610ffa9190613d2d565b600084815260cc602090815260408083206001600160a01b038716808552908352928190208490558051878152918201929092529081018290529091507fefa15d4fefbb71d07b3cdc624ab208ebe2d3b6933946582fd8b807e8a5bc93cc9060600160405180910390a1505050565b6040805160048152602481018252602080820180516001600160e01b03166305796d0b60e41b1790528251600091810191909152606092839283928392309260d09290916338a8716360e01b910161079c565b6097546001600160a01b03163314806110df575060cd546001600160a01b031633145b6111215760405162461bcd60e51b815260206004820152601360248201527227b7363c9037bbb732b91037b91030b236b4b760691b60448201526064016106ea565b600260015414156111745760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ea565b60026001558015801590611204575060ce546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a082319060240160206040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112009190613f74565b8111155b6112475760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b60448201526064016106ea565b60ce5460405163079cc67960e41b81526001600160a01b03848116600483015260248201849052909116906379cc679090604401600060405180830381600087803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b5050604080516001600160a01b0386168152602081018590527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5935001905060405180910390a1505060018055565b6097546001600160a01b031633148061131b575060cd546001600160a01b031633145b61135d5760405162461bcd60e51b815260206004820152601360248201527227b7363c9037bbb732b91037b91030b236b4b760691b60448201526064016106ea565b600260015414156113b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ea565b600260015560655460ff16156113fb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ea565b600080611406611e26565b9092509050600061141882600a614071565b836114288664e8d4a51000614080565b6114329190614080565b61143c919061409f565b905085811061144c576000611456565b6114568187613d2d565b9550600060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e09190613f74565b905060008715806114ef575081155b61150d57876114fe8484614080565b611508919061409f565b61150f565b825b90506103e8611520826103e5614080565b61152a919061409f565b60ce546040516340c10f1960e01b81526001600160a01b038a81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561157a57600080fd5b505af115801561158e573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018490527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9250606001905060405180910390a1505060018055505050505050565b6115f36129ef565b6001600160a01b031661160e6097546001600160a01b031690565b6001600160a01b0316146116345760405162461bcd60e51b81526004016106ea90613b64565b80516116479060d09060208401906131ce565b5050565b6116536129ef565b6001600160a01b031661166e6097546001600160a01b031690565b6001600160a01b0316146116945760405162461bcd60e51b81526004016106ea90613b64565b60cd80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e89101610749565b6116f66129ef565b6001600160a01b03166117116097546001600160a01b031690565b6001600160a01b0316146117375760405162461bcd60e51b81526004016106ea90613b64565b6117416000612b5d565b565b60d0818154811061175357600080fd5b90600052602060002001600091509050805461176e90613b99565b80601f016020809104026020016040519081016040528092919081815260200182805461179a90613b99565b80156117e75780601f106117bc576101008083540402835291602001916117e7565b820191906000526020600020905b8154815290600101906020018083116117ca57829003601f168201915b505050505081565b60608080600061180185870187613317565b905060008080806118148b8d018d613d7a565b9350935093509350600061183782868686604051602001610b0793929190613e79565b60d1549091506001600160a01b038083169116146118675760405162461bcd60e51b81526004016106ea90613ea0565b6118738585858961212a565b9850985098505050505050509450945094915050565b6118916129ef565b6001600160a01b03166118ac6097546001600160a01b031690565b6001600160a01b0316146118d25760405162461bcd60e51b81526004016106ea90613b64565b60cb54819081146119155760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b60448201526064016106ea565b6000805b828110156119915784848281811061193357611933613d01565b9050602002013560cb828154811061194d5761194d613d01565b60009182526020909120015584848281811061196b5761196b613d01565b905060200201358261197d91906140c1565b91508061198981613f59565b915050611919565b5061271081146119d75760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b60448201526064016106ea565b50505050565b6060808080808080806119f28b8d018d6140d9565b604051979f50959d50939b509199509750955093509150600090611a24908a908a908a908a908a908a90602001614218565b604051602081830303815290604052805190602001209050600083604051602001611a4f919061424b565b60408051808303601f19018152828252805160209182012081840186905283830181905282518085038401815260608501909352825192909101919091207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006080840152609c830181905290925090600090611acf90869060bc01610b51565b60d1549091506001600160a01b03808316911614611aff5760405162461bcd60e51b81526004016106ea90613ea0565b5050505050949950949992975094509450565b60008060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6357600080fd5b505afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b9190613f74565b905080611bb25750670de0b6b3a764000092915050565b80611bbc8461254a565b611bce90670de0b6b3a7640000614080565b611bd8919061409f565b9392505050565b6000816000108015611c6d575060ce546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b158015611c3157600080fd5b505afa158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c699190613f74565b8211155b611cb05760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b60448201526064016106ea565b60ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cfe57600080fd5b505afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d369190613f74565b611d4883670de0b6b3a7640000614080565b611d52919061409f565b90505b92915050565b60008080611d6b86880188614257565b915091506000611d868284604051602001610b07919061424b565b60d1549091506001600160a01b03808316911614611db65760405162461bcd60e51b81526004016106ea90613ea0565b611dbf8361254a565b98975050505050505050565b60cb818154811061069057600080fd5b6040805160048152602481018252602080820180516001600160e01b031663af05a74960e01b179052825160009181018290529092309260d0929091633f5a1e3360e21b910161079c565b60cf5460405163b3596f0760e01b81527321e48034753e490ff04f2f75f7caedf081b320d5600482015260009182916001600160a01b039091169063b3596f0790602401604080518083038186803b158015611e8157600080fd5b505afa158015611e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb991906142b0565b915091509091565b611ec96129ef565b6001600160a01b0316611ee46097546001600160a01b031690565b6001600160a01b031614611f0a5760405162461bcd60e51b81526004016106ea90613b64565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b606080606080611f3d878787612baf565b80519092506000805b82811015611f8757848181518110611f6057611f60613d01565b602002602001015182611f7391906140c1565b915080611f7f81613f59565b915050611f46565b50816001600160401b03811115611fa057611fa0613695565b604051908082528060200260200182016040528015611fc9578160200160208202803683370190505b50925060005b828110156120625781156120145781612710868381518110611ff357611ff3613d01565b60200260200101516120059190614080565b61200f919061409f565b612033565b60cb818154811061202757612027613d01565b90600052602060002001545b84828151811061204557612045613d01565b60209081029190910101528061205a81613f59565b915050611fcf565b5060c960ca8585838054806020026020016040519081016040528092919081815260200182805480156120b457602002820191906000526020600020905b8154815260200190600101908083116120a0575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561211057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120f2575b505050505092509550955095509550505093509350935093565b606080606060008061213d898989611f2c565b935093505050600081519050600080612154611e26565b9092509050600061216682600a614071565b836121768c64e8d4a51000614080565b6121809190614080565b61218a919061409f565b905060005b848110156121d0578681815181106121a9576121a9613d01565b6020026020010151826121bc91906140c1565b9150806121c881613f59565b91505061218f565b50600080856001600160401b038111156121ec576121ec613695565b604051908082528060200260200182016040528015612215578160200160208202803683370190505b50905060005b868110156122e657600061271060cb838154811061223b5761223b613d01565b9060005260206000200154866122519190614080565b61225b919061409f565b9050808a838151811061227057612270613d01565b602002602001015110156122d35760008a838151811061229257612292613d01565b6020026020010151826122a59190613d2d565b9050808484815181106122ba576122ba613d01565b60209081029190910101526122cf81866140c1565b9450505b50806122de81613f59565b91505061221b565b50856001600160401b038111156122ff576122ff613695565b604051908082528060200260200182016040528015612328578160200160208202803683370190505b50985060005b86811015612395578282828151811061234957612349613d01565b60200260200101518e61235c9190614080565b612366919061409f565b8a828151811061237857612378613d01565b60209081029190910101528061238d81613f59565b91505061232e565b5060c960ca8a828054806020026020016040519081016040528092919081815260200182805480156123e657602002820191906000526020600020905b8154815260200190600101908083116123d2575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561244257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612424575b505050505091509a509a509a5050505050505050509450945094915050565b815181516000919081146124b05760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b60448201526064016106ea565b60006124bb8561254a565b9050806124cd57600092505050611d55565b6000805b83811015612535578681815181106124eb576124eb613d01565b602002602001015186828151811061250557612505613d01565b60200260200101516125179190614080565b61252190836140c1565b91508061252d81613f59565b9150506124d1565b50612540828261409f565b9695505050505050565b805160009081805b828110156125935784818151811061256c5761256c613d01565b60200260200101518261257f91906140c1565b91508061258b81613f59565b915050612552565b509392505050565b6040805160048152602481018252602080820180516001600160e01b0316630ece90e960e41b179052825160009181018290529092309260d09290916340b8e57f60e01b910161079c565b6125ee6129ef565b6001600160a01b03166126096097546001600160a01b031690565b6001600160a01b03161461262f5760405162461bcd60e51b81526004016106ea90613b64565b6001600160a01b0381166126945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ea565b61269d81612b5d565b50565b60006126ac6001612d3f565b905080156126c8576000805460ff60a81b1916600160a81b1790555b6126d0612ddf565b60cd80546001600160a01b038088166001600160a01b0319928316179092556000805487841690831617815560ce805487851690841617905560cf80549386169383169390931790925560c980546001818101835560047f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2892830181905560ca805480840182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee19081018054881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee9081179091558654808601885586019390935581548085018355810180548816737d1afa7b718fb893db30a3abc0cfc608aacfebb01790558554808501875560619086015581548085018355810180548816841790558554808501875561a86990860155815480850183558101805488169093179092558454808401909555634e4541539490930193909355815480820190925591018054909216734861825e75ab14553e5af711ebbe6873d369d1461790915560cb80548083018255928190526107d07fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb93840181905581548084018355840181905581548084018355840181905581548084018355840181905581549283019091559101556128b66129fe565b60d0805460018101825560009190915260408051808201909152601680825275687474703a2f2f6c6f63616c686f73743a383030312f60501b6020909201918252612924927fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb01919061322b565b5060d180546001600160a01b0319166001600160a01b0387161790558015612984576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610abf565b5050505050565b6000808061299b86880188614257565b9150915060006129b68284604051602001610b07919061424b565b60d1549091506001600160a01b038083169116146129e65760405162461bcd60e51b81526004016106ea90613ea0565b611dbf83611b12565b60006129f9612e10565b905090565b600060c9805480602002602001604051908101604052809291908181526020018280548015612a4c57602002820191906000526020600020905b815481526020019060010190808311612a38575b50505050509050600060ca805480602002602001604051908101604052809291908181526020018280548015612aab57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a8d575b505083519394506000925050505b818110156119d7578060cc6000868481518110612ad857612ad8613d01565b602002602001015181526020019081526020016000206000858481518110612b0257612b02613d01565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612b3990613f59565b915050612ab9565b6000806000612b508585612e44565b9150915061259381612eb4565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b815160ca5460609190806001600160401b03811115612bd057612bd0613695565b604051908082528060200260200182016040528015612bf9578160200160208202803683370190505b50925060005b82811015612d35576000878281518110612c1b57612c1b613d01565b602002602001015190506000878381518110612c3957612c39613d01565b602090810291909101810151600084815260cc835260408082206001600160a01b03841683529093529190912054909150808511612c7957505050612d23565b80158015612cda575060c9600081548110612c9657612c96613d01565b906000526020600020015483141580612cda575060ca600081548110612cbe57612cbe613d01565b6000918252602090912001546001600160a01b03838116911614155b15612ce757505050612d23565b878481518110612cf957612cf9613d01565b6020026020010151878281518110612d1357612d13613d01565b6020026020010181815250505050505b80612d2d81613f59565b915050612bff565b5050509392505050565b60008054600160a81b900460ff1615612d88578160ff166001148015612d645750303b155b612d805760405162461bcd60e51b81526004016106ea906142e6565b506000919050565b60005460ff808416600160a01b9092041610612db65760405162461bcd60e51b81526004016106ea906142e6565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600054600160a81b900460ff16612e085760405162461bcd60e51b81526004016106ea90614334565b61174161306f565b600060183610801590612e2d57506000546001600160a01b031633145b15612e3f575060131936013560601c90565b503390565b600080825160411415612e7b5760208301516040840151606085015160001a612e6f878285856130a8565b94509450505050612ead565b825160401415612ea55760208301516040840151612e9a868383613195565b935093505050612ead565b506000905060025b9250929050565b6000816004811115612ec857612ec861437f565b1415612ed15750565b6001816004811115612ee557612ee561437f565b1415612f335760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ea565b6002816004811115612f4757612f4761437f565b1415612f955760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ea565b6003816004811115612fa957612fa961437f565b14156130025760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106ea565b60048160048111156130165761301661437f565b141561269d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106ea565b600054600160a81b900460ff166130985760405162461bcd60e51b81526004016106ea90614334565b6117416130a36129ef565b612b5d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156130df575060009050600361318c565b8460ff16601b141580156130f757508460ff16601c14155b15613108575060009050600461318c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561315c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166131855760006001925092505061318c565b9150600090505b94509492505050565b6000806001600160ff1b038316816131b260ff86901c601b6140c1565b90506131c0878288856130a8565b935093505050935093915050565b82805482825590600052602060002090810192821561321b579160200282015b8281111561321b578251805161320b91849160209091019061322b565b50916020019190600101906131ee565b506132279291506132ab565b5090565b82805461323790613b99565b90600052602060002090601f016020900481019282613259576000855561329f565b82601f1061327257805160ff191683800117855561329f565b8280016001018555821561329f579182015b8281111561329f578251825591602001919060010190613284565b506132279291506132c8565b808211156132275760006132bf82826132dd565b506001016132ab565b5b8082111561322757600081556001016132c9565b5080546132e990613b99565b6000825580601f106132f9575050565b601f01602090049060005260206000209081019061269d91906132c8565b60006020828403121561332957600080fd5b5035919050565b80356001600160a01b0381168114612dda57600080fd5b60006020828403121561335957600080fd5b611d5282613330565b6000806040838503121561337557600080fd5b8235915061338560208401613330565b90509250929050565b60008083601f8401126133a057600080fd5b5081356001600160401b038111156133b757600080fd5b602083019150836020828501011115612ead57600080fd5b600080600080604085870312156133e557600080fd5b84356001600160401b03808211156133fc57600080fd5b6134088883890161338e565b9096509450602087013591508082111561342157600080fd5b5061342e8782880161338e565b95989497509550505050565b600081518084526020808501945080840160005b8381101561346a5781518752958201959082019060010161344e565b509495945050505050565b600081518084526020808501945080840160005b8381101561346a5781516001600160a01b031687529582019590820190600101613489565b6080815260006134c1608083018761343a565b82810360208401526134d38187613475565b905082810360408401526134e7818661343a565b905082810360608401526134fb818561343a565b979650505050505050565b6000815180845260005b8181101561352c57602081850181015186830182015201613510565b8181111561353e576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611d526020830184613506565b606081526000613579606083018661343a565b828103602084015261358b8186613475565b90508281036040840152612540818561343a565b60e0815260006135b260e083018a61343a565b82810360208401526135c4818a613475565b905082810360408401526135d8818961343a565b905082810360608401526135ec818861343a565b90508281036080840152613600818761343a565b905082810360a0840152613614818661343a565b905082810360c0840152613628818561343a565b9a9950505050505050505050565b6000806040838503121561364957600080fd5b61365283613330565b946020939093013593505050565b60008060006060848603121561367557600080fd5b8335925061368560208501613330565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156136d3576136d3613695565b604052919050565b60006001600160401b038211156136f4576136f4613695565b5060051b60200190565b60006001600160401b0383111561371757613717613695565b61372a601f8401601f19166020016136ab565b905082815283838301111561373e57600080fd5b828260208301376000602084830101529392505050565b6000602080838503121561376857600080fd5b82356001600160401b038082111561377f57600080fd5b818501915085601f83011261379357600080fd5b81356137a66137a1826136db565b6136ab565b81815260059190911b830184019084810190888311156137c557600080fd5b8585015b83811015613812578035858111156137e15760008081fd5b8601603f81018b136137f35760008081fd5b6138048b89830135604084016136fe565b8452509186019186016137c9565b5098975050505050505050565b6000806020838503121561383257600080fd5b82356001600160401b038082111561384957600080fd5b818501915085601f83011261385d57600080fd5b81358181111561386c57600080fd5b8660208260051b850101111561388157600080fd5b60209290920196919550909350505050565b600082601f8301126138a457600080fd5b813560206138b46137a1836136db565b82815260059290921b840181019181810190868411156138d357600080fd5b8286015b848110156138ee57803583529183019183016138d7565b509695505050505050565b60006020828403121561390b57600080fd5b81356001600160401b0381111561392157600080fd5b61392d84828501613893565b949350505050565b600082601f83011261394657600080fd5b813560206139566137a1836136db565b82815260059290921b8401810191818101908684111561397557600080fd5b8286015b848110156138ee5761398a81613330565b8352918301918301613979565b6000806000606084860312156139ac57600080fd5b83356001600160401b03808211156139c357600080fd5b6139cf87838801613893565b945060208601359150808211156139e557600080fd5b6139f187838801613935565b93506040860135915080821115613a0757600080fd5b50613a1486828701613893565b9150509250925092565b60008060008060808587031215613a3457600080fd5b84356001600160401b0380821115613a4b57600080fd5b613a5788838901613893565b95506020870135915080821115613a6d57600080fd5b613a7988838901613935565b94506040870135915080821115613a8f57600080fd5b50613a9c87828801613893565b949793965093946060013593505050565b60008060408385031215613ac057600080fd5b82356001600160401b0380821115613ad757600080fd5b613ae386838701613893565b93506020850135915080821115613af957600080fd5b50613b0685828601613893565b9150509250929050565b60008060008060808587031215613b2657600080fd5b613b2f85613330565b9350613b3d60208601613330565b9250613b4b60408601613330565b9150613b5960608601613330565b905092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680613bad57607f821691505b60208210811415613bce57634e487b7160e01b600052602260045260246000fd5b50919050565b600060a0820160018060a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b83811015613cc55788870360bf1901855281548390600181811c9080831680613c3857607f831692505b8a8310811415613c5657634e487b7160e01b88526022600452602488fd5b828c5260208c01818015613c715760018114613c8257613cac565b60ff19861682528c82019650613cac565b6000898152602090208a5b86811015613ca657815484820152908501908e01613c8d565b83019750505b50949b5050978901979490940193505050600101613c0e565b5050505050508281036040840152613cdd8187613506565b6001600160e01b03198616606085015290508281036080840152611dbf8185613506565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613d3f57613d3f613d17565b500390565b634e487b7160e01b600052603160045260246000fd5b600082601f830112613d6b57600080fd5b611d52838335602085016136fe565b60008060008060808587031215613d9057600080fd5b84356001600160401b0380821115613da757600080fd5b613db388838901613893565b95506020870135915080821115613dc957600080fd5b613dd588838901613935565b94506040870135915080821115613deb57600080fd5b613df788838901613893565b93506060870135915080821115613e0d57600080fd5b50613e1a87828801613d5a565b91505092959194509250565b8051600090602080840183831561346a5781518752958201959082019060010161344e565b8051600090602080840183831561346a5781516001600160a01b031687529582019590820190600101613489565b6000613e97613e91613e8b8488613e26565b86613e4b565b84613e26565b95945050505050565b60208082526013908201527214da59db995c881a5cc81a5b98dbdc9c9958dd606a1b604082015260600190565b600080600060608486031215613ee257600080fd5b83356001600160401b0380821115613ef957600080fd5b613f0587838801613893565b94506020860135915080821115613f1b57600080fd5b613f2787838801613893565b93506040860135915080821115613f3d57600080fd5b50613a1486828701613d5a565b600061392d613e918386613e26565b6000600019821415613f6d57613f6d613d17565b5060010190565b600060208284031215613f8657600080fd5b5051919050565b600181815b80851115613fc8578160001904821115613fae57613fae613d17565b80851615613fbb57918102915b93841c9390800290613f92565b509250929050565b600082613fdf57506001611d55565b81613fec57506000611d55565b8160018114614002576002811461400c57614028565b6001915050611d55565b60ff84111561401d5761401d613d17565b50506001821b611d55565b5060208310610133831016604e8410600b841016171561404b575081810a611d55565b6140558383613f8d565b806000190482111561406957614069613d17565b029392505050565b6000611d5260ff841683613fd0565b600081600019048311821515161561409a5761409a613d17565b500290565b6000826140bc57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156140d4576140d4613d17565b500190565b600080600080600080600080610100898b0312156140f657600080fd5b88356001600160401b038082111561410d57600080fd5b6141198c838d01613893565b995060208b013591508082111561412f57600080fd5b61413b8c838d01613935565b985060408b013591508082111561415157600080fd5b61415d8c838d01613893565b975060608b013591508082111561417357600080fd5b61417f8c838d01613893565b965060808b013591508082111561419557600080fd5b6141a18c838d01613893565b955060a08b01359150808211156141b757600080fd5b6141c38c838d01613893565b945060c08b01359150808211156141d957600080fd5b6141e58c838d01613893565b935060e08b01359150808211156141fb57600080fd5b506142088b828c01613d5a565b9150509295985092959890939650565b6000611dbf613e9161424561423f614239614233878e613e26565b8c613e4b565b8a613e26565b88613e26565b86613e26565b6000611d528284613e26565b6000806040838503121561426a57600080fd5b82356001600160401b038082111561428157600080fd5b61428d86838701613893565b935060208501359150808211156142a357600080fd5b50613b0685828601613d5a565b600080604083850312156142c357600080fd5b82519150602083015160ff811681146142db57600080fd5b809150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fdfea264697066735822122014c604d24fdd1facf1f6469dbcd72ee2fa85765d03d5a0b1ff6de9cd9140c1e564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnByAdmin(address,uint256)": {
        "details": "mint STIs according to the deposited USDT",
        "params": {
          "_account": "account to which STIs will be minted",
          "_share": "amount of STI to be burnt"
        }
      },
      "getDepositTokenComposition(uint256[],address[],uint256[],uint256)": {
        "params": {
          "_USDTAmt": "amount of USDT with 6 decimals"
        },
        "returns": {
          "_0": "_USDTAmts amount of USDT should be deposited to each pools"
        }
      },
      "getPoolsUnbonded1(address)": {
        "returns": {
          "_0": "_chainIDs is an array of chain IDs.",
          "_1": "_tokens is an array of tokens.",
          "_2": "_waitings is an array of token amounts that is not unbonded.",
          "_3": "_waitingInUSDs is an array of USD value of token amounts that is not unbonded.",
          "_4": "_unbondeds is an array of token amounts that is unbonded.",
          "_5": "_unbondedInUSDs is an array USD value of token amounts that is unbonded.",
          "_6": "_waitForTses is an array of timestamps to wait to the next claim."
        }
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "getWithdrawPerc(address,uint256)": {
        "params": {
          "_share": "amount of STI to be withdrawn"
        },
        "returns": {
          "_sharePerc": "percentage of assets which should be withdrawn. It's 18 decimals"
        }
      },
      "mintByAdmin(uint256,address,uint256)": {
        "details": "mint STIs according to the deposited USDT",
        "params": {
          "_USDTAmt": "the deposited amount of USDT with 6 decimals",
          "_account": "account to which STIs will be minted",
          "_pool": "total USD worth in all pools of STI after deposited"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToken(uint256,address)": {
        "notice": "After this method called, setTokenCompositionTargetPerc should be called to adjust percentages."
      },
      "getAPR(uint256[],uint256[])": {
        "notice": "The length of array is based on network count. And the lengths should be same on the arraies."
      },
      "getAllPoolInUSD(uint256[])": {
        "notice": "The length of array is based on network count. And the lengths should be same on the arraies."
      },
      "getCurrentTokenCompositionPerc(uint256[],address[],uint256[])": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "getDepositTokenComposition(uint256[],address[],uint256[],uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "getPricePerFullShare(uint256[])": {
        "notice": "Can be used for calculate both user shares & APR"
      },
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      },
      "removeToken(uint256)": {
        "notice": "After this method called, setTokenCompositionTargetPerc should be called to adjust percentages."
      },
      "setTokenCompositionTargetPerc(uint256[])": {
        "notice": "The length of array is based on token count."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53123,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 390,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 434,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2709,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 42586,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "chainIDs",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 42589,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "tokens",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 42592,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "targetPercentages",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 42598,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "tid",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 42600,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "admin",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 42603,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "STI",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(ISTI)42470"
      },
      {
        "astId": 42606,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "priceOracle",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IPriceOracle)11071"
      },
      {
        "astId": 42609,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "urls",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 42611,
        "contract": "contracts/sti/STIMinterTest.sol:STIMinterTest",
        "label": "gatewaySigner",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPriceOracle)11071": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISTI)42470": {
        "encoding": "inplace",
        "label": "contract ISTI",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}