{
  "address": "0x806dF8d8eAf0C9236e7D0F327F7f8f5f4460cd8D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        }
      ],
      "name": "AdjustWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollectProfitAndUpdateWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenDeposit",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryWallet",
          "type": "address"
        }
      ],
      "name": "SetTreasuryWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TransferredOutFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtWithdraw",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenWithdraw",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectProfitAndUpdateWatermark",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitFeePerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_perc",
          "type": "uint256[]"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profitFeePerc",
          "type": "uint256"
        }
      ],
      "name": "setProfitFeePerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "watermark",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bee780ea967dacb3a917f109a1080401accf20d628abd2c751c9c5d78fba6e5",
  "receipt": {
    "to": null,
    "from": "0x3f68A3c1023d736D8Be867CA49Cb18c543373B99",
    "contractAddress": "0x806dF8d8eAf0C9236e7D0F327F7f8f5f4460cd8D",
    "transactionIndex": 67,
    "gasUsed": "2740784",
    "logsBloom": "0x
    "blockHash": "0xce080c3b1b7b30d16d560eeabf6082655a6e38b70eb5cc01effb2f0e46708c86",
    "transactionHash": "0x7bee780ea967dacb3a917f109a1080401accf20d628abd2c751c9c5d78fba6e5",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 31151153,
        "transactionHash": "0x7bee780ea967dacb3a917f109a1080401accf20d628abd2c751c9c5d78fba6e5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003f68a3c1023d736d8be867ca49cb18c543373b99",
          "0x0000000000000000000000009c56f33b968f83922bccf6d7689b9c883af9de49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000247df8f89eb6d600000000000000000000000000000000000000000000000004f7a0247efae649b0000000000000000000000000000000000000000000002445bda40f8cf2c07ef0000000000000000000000000000000000000000000000004d3222b865c2f73b0000000000000000000000000000000000000000000002445e2220885917754f",
        "logIndex": 256,
        "blockHash": "0xce080c3b1b7b30d16d560eeabf6082655a6e38b70eb5cc01effb2f0e46708c86"
      }
    ],
    "blockNumber": 31151153,
    "cumulativeGasUsed": "15073022",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "aa3856c1d3ffc31a6e9e810ff9b9f811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"}],\"name\":\"AdjustWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollectProfitAndUpdateWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenDeposit\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransferredOutFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenWithdraw\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfitAndUpdateWatermark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_perc\",\"type\":\"uint256[]\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFeePerc\",\"type\":\"uint256\"}],\"name\":\"setProfitFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,address[],uint256[])\":{\"params\":{\"_USDTAmts\":\"amounts of USDT should be deposited to each pools. It's 6 decimals\"}},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawPerc(address,uint256)\":{\"params\":{\"_sharePerc\":\"percentage of assets which should be withdrawn. It's 18 decimals\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,address[],uint256[])\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/BNIVault.sol\":\"BNIVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/BNIVault.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\n\\ninterface IStrategy {\\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\\n    function withdrawPerc(uint sharePerc) external;\\n    function withdrawFromPool(uint pid, uint sharePerc) external returns (uint);\\n    function emergencyWithdraw() external;\\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\\n    function getAPR() external view returns (uint);\\n}\\n\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BNIVault is ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    address public admin;\\n    IStrategy public strategy;\\n    IPriceOracle public priceOracle;\\n\\n    uint constant DENOMINATOR = 10000;\\n    uint public profitFeePerc;\\n    address public treasuryWallet;\\n    uint public watermark; // In USD (18 decimals)\\n    uint public fees; // In USD (18 decimals)\\n\\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit);\\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint sharePerc);\\n    event Rebalance(uint pid, uint sharePerc, uint amount, address target);\\n    event Reinvest(uint amount);\\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\\n    event TransferredOutFees(uint fees, address token);\\n    \\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == address(admin), \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _treasuryWallet, address _admin,\\n        address _strategy, address _priceOracle,\\n        address _USDT\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        treasuryWallet = _treasuryWallet;\\n        admin = _admin;\\n        strategy = IStrategy(_strategy);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        profitFeePerc = 2000;\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(6 <= usdtDecimals, \\\"USDT decimals must >= 6\\\");\\n\\n        USDT.safeApprove(address(strategy), type(uint).max);\\n    }\\n\\n    function getChainID() public view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. It's 6 decimals\\n    function deposit(\\n        address _account, address[] memory _tokens, uint[] memory _USDTAmts\\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\\n        require(_account != address(0), \\\"Invalid account\\\");\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _USDTAmts.length, \\\"Not match array length\\\");\\n\\n        uint k = 10 ** (usdtDecimals - 6);\\n        uint USDTAmt;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            _USDTAmts[i] = _USDTAmts[i] * k;\\n            USDTAmt += _USDTAmts[i];\\n        }\\n        require(0 < USDTAmt, \\\"Amounts must > 0\\\");\\n\\n        USDT.safeTransferFrom(_account, address(this), USDTAmt);\\n\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n\\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\\n        (uint newUSDTAmt, uint[] memory newUSDTAmts) = _transferOutFees(USDTAmt, _USDTAmts);\\n        if (newUSDTAmt > 0) {\\n            strategy.invest(_tokens, newUSDTAmts);\\n        }\\n        adjustWatermark(amtDeposit, true);\\n\\n        emit Deposit(_account, USDTAmt, address(USDT));\\n    }\\n\\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\\n    function withdrawPerc(address _account, uint _sharePerc) external onlyOwnerOrAdmin nonReentrant {\\n        require(_sharePerc > 0, \\\"SharePerc must > 0\\\");\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        \\n        uint pool = getAllPoolInUSD();\\n        uint withdrawAmt = pool * _sharePerc / 1e18;\\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\\n        uint USDTAmt;\\n        if (!paused()) {\\n            strategy.withdrawPerc(sharePerc);\\n            USDTAmt = USDT.balanceOf(address(this));\\n            adjustWatermark(withdrawAmt, false);\\n        } else {\\n            USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\\n        }\\n        USDT.safeTransfer(_account, USDTAmt);\\n        emit Withdraw(_account, withdrawAmt, address(USDT), _sharePerc);\\n    }\\n\\n    function rebalance(uint _pid, uint _sharePerc, address _target) external onlyOwnerOrAdmin {\\n        uint USDTAmt = strategy.withdrawFromPool(_pid, _sharePerc);\\n        if (0 < USDTAmt) {\\n            address[] memory targets = new address[](1);\\n            targets[0] = _target;\\n            uint[] memory USDTAmts = new uint[](1);\\n            USDTAmts[0] = USDTAmt;\\n            strategy.invest(targets, USDTAmts);\\n            emit Rebalance(_pid, _sharePerc, USDTAmt, _target);\\n        }\\n    }\\n\\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\\n        _pause();\\n        strategy.emergencyWithdraw();\\n        watermark = 0;\\n    }\\n\\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _perc.length, \\\"Not match array length\\\");\\n\\n        _unpause();\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n            uint totalPerc;\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                totalPerc = _perc[i];\\n            }\\n\\n            uint[] memory USMTAmts = new uint[](poolCnt);\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\\n            }\\n\\n            strategy.invest(_tokens, USMTAmts);\\n            adjustWatermark(amtDeposit, true);\\n            emit Reinvest(USDTAmt);\\n        }\\n    }\\n\\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\\n        _collectProfitAndUpdateWatermark();\\n    }\\n    function _collectProfitAndUpdateWatermark() private {\\n        uint currentWatermark = strategy.getAllPoolInUSD();\\n        uint lastWatermark = watermark;\\n        uint fee;\\n        if (currentWatermark > lastWatermark) {\\n            uint profit = currentWatermark - lastWatermark;\\n            fee = profit * profitFeePerc / DENOMINATOR;\\n            fees += fee;\\n            watermark = currentWatermark;\\n        }\\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\\n    }\\n\\n    /// @param signs True for positive, false for negative\\n    function adjustWatermark(uint amount, bool signs) private {\\n        uint lastWatermark = watermark;\\n        watermark = signs == true\\n                    ? watermark + amount\\n                    : (watermark > amount) ? watermark - amount : 0;\\n        emit AdjustWatermark(watermark, lastWatermark);\\n    }\\n\\n    function withdrawFees() external onlyOwnerOrAdmin {\\n        if (!paused()) {\\n            uint pool = strategy.getAllPoolInUSD();\\n            uint _fees = fees;\\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\\n            strategy.withdrawPerc(sharePerc);\\n        }\\n        _transferOutFees(USDT.balanceOf(address(this)), new uint[](0));\\n    }\\n\\n    function _transferOutFees(uint _USDTAmt, uint[] memory _USDTAmts) private returns (uint, uint[] memory) {\\n        uint _fees = fees;\\n        if (_fees != 0) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint FeeAmt = _fees * (10 ** USDTPriceDecimals) / ((10 ** (18-usdtDecimals)) * USDTPriceInUSD);\\n\\n            uint prevUSDTAmt = _USDTAmt;\\n            uint poolCnt = _USDTAmts.length;\\n            if (FeeAmt < _USDTAmt) {\\n                _fees = 0;\\n                _USDTAmt -= FeeAmt;\\n            } else {\\n                _fees -= (_USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals));\\n                FeeAmt = _USDTAmt;\\n                _USDTAmt = 0;\\n            }\\n            fees = _fees;\\n\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                _USDTAmts[i] = _USDTAmts[i] * _USDTAmt / prevUSDTAmt;\\n            }\\n\\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\\n        }\\n        return (_USDTAmt, _USDTAmts);\\n    }\\n\\n    function setStrategy(address _strategy) external onlyOwner {\\n        strategy = IStrategy(_strategy);\\n\\n        if (USDT.allowance(address(this), address(strategy)) == 0) {\\n            USDT.safeApprove(address(strategy), type(uint).max);\\n        }\\n    }\\n\\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\\n        require(profitFeePerc < 3001, \\\"Profit fee cannot > 30%\\\");\\n        profitFeePerc = _profitFeePerc;\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\n        address oldTreasuryWallet = treasuryWallet;\\n        treasuryWallet = _treasuryWallet;\\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(address(USDT));\\n    }\\n\\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\\n        (tokens, pools) = strategy.getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint chainID = getChainID();\\n        chainIDs = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            chainIDs[i] = chainID;\\n        }\\n\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if(USDTAmt > 0 && poolCnt > 0) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint _pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n            pools[0] += _pool;\\n        }\\n        return (chainIDs, tokens, pools);\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint pool;\\n        if (paused()) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n        } else {\\n            pool = strategy.getAllPoolInUSD();\\n        }\\n        return (pool > fees ? pool - fees : 0);\\n    }\\n\\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\\n        return strategy.getCurrentTokenCompositionPerc();\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        return strategy.getAPR();\\n    }\\n}\\n\",\"keccak256\":\"0xc8de1b4fff88b606ee80687ebc962c1867264bc05cc56d3b5c6d4d3ce66078d2\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061309e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639b86088211610104578063c54e44eb116100a2578063efca0d0711610071578063efca0d07146103b1578063f13dc2e2146103ba578063f2fde38b146103c3578063f851a440146103d657600080fd5b8063c54e44eb1461037b578063c89d5b8b1461038e578063d38d5fc414610396578063db2e21bc146103a957600080fd5b8063aae09236116100de578063aae0923614610327578063ac25f6891461033e578063b47c6a2714610354578063bd244af41461037357600080fd5b80639b860882146102ee578063a8602fea14610301578063a8c62e761461031457600080fd5b8063562fa0df1161017c578063704b6c021161014b578063704b6c02146102b9578063715018a6146102cc5780638da5cb5b146102d45780639af1d35a146102e557600080fd5b8063562fa0df1461026d578063564b81ef146102805780635c975abb146102905780636d2b3d7b146102a657600080fd5b806333a100ca116101b857806333a100ca146102375780634626402b1461024a578063470343d81461025d578063476343ee1461026557600080fd5b80630b47b7ff146101df5780631459457a146101f45780632630c12f14610207575b600080fd5b6101f26101ed3660046127de565b6103e9565b005b6101f261020236600461280c565b61044e565b60cc5461021a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f261024536600461287d565b6106bf565b60ce5461021a906001600160a01b031681565b6101f2610787565b6101f26107d8565b6101f261027b3660046129d4565b6109d0565b465b60405190815260200161022e565b60655460ff16604051901515815260200161022e565b6101f26102b4366004612a4a565b610d68565b6101f26102c736600461287d565b610f7f565b6101f2610fe9565b6097546001600160a01b031661021a565b61028260d05481565b6101f26102fc366004612a83565b610ffb565b6101f261030f36600461287d565b611316565b60cb5461021a906001600160a01b031681565b61032f611378565b60405161022e93929190612b5b565b610346611637565b60405161022e929190612b9e565b61035c6116cc565b6040805192835260ff90911660208301520161022e565b61028261174e565b60c95461021a906001600160a01b031681565b6102826118f0565b6101f26103a4366004612bcc565b611972565b6101f2611cfc565b61028260cd5481565b61028260cf5481565b6101f26103d136600461287d565b611dba565b60ca5461021a906001600160a01b031681565b6103f1611e30565b610bb960cd54106104495760405162461bcd60e51b815260206004820152601760248201527f50726f666974206665652063616e6e6f74203e2033302500000000000000000060448201526064015b60405180910390fd5b60cd55565b600054610100900460ff161580801561046e5750600054600160ff909116105b806104885750303b158015610488575060005460ff166001145b6104eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610440565b6000805460ff19166001179055801561050e576000805461ff0019166101001790555b610516611e8a565b60ce80546001600160a01b038089166001600160a01b03199283161790925560ca805488841690831617905560cb805487841690831617905560cc80548684169083161790556107d060cd5560c9805492851692909116821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df9190612c0e565b60c9805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156106515760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d20360000000000000000006044820152606401610440565b60cb5460c954610670916001600160a01b039182169116600019611eb9565b80156106b7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050505050565b6106c7611e30565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b15801561072957600080fd5b505afa15801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190612c29565b6107845760cb5460c954610784916001600160a01b039182169116600019611eb9565b50565b6097546001600160a01b03163314806107aa575060ca546001600160a01b031633145b6107c65760405162461bcd60e51b815260040161044090612c42565b6107ce612015565b6107d661205b565b565b6097546001600160a01b03163314806107fb575060ca546001600160a01b031633145b6108175760405162461bcd60e51b815260040161044090612c42565b60655460ff1661093b5760cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b15801561086657600080fd5b505afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190612c29565b60d05490915060008282106108bb57670de0b6b3a76400006108d8565b826108ce83670de0b6b3a7640000612c85565b6108d89190612ca4565b60cb5460405163ed47d90960e01b8152600481018390529192506001600160a01b03169063ed47d90990602401600060405180830381600087803b15801561091f57600080fd5b505af1158015610933573d6000803e3d6000fd5b505050505050505b60c9546040516370a0823160e01b81523060048201526109cc916001600160a01b0316906370a082319060240160206040518083038186803b15801561098057600080fd5b505afa158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190612c29565b604080516000815260208101909152612178565b5050565b6097546001600160a01b03163314806109f3575060ca546001600160a01b031633145b610a0f5760405162461bcd60e51b815260040161044090612c42565b60026001541415610a625760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610440565b6002600155610a6f612015565b6001600160a01b038316610ab75760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610440565b815181518114610b025760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610440565b60c954600090610b1e90600690600160a01b900460ff16612cc6565b610b2990600a612dcf565b90506000805b83811015610bb35782858281518110610b4a57610b4a612dde565b6020026020010151610b5c9190612c85565b858281518110610b6e57610b6e612dde565b602002602001018181525050848181518110610b8c57610b8c612dde565b602002602001015182610b9f9190612df4565b915080610bab81612e0c565b915050610b2f565b5080600010610bf75760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b6044820152606401610440565b60c954610c0f906001600160a01b031687308461234e565b600080610c1a6116cc565b90925090506000610c2c82600a612dcf565b60c9548490610c4690600160a01b900460ff166012612cc6565b610c5190600a612dcf565b610c5b9087612c85565b610c659190612c85565b610c6f9190612ca4565b60cf5490915015610c8257610c8261205b565b600080610c8f868a612178565b90925090508115610cff5760cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190610ccc908d908590600401612b9e565b600060405180830381600087803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b505050505b610d0a836001612386565b60c954604080516001600160a01b038e81168252602082018a905290921682820152517fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f9181900360600190a1505060018055505050505050505050565b6097546001600160a01b0316331480610d8b575060ca546001600160a01b031633145b610da75760405162461bcd60e51b815260040161044090612c42565b60cb5460405163778d98b360e11b815260048101859052602481018490526000916001600160a01b03169063ef1b316690604401602060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d9190612c29565b90508015610f7957604080516001808252818301909252600091602080830190803683370190505090508281600081518110610e6b57610e6b612dde565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610ebc57610ebc612dde565b602090810291909101015260cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190610ef99085908590600401612b9e565b600060405180830381600087803b158015610f1357600080fd5b505af1158015610f27573d6000803e3d6000fd5b505060408051898152602081018990529081018690526001600160a01b03871660608201527f2be1fd30870a31378112c815f24e8611c8a87ed036bce5cf5670a8e34dbf210a925060800190506106ae565b50505050565b610f87611e30565b60ca80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b610ff1611e30565b6107d660006123ff565b6097546001600160a01b031633148061101e575060ca546001600160a01b031633145b61103a5760405162461bcd60e51b815260040161044090612c42565b611042612451565b81518151811461108d5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610440565b61109561249a565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190612c29565b90508015610f79576000806111246116cc565b9092509050600061113682600a612dcf565b60c954849061115090600160a01b900460ff166012612cc6565b61115b90600a612dcf565b6111659087612c85565b61116f9190612c85565b6111799190612ca4565b90506000805b868110156111b65787818151811061119957611199612dde565b6020026020010151915080806111ae90612e0c565b91505061117f565b5060008667ffffffffffffffff8111156111d2576111d261289a565b6040519080825280602002602001820160405280156111fb578160200160208202803683370190505b50905060005b878110156112685782878a838151811061121d5761121d612dde565b602002602001015161122f9190612c85565b6112399190612ca4565b82828151811061124b5761124b612dde565b60209081029190910101528061126081612e0c565b915050611201565b5060cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b719061129b908c908590600401612b9e565b600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b505050506112d8836001612386565b6040518681527fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed79060200160405180910390a1505050505050505050565b61131e611e30565b60ce80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed79101610fdd565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b1580156113cb57600080fd5b505afa1580156113df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114079190810190612e82565b80519193509150468167ffffffffffffffff8111156114285761142861289a565b604051908082528060200260200182016040528015611451578160200160208202803683370190505b50945060005b8281101561148f578186828151811061147257611472612dde565b60209081029190910101528061148781612e0c565b915050611457565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156114d457600080fd5b505afa1580156114e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150c9190612c29565b905060008111801561151e5750600083115b1561162f5760008061152e6116cc565b9092509050600061154082600a612dcf565b60c954849061155a90600160a01b900460ff166012612cc6565b61156590600a612dcf565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156115a857600080fd5b505afa1580156115bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e09190612c29565b6115ea9190612c85565b6115f49190612c85565b6115fe9190612ca4565b9050808760008151811061161457611614612dde565b602002602001018181516116289190612df4565b9052505050505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b15801561168857600080fd5b505afa15801561169c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c49190810190612e82565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c49190612f3d565b60008061175d60655460ff1690565b156118445760008061176d6116cc565b909250905061177d81600a612dcf565b60c954839061179790600160a01b900460ff166012612cc6565b6117a290600a612dcf565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156117e557600080fd5b505afa1580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d9190612c29565b6118279190612c85565b6118319190612c85565b61183b9190612ca4565b925050506118cd565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561189257600080fd5b505afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca9190612c29565b90505b60d05481116118dd5760006118ea565b60d0546118ea9082612f69565b91505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b15801561193557600080fd5b505afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190612c29565b905090565b6097546001600160a01b0316331480611995575060ca546001600160a01b031633145b6119b15760405162461bcd60e51b815260040161044090612c42565b60026001541415611a045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610440565b600260015580611a4b5760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b6044820152606401610440565b670de0b6b3a7640000811115611a8f5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610440565b6000611a9961174e565b90506000670de0b6b3a7640000611ab08484612c85565b611aba9190612ca4565b9050600060d05483611acc9190612df4565b611ade83670de0b6b3a7640000612c85565b611ae89190612ca4565b90506000611af860655460ff1690565b611be75760cb5460405163ed47d90960e01b8152600481018490526001600160a01b039091169063ed47d90990602401600060405180830381600087803b158015611b4257600080fd5b505af1158015611b56573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b158015611b9d57600080fd5b505afa158015611bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd59190612c29565b9050611be2836000612386565b611c85565b60c9546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015611c3657600080fd5b505afa158015611c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6e9190612c29565b611c789190612c85565b611c829190612ca4565b90505b60c954611c9c906001600160a01b031687836124ec565b60c954604080516001600160a01b038981168252602082018790529092168282015260608201879052517f457f950b75085c30ff780acd57bde642ff1316cc4aad9f286af2c1ffc4163a789181900360800190a150506001805550505050565b6097546001600160a01b0316331480611d1f575060ca546001600160a01b031633145b611d3b5760405162461bcd60e51b815260040161044090612c42565b611d43612015565b611d4b61251c565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d9b57600080fd5b505af1158015611daf573d6000803e3d6000fd5b5050600060cf555050565b611dc2611e30565b6001600160a01b038116611e275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b610784816123ff565b6097546001600160a01b031633146107d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b600054610100900460ff16611eb15760405162461bcd60e51b815260040161044090612f80565b6107d6612559565b801580611f425750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190612c29565b155b611fad5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610440565b6040516001600160a01b03831660248201526044810182905261201090849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612589565b505050565b60655460ff16156107d65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610440565b60cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d89190612c29565b60cf549091506000818311156121315760006120f48385612f69565b905061271060cd54826121079190612c85565b6121119190612ca4565b91508160d060008282546121259190612df4565b90915550505060cf8390555b60408051848152602081018490529081018290527fa3e3c8c92ed1e364d04865f99cd96c3ae8f5a7d800f4a1d8148a58c6de6f1b71906060015b60405180910390a1505050565b60d0546000906060908015612345576000806121926116cc565b60c954919350915060009083906121b490600160a01b900460ff166012612cc6565b6121bf90600a612dcf565b6121c99190612c85565b6121d483600a612dcf565b6121de9086612c85565b6121e89190612ca4565b875190915088908183101561220c5760009550612205838b612f69565b995061226d565b61221784600a612dcf565b60c954869061223190600160a01b900460ff166012612cc6565b61223c90600a612dcf565b612246908d612c85565b6122509190612c85565b61225a9190612ca4565b6122649087612f69565b60009a90965092505b60d086905560005b818110156122dc57828b8b838151811061229157612291612dde565b60200260200101516122a39190612c85565b6122ad9190612ca4565b8a82815181106122bf576122bf612dde565b6020908102919091010152806122d481612e0c565b915050612275565b5060ce5460c9546122fa916001600160a01b039182169116856124ec565b60c954604080518581526001600160a01b0390921660208301527f6e027f1905abd7233c51c9483e29a545074ed10d39db528c9791a246b26741ff910160405180910390a150505050505b50929391925050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f799085906323b872dd60e01b90608401611fd9565b60cf546001821515146123b6578260cf54116123a35760006123c4565b8260cf546123b19190612f69565b6123c4565b8260cf546123c49190612df4565b60cf81905560408051918252602082018390527f07b7fa586c4fdef11992d9448b97ba78814c23ddec7e1d4bf195fda6716e4726910161216b565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff166107d65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610440565b6124a2612451565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03831660248201526044810182905261201090849063a9059cbb60e01b90606401611fd9565b612524612015565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124cf3390565b600054610100900460ff166125805760405162461bcd60e51b815260040161044090612f80565b6107d6336123ff565b60006125de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661265b9092919063ffffffff16565b80519091501561201057808060200190518101906125fc9190612fcb565b6120105760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610440565b606061266a8484600085612674565b90505b9392505050565b6060824710156126d55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610440565b6001600160a01b0385163b61272c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610440565b600080866001600160a01b031685876040516127489190613019565b60006040518083038185875af1925050503d8060008114612785576040519150601f19603f3d011682016040523d82523d6000602084013e61278a565b606091505b509150915061279a8282866127a5565b979650505050505050565b606083156127b457508161266d565b8251156127c45782518084602001fd5b8160405162461bcd60e51b81526004016104409190613035565b6000602082840312156127f057600080fd5b5035919050565b6001600160a01b038116811461078457600080fd5b600080600080600060a0868803121561282457600080fd5b853561282f816127f7565b9450602086013561283f816127f7565b9350604086013561284f816127f7565b9250606086013561285f816127f7565b9150608086013561286f816127f7565b809150509295509295909350565b60006020828403121561288f57600080fd5b813561266d816127f7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128d9576128d961289a565b604052919050565b600067ffffffffffffffff8211156128fb576128fb61289a565b5060051b60200190565b600082601f83011261291657600080fd5b8135602061292b612926836128e1565b6128b0565b82815260059290921b8401810191818101908684111561294a57600080fd5b8286015b8481101561296e578035612961816127f7565b835291830191830161294e565b509695505050505050565b600082601f83011261298a57600080fd5b8135602061299a612926836128e1565b82815260059290921b840181019181810190868411156129b957600080fd5b8286015b8481101561296e57803583529183019183016129bd565b6000806000606084860312156129e957600080fd5b83356129f4816127f7565b9250602084013567ffffffffffffffff80821115612a1157600080fd5b612a1d87838801612905565b93506040860135915080821115612a3357600080fd5b50612a4086828701612979565b9150509250925092565b600080600060608486031215612a5f57600080fd5b83359250602084013591506040840135612a78816127f7565b809150509250925092565b60008060408385031215612a9657600080fd5b823567ffffffffffffffff80821115612aae57600080fd5b612aba86838701612905565b93506020850135915080821115612ad057600080fd5b50612add85828601612979565b9150509250929050565b600081518084526020808501945080840160005b83811015612b1757815187529582019590820190600101612afb565b509495945050505050565b600081518084526020808501945080840160005b83811015612b175781516001600160a01b031687529582019590820190600101612b36565b606081526000612b6e6060830186612ae7565b8281036020840152612b808186612b22565b90508281036040840152612b948185612ae7565b9695505050505050565b604081526000612bb16040830185612b22565b8281036020840152612bc38185612ae7565b95945050505050565b60008060408385031215612bdf57600080fd5b8235612bea816127f7565b946020939093013593505050565b805160ff81168114612c0957600080fd5b919050565b600060208284031215612c2057600080fd5b61266d82612bf8565b600060208284031215612c3b57600080fd5b5051919050565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612c9f57612c9f612c6f565b500290565b600082612cc157634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff841680821015612ce057612ce0612c6f565b90039392505050565b600181815b80851115612d24578160001904821115612d0a57612d0a612c6f565b80851615612d1757918102915b93841c9390800290612cee565b509250929050565b600082612d3b57506001612dc9565b81612d4857506000612dc9565b8160018114612d5e5760028114612d6857612d84565b6001915050612dc9565b60ff841115612d7957612d79612c6f565b50506001821b612dc9565b5060208310610133831016604e8410600b8410161715612da7575081810a612dc9565b612db18383612ce9565b8060001904821115612dc557612dc5612c6f565b0290505b92915050565b600061266d60ff841683612d2c565b634e487b7160e01b600052603260045260246000fd5b60008219821115612e0757612e07612c6f565b500190565b6000600019821415612e2057612e20612c6f565b5060010190565b600082601f830112612e3857600080fd5b81516020612e48612926836128e1565b82815260059290921b84018101918181019086841115612e6757600080fd5b8286015b8481101561296e5780518352918301918301612e6b565b60008060408385031215612e9557600080fd5b825167ffffffffffffffff80821115612ead57600080fd5b818501915085601f830112612ec157600080fd5b81516020612ed1612926836128e1565b82815260059290921b84018101918181019089841115612ef057600080fd5b948201945b83861015612f17578551612f08816127f7565b82529482019490820190612ef5565b91880151919650909350505080821115612f3057600080fd5b50612add85828601612e27565b60008060408385031215612f5057600080fd5b82519150612f6060208401612bf8565b90509250929050565b600082821015612f7b57612f7b612c6f565b500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612fdd57600080fd5b8151801515811461266d57600080fd5b60005b83811015613008578181015183820152602001612ff0565b83811115610f795750506000910152565b6000825161302b818460208701612fed565b9190910192915050565b6020815260008251806020840152613054816040850160208701612fed565b601f01601f1916919091016040019291505056fea26469706673582212204d472a22f9e558819f7e73ed7d00dc1429e92a9bd226a7c8aa01a760f2c3a32164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80639b86088211610104578063c54e44eb116100a2578063efca0d0711610071578063efca0d07146103b1578063f13dc2e2146103ba578063f2fde38b146103c3578063f851a440146103d657600080fd5b8063c54e44eb1461037b578063c89d5b8b1461038e578063d38d5fc414610396578063db2e21bc146103a957600080fd5b8063aae09236116100de578063aae0923614610327578063ac25f6891461033e578063b47c6a2714610354578063bd244af41461037357600080fd5b80639b860882146102ee578063a8602fea14610301578063a8c62e761461031457600080fd5b8063562fa0df1161017c578063704b6c021161014b578063704b6c02146102b9578063715018a6146102cc5780638da5cb5b146102d45780639af1d35a146102e557600080fd5b8063562fa0df1461026d578063564b81ef146102805780635c975abb146102905780636d2b3d7b146102a657600080fd5b806333a100ca116101b857806333a100ca146102375780634626402b1461024a578063470343d81461025d578063476343ee1461026557600080fd5b80630b47b7ff146101df5780631459457a146101f45780632630c12f14610207575b600080fd5b6101f26101ed3660046127de565b6103e9565b005b6101f261020236600461280c565b61044e565b60cc5461021a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f261024536600461287d565b6106bf565b60ce5461021a906001600160a01b031681565b6101f2610787565b6101f26107d8565b6101f261027b3660046129d4565b6109d0565b465b60405190815260200161022e565b60655460ff16604051901515815260200161022e565b6101f26102b4366004612a4a565b610d68565b6101f26102c736600461287d565b610f7f565b6101f2610fe9565b6097546001600160a01b031661021a565b61028260d05481565b6101f26102fc366004612a83565b610ffb565b6101f261030f36600461287d565b611316565b60cb5461021a906001600160a01b031681565b61032f611378565b60405161022e93929190612b5b565b610346611637565b60405161022e929190612b9e565b61035c6116cc565b6040805192835260ff90911660208301520161022e565b61028261174e565b60c95461021a906001600160a01b031681565b6102826118f0565b6101f26103a4366004612bcc565b611972565b6101f2611cfc565b61028260cd5481565b61028260cf5481565b6101f26103d136600461287d565b611dba565b60ca5461021a906001600160a01b031681565b6103f1611e30565b610bb960cd54106104495760405162461bcd60e51b815260206004820152601760248201527f50726f666974206665652063616e6e6f74203e2033302500000000000000000060448201526064015b60405180910390fd5b60cd55565b600054610100900460ff161580801561046e5750600054600160ff909116105b806104885750303b158015610488575060005460ff166001145b6104eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610440565b6000805460ff19166001179055801561050e576000805461ff0019166101001790555b610516611e8a565b60ce80546001600160a01b038089166001600160a01b03199283161790925560ca805488841690831617905560cb805487841690831617905560cc80548684169083161790556107d060cd5560c9805492851692909116821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df9190612c0e565b60c9805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156106515760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d20360000000000000000006044820152606401610440565b60cb5460c954610670916001600160a01b039182169116600019611eb9565b80156106b7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050505050565b6106c7611e30565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b15801561072957600080fd5b505afa15801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190612c29565b6107845760cb5460c954610784916001600160a01b039182169116600019611eb9565b50565b6097546001600160a01b03163314806107aa575060ca546001600160a01b031633145b6107c65760405162461bcd60e51b815260040161044090612c42565b6107ce612015565b6107d661205b565b565b6097546001600160a01b03163314806107fb575060ca546001600160a01b031633145b6108175760405162461bcd60e51b815260040161044090612c42565b60655460ff1661093b5760cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b15801561086657600080fd5b505afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190612c29565b60d05490915060008282106108bb57670de0b6b3a76400006108d8565b826108ce83670de0b6b3a7640000612c85565b6108d89190612ca4565b60cb5460405163ed47d90960e01b8152600481018390529192506001600160a01b03169063ed47d90990602401600060405180830381600087803b15801561091f57600080fd5b505af1158015610933573d6000803e3d6000fd5b505050505050505b60c9546040516370a0823160e01b81523060048201526109cc916001600160a01b0316906370a082319060240160206040518083038186803b15801561098057600080fd5b505afa158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190612c29565b604080516000815260208101909152612178565b5050565b6097546001600160a01b03163314806109f3575060ca546001600160a01b031633145b610a0f5760405162461bcd60e51b815260040161044090612c42565b60026001541415610a625760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610440565b6002600155610a6f612015565b6001600160a01b038316610ab75760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610440565b815181518114610b025760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610440565b60c954600090610b1e90600690600160a01b900460ff16612cc6565b610b2990600a612dcf565b90506000805b83811015610bb35782858281518110610b4a57610b4a612dde565b6020026020010151610b5c9190612c85565b858281518110610b6e57610b6e612dde565b602002602001018181525050848181518110610b8c57610b8c612dde565b602002602001015182610b9f9190612df4565b915080610bab81612e0c565b915050610b2f565b5080600010610bf75760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b6044820152606401610440565b60c954610c0f906001600160a01b031687308461234e565b600080610c1a6116cc565b90925090506000610c2c82600a612dcf565b60c9548490610c4690600160a01b900460ff166012612cc6565b610c5190600a612dcf565b610c5b9087612c85565b610c659190612c85565b610c6f9190612ca4565b60cf5490915015610c8257610c8261205b565b600080610c8f868a612178565b90925090508115610cff5760cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190610ccc908d908590600401612b9e565b600060405180830381600087803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b505050505b610d0a836001612386565b60c954604080516001600160a01b038e81168252602082018a905290921682820152517fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f9181900360600190a1505060018055505050505050505050565b6097546001600160a01b0316331480610d8b575060ca546001600160a01b031633145b610da75760405162461bcd60e51b815260040161044090612c42565b60cb5460405163778d98b360e11b815260048101859052602481018490526000916001600160a01b03169063ef1b316690604401602060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d9190612c29565b90508015610f7957604080516001808252818301909252600091602080830190803683370190505090508281600081518110610e6b57610e6b612dde565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610ebc57610ebc612dde565b602090810291909101015260cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190610ef99085908590600401612b9e565b600060405180830381600087803b158015610f1357600080fd5b505af1158015610f27573d6000803e3d6000fd5b505060408051898152602081018990529081018690526001600160a01b03871660608201527f2be1fd30870a31378112c815f24e8611c8a87ed036bce5cf5670a8e34dbf210a925060800190506106ae565b50505050565b610f87611e30565b60ca80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b610ff1611e30565b6107d660006123ff565b6097546001600160a01b031633148061101e575060ca546001600160a01b031633145b61103a5760405162461bcd60e51b815260040161044090612c42565b611042612451565b81518151811461108d5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610440565b61109561249a565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190612c29565b90508015610f79576000806111246116cc565b9092509050600061113682600a612dcf565b60c954849061115090600160a01b900460ff166012612cc6565b61115b90600a612dcf565b6111659087612c85565b61116f9190612c85565b6111799190612ca4565b90506000805b868110156111b65787818151811061119957611199612dde565b6020026020010151915080806111ae90612e0c565b91505061117f565b5060008667ffffffffffffffff8111156111d2576111d261289a565b6040519080825280602002602001820160405280156111fb578160200160208202803683370190505b50905060005b878110156112685782878a838151811061121d5761121d612dde565b602002602001015161122f9190612c85565b6112399190612ca4565b82828151811061124b5761124b612dde565b60209081029190910101528061126081612e0c565b915050611201565b5060cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b719061129b908c908590600401612b9e565b600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b505050506112d8836001612386565b6040518681527fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed79060200160405180910390a1505050505050505050565b61131e611e30565b60ce80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed79101610fdd565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b1580156113cb57600080fd5b505afa1580156113df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114079190810190612e82565b80519193509150468167ffffffffffffffff8111156114285761142861289a565b604051908082528060200260200182016040528015611451578160200160208202803683370190505b50945060005b8281101561148f578186828151811061147257611472612dde565b60209081029190910101528061148781612e0c565b915050611457565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156114d457600080fd5b505afa1580156114e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150c9190612c29565b905060008111801561151e5750600083115b1561162f5760008061152e6116cc565b9092509050600061154082600a612dcf565b60c954849061155a90600160a01b900460ff166012612cc6565b61156590600a612dcf565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156115a857600080fd5b505afa1580156115bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e09190612c29565b6115ea9190612c85565b6115f49190612c85565b6115fe9190612ca4565b9050808760008151811061161457611614612dde565b602002602001018181516116289190612df4565b9052505050505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b15801561168857600080fd5b505afa15801561169c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c49190810190612e82565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c49190612f3d565b60008061175d60655460ff1690565b156118445760008061176d6116cc565b909250905061177d81600a612dcf565b60c954839061179790600160a01b900460ff166012612cc6565b6117a290600a612dcf565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156117e557600080fd5b505afa1580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d9190612c29565b6118279190612c85565b6118319190612c85565b61183b9190612ca4565b925050506118cd565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b15801561189257600080fd5b505afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca9190612c29565b90505b60d05481116118dd5760006118ea565b60d0546118ea9082612f69565b91505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b15801561193557600080fd5b505afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190612c29565b905090565b6097546001600160a01b0316331480611995575060ca546001600160a01b031633145b6119b15760405162461bcd60e51b815260040161044090612c42565b60026001541415611a045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610440565b600260015580611a4b5760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b6044820152606401610440565b670de0b6b3a7640000811115611a8f5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610440565b6000611a9961174e565b90506000670de0b6b3a7640000611ab08484612c85565b611aba9190612ca4565b9050600060d05483611acc9190612df4565b611ade83670de0b6b3a7640000612c85565b611ae89190612ca4565b90506000611af860655460ff1690565b611be75760cb5460405163ed47d90960e01b8152600481018490526001600160a01b039091169063ed47d90990602401600060405180830381600087803b158015611b4257600080fd5b505af1158015611b56573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b158015611b9d57600080fd5b505afa158015611bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd59190612c29565b9050611be2836000612386565b611c85565b60c9546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015611c3657600080fd5b505afa158015611c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6e9190612c29565b611c789190612c85565b611c829190612ca4565b90505b60c954611c9c906001600160a01b031687836124ec565b60c954604080516001600160a01b038981168252602082018790529092168282015260608201879052517f457f950b75085c30ff780acd57bde642ff1316cc4aad9f286af2c1ffc4163a789181900360800190a150506001805550505050565b6097546001600160a01b0316331480611d1f575060ca546001600160a01b031633145b611d3b5760405162461bcd60e51b815260040161044090612c42565b611d43612015565b611d4b61251c565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d9b57600080fd5b505af1158015611daf573d6000803e3d6000fd5b5050600060cf555050565b611dc2611e30565b6001600160a01b038116611e275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b610784816123ff565b6097546001600160a01b031633146107d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b600054610100900460ff16611eb15760405162461bcd60e51b815260040161044090612f80565b6107d6612559565b801580611f425750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190612c29565b155b611fad5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610440565b6040516001600160a01b03831660248201526044810182905261201090849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612589565b505050565b60655460ff16156107d65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610440565b60cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d89190612c29565b60cf549091506000818311156121315760006120f48385612f69565b905061271060cd54826121079190612c85565b6121119190612ca4565b91508160d060008282546121259190612df4565b90915550505060cf8390555b60408051848152602081018490529081018290527fa3e3c8c92ed1e364d04865f99cd96c3ae8f5a7d800f4a1d8148a58c6de6f1b71906060015b60405180910390a1505050565b60d0546000906060908015612345576000806121926116cc565b60c954919350915060009083906121b490600160a01b900460ff166012612cc6565b6121bf90600a612dcf565b6121c99190612c85565b6121d483600a612dcf565b6121de9086612c85565b6121e89190612ca4565b875190915088908183101561220c5760009550612205838b612f69565b995061226d565b61221784600a612dcf565b60c954869061223190600160a01b900460ff166012612cc6565b61223c90600a612dcf565b612246908d612c85565b6122509190612c85565b61225a9190612ca4565b6122649087612f69565b60009a90965092505b60d086905560005b818110156122dc57828b8b838151811061229157612291612dde565b60200260200101516122a39190612c85565b6122ad9190612ca4565b8a82815181106122bf576122bf612dde565b6020908102919091010152806122d481612e0c565b915050612275565b5060ce5460c9546122fa916001600160a01b039182169116856124ec565b60c954604080518581526001600160a01b0390921660208301527f6e027f1905abd7233c51c9483e29a545074ed10d39db528c9791a246b26741ff910160405180910390a150505050505b50929391925050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f799085906323b872dd60e01b90608401611fd9565b60cf546001821515146123b6578260cf54116123a35760006123c4565b8260cf546123b19190612f69565b6123c4565b8260cf546123c49190612df4565b60cf81905560408051918252602082018390527f07b7fa586c4fdef11992d9448b97ba78814c23ddec7e1d4bf195fda6716e4726910161216b565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff166107d65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610440565b6124a2612451565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03831660248201526044810182905261201090849063a9059cbb60e01b90606401611fd9565b612524612015565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124cf3390565b600054610100900460ff166125805760405162461bcd60e51b815260040161044090612f80565b6107d6336123ff565b60006125de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661265b9092919063ffffffff16565b80519091501561201057808060200190518101906125fc9190612fcb565b6120105760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610440565b606061266a8484600085612674565b90505b9392505050565b6060824710156126d55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610440565b6001600160a01b0385163b61272c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610440565b600080866001600160a01b031685876040516127489190613019565b60006040518083038185875af1925050503d8060008114612785576040519150601f19603f3d011682016040523d82523d6000602084013e61278a565b606091505b509150915061279a8282866127a5565b979650505050505050565b606083156127b457508161266d565b8251156127c45782518084602001fd5b8160405162461bcd60e51b81526004016104409190613035565b6000602082840312156127f057600080fd5b5035919050565b6001600160a01b038116811461078457600080fd5b600080600080600060a0868803121561282457600080fd5b853561282f816127f7565b9450602086013561283f816127f7565b9350604086013561284f816127f7565b9250606086013561285f816127f7565b9150608086013561286f816127f7565b809150509295509295909350565b60006020828403121561288f57600080fd5b813561266d816127f7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128d9576128d961289a565b604052919050565b600067ffffffffffffffff8211156128fb576128fb61289a565b5060051b60200190565b600082601f83011261291657600080fd5b8135602061292b612926836128e1565b6128b0565b82815260059290921b8401810191818101908684111561294a57600080fd5b8286015b8481101561296e578035612961816127f7565b835291830191830161294e565b509695505050505050565b600082601f83011261298a57600080fd5b8135602061299a612926836128e1565b82815260059290921b840181019181810190868411156129b957600080fd5b8286015b8481101561296e57803583529183019183016129bd565b6000806000606084860312156129e957600080fd5b83356129f4816127f7565b9250602084013567ffffffffffffffff80821115612a1157600080fd5b612a1d87838801612905565b93506040860135915080821115612a3357600080fd5b50612a4086828701612979565b9150509250925092565b600080600060608486031215612a5f57600080fd5b83359250602084013591506040840135612a78816127f7565b809150509250925092565b60008060408385031215612a9657600080fd5b823567ffffffffffffffff80821115612aae57600080fd5b612aba86838701612905565b93506020850135915080821115612ad057600080fd5b50612add85828601612979565b9150509250929050565b600081518084526020808501945080840160005b83811015612b1757815187529582019590820190600101612afb565b509495945050505050565b600081518084526020808501945080840160005b83811015612b175781516001600160a01b031687529582019590820190600101612b36565b606081526000612b6e6060830186612ae7565b8281036020840152612b808186612b22565b90508281036040840152612b948185612ae7565b9695505050505050565b604081526000612bb16040830185612b22565b8281036020840152612bc38185612ae7565b95945050505050565b60008060408385031215612bdf57600080fd5b8235612bea816127f7565b946020939093013593505050565b805160ff81168114612c0957600080fd5b919050565b600060208284031215612c2057600080fd5b61266d82612bf8565b600060208284031215612c3b57600080fd5b5051919050565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612c9f57612c9f612c6f565b500290565b600082612cc157634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff841680821015612ce057612ce0612c6f565b90039392505050565b600181815b80851115612d24578160001904821115612d0a57612d0a612c6f565b80851615612d1757918102915b93841c9390800290612cee565b509250929050565b600082612d3b57506001612dc9565b81612d4857506000612dc9565b8160018114612d5e5760028114612d6857612d84565b6001915050612dc9565b60ff841115612d7957612d79612c6f565b50506001821b612dc9565b5060208310610133831016604e8410600b8410161715612da7575081810a612dc9565b612db18383612ce9565b8060001904821115612dc557612dc5612c6f565b0290505b92915050565b600061266d60ff841683612d2c565b634e487b7160e01b600052603260045260246000fd5b60008219821115612e0757612e07612c6f565b500190565b6000600019821415612e2057612e20612c6f565b5060010190565b600082601f830112612e3857600080fd5b81516020612e48612926836128e1565b82815260059290921b84018101918181019086841115612e6757600080fd5b8286015b8481101561296e5780518352918301918301612e6b565b60008060408385031215612e9557600080fd5b825167ffffffffffffffff80821115612ead57600080fd5b818501915085601f830112612ec157600080fd5b81516020612ed1612926836128e1565b82815260059290921b84018101918181019089841115612ef057600080fd5b948201945b83861015612f17578551612f08816127f7565b82529482019490820190612ef5565b91880151919650909350505080821115612f3057600080fd5b50612add85828601612e27565b60008060408385031215612f5057600080fd5b82519150612f6060208401612bf8565b90509250929050565b600082821015612f7b57612f7b612c6f565b500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612fdd57600080fd5b8151801515811461266d57600080fd5b60005b83811015613008578181015183820152602001612ff0565b83811115610f795750506000910152565b6000825161302b818460208701612fed565b9190910192915050565b6020815260008251806020840152613054816040850160208701612fed565b601f01601f1916919091016040019291505056fea26469706673582212204d472a22f9e558819f7e73ed7d00dc1429e92a9bd226a7c8aa01a760f2c3a32164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,address[],uint256[])": {
        "params": {
          "_USDTAmts": "amounts of USDT should be deposited to each pools. It's 6 decimals"
        }
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawPerc(address,uint256)": {
        "params": {
          "_sharePerc": "percentage of assets which should be withdrawn. It's 18 decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,address[],uint256[])": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 423,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 467,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1783,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 408,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6308,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "USDT",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20UpgradeableExt)6295"
      },
      {
        "astId": 6310,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "201",
        "type": "t_uint8"
      },
      {
        "astId": 6312,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "admin",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 6315,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "strategy",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IStrategy)6287"
      },
      {
        "astId": 6318,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "priceOracle",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IPriceOracle)8953"
      },
      {
        "astId": 6323,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "profitFeePerc",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 6325,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 6327,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "watermark",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 6329,
        "contract": "contracts/bni/BNIVault.sol:BNIVault",
        "label": "fees",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)6295": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)8953": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)6287": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}