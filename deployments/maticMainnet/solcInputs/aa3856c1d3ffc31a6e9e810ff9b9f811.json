{
  "language": "Solidity",
  "sources": {
    "contracts/bni/BNI.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\ncontract BNI is ERC20Upgradeable, OwnableUpgradeable {\r\n\r\n  address private _minter;\r\n\r\n  function initialize() external initializer {\r\n    __Ownable_init();\r\n    __ERC20_init(\"Blockchain Network Index\", \"BNI\");\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(_minter == msg.sender, \"Mintable: caller is not the minter\");\r\n    _;\r\n  }\r\n\r\n  function setMinter( address minter_ ) external onlyOwner() returns ( bool ) {\r\n    _minter = minter_;\r\n    return true;\r\n  }\r\n\r\n  function minter() public view returns (address) {\r\n    return _minter;\r\n  }\r\n\r\n  function mint(address account_, uint256 amount_) external onlyMinter() {\r\n    _mint(account_, amount_);\r\n  }\r\n\r\n  function burn(uint256 amount) public virtual {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) public virtual {\r\n    if (msg.sender != _minter) {\r\n      _spendAllowance(account, msg.sender, amount);\r\n    }\r\n    _burn(account, amount);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mwi/MWIVaultTest.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIVaultTest is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Market Weighted Index\", \"MWI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        strategy.invest(amount);\n\n        uint amtDeposit = amount * 1e12;//PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n        uint _totalSupply = totalSupply();\n        uint share = (_totalSupply == 0 || pool <= _totalSupply)  ? amtDeposit : amtDeposit * _totalSupply / pool;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint withdrawAmt = getAllPoolInUSD() * share / _totalSupply;\n\n        if (!paused()) {\n            strategy.withdrawPerc(share * 1e18 / _totalSupply);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n        } else {\n            uint USDTAmt = withdrawAmt / 1e12;//(PriceLib.getAssetPrice(address(USDT)) * 1e4); // USDT's decimals is 6, price's decimals is 8\n            USDT.safeTransfer(account, USDTAmt);\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        if (paused()) return USDT.balanceOf(address(this)) * 1e12;//PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n        return strategy.getAllPoolInUSD();\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "libs/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address public trustedForwarder;\n\n    /*\n     * require a function to be called through GSN only\n     */\n    modifier trustedForwarderOnly() {\n        require(msg.sender == address(trustedForwarder), \"Function can only be called through the trusted Forwarder\");\n        _;\n    }\n\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}"
    },
    "contracts/mwi/libs/Price.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\ninterface IAaveOracle {\n    function getAssetPrice(address asset) external view returns (uint256);\n}\n\nlibrary PriceLib {\n    IAaveOracle internal constant AaveOracle = IAaveOracle(0xEBd36016B3eD09D4693Ed4251c67Bd858c3c7C9C);\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\n\n    /// @return the price in USD of 8 decimals in precision.\n    function getAssetPrice(address asset) internal view returns (uint) {\n        if (asset == USDT) {\n            return uint(IChainlink(0xEBE676ee90Fe1112671f19b6B7459bC678B67e8a).latestAnswer());\n        }\n        return AaveOracle.getAssetPrice(asset);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity 0.8.9;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    function versionRecipient() external virtual view returns (string memory);\n}"
    },
    "contracts/mwi/MWIVault.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIVault is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    uint constant DENOMINATOR = 10000;\n    uint public watermark; // In USD (18 decimals)\n    uint public profitFeePerc;\n    uint public fees; // In USD (18 decimals)\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\n    event TransferredOutFees(uint fees, address token);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Market Weighted Index\", \"MWI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        profitFeePerc = 2000;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        uint amtDeposit = amount * PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\n        uint USDTAmt = _transferOutFees();\n        if (USDTAmt > 0) {\n            strategy.invest(amount);\n        }\n        adjustWatermark(amtDeposit, true);\n\n        uint _totalSupply = totalSupply();\n        uint share = _totalSupply == 0 ? amtDeposit : _totalSupply * amtDeposit / pool;\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\n        share = share * 997 / 1000;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint pool = getAllPoolInUSD();\n        uint withdrawAmt = pool * share / _totalSupply;\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\n\n        if (!paused()) {\n            strategy.withdrawPerc(sharePerc);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n            adjustWatermark(withdrawAmt, false);\n        } else {\n            uint USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n            USDT.safeTransfer(account, USDTAmt);\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n        watermark = 0;\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            uint amtDeposit = USDTAmt * PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n            strategy.invest(USDTAmt);\n            adjustWatermark(amtDeposit, true);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n    function _collectProfitAndUpdateWatermark() private {\n        uint currentWatermark = strategy.getAllPoolInUSD();\n        uint lastWatermark = watermark;\n        uint fee;\n        if (currentWatermark > lastWatermark) {\n            uint profit = currentWatermark - lastWatermark;\n            fee = profit * profitFeePerc / DENOMINATOR;\n            fees += fee;\n            watermark = currentWatermark;\n        }\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        uint lastWatermark = watermark;\n        watermark = signs == true\n                    ? watermark + amount\n                    : (watermark > amount) ? watermark - amount : 0;\n        emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        if (!paused()) {\n            uint pool = strategy.getAllPoolInUSD();\n            uint _fees = fees;\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\n            strategy.withdrawPerc(sharePerc);\n        }\n        _transferOutFees();\n    }\n\n    function _transferOutFees() private returns (uint USDTAmt) {\n        USDTAmt = USDT.balanceOf(address(this));\n        uint _fees = fees;\n        if (_fees != 0) {\n            uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n            uint FeeAmt = _fees / (USDTPriceInUSD * 1e4); // USDT's decimals is 6, price's decimals is 8\n\n            if (FeeAmt < USDTAmt) {\n                _fees = 0;\n                USDTAmt -= FeeAmt;\n            } else {\n                _fees -= (USDTAmt * USDTPriceInUSD * 1e4); // USDT's decimals is 6, price's decimals is 8\n                FeeAmt = USDTAmt;\n                USDTAmt = 0;\n            }\n            fees = _fees;\n\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\n        }\n    }\n\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\n        require(profitFeePerc < 3001, \"Profit fee cannot > 30%\");\n        profitFeePerc = _profitFeePerc;\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool;\n        if (paused()) {\n            pool = USDT.balanceOf(address(this)) * PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n        } else {\n            pool += strategy.getAllPoolInUSD();\n        }\n        return (pool > fees ? pool - fees : 0);\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/lci/LCIVaultTest.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIVaultTest is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x1F326a8CA5399418a76eA0efa0403Cbb00790C67);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Low-risk Crypto Index\", \"LCI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        strategy.invest(amount);\n\n        uint amtDeposit = amount; // USDT's decimals is 18\n        uint _totalSupply = totalSupply();\n        uint share = (_totalSupply == 0 || pool <= _totalSupply)  ? amtDeposit : amtDeposit * _totalSupply / pool;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint withdrawAmt = getAllPoolInUSD() * share / _totalSupply;\n\n        if (!paused()) {\n            strategy.withdrawPerc(share * 1e18 / _totalSupply);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n        } else {\n            USDT.safeTransfer(account, withdrawAmt); // USDT's decimals is 18\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        if (paused()) return USDT.balanceOf(address(this)); // USDT's decimals is 18\n        return strategy.getAllPoolInUSD();\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/mwi/MWIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIStrategyTest is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D);\n    IERC20Upgradeable public constant WBTC = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n    IERC20Upgradeable public constant USDt = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\n    IERC20Upgradeable public constant USDT_MAIN = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\n    IERC20Upgradeable public constant WBTC_MAIN = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\n    IERC20Upgradeable public constant WETH_MAIN = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\n    IERC20Upgradeable public constant WAVAX_MAIN = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n    IERC20Upgradeable public constant USDt_MAIN = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\n\n    IRouter public constant JoeRouter = IRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    IL2Vault public WBTCVault;\n    IL2Vault public WETHVault;\n    IL2Vault public WAVAXVault;\n    IL2Vault public USDTVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint public WBTCTargetPerc;\n    uint public WETHTargetPerc;\n    uint public WAVAXTargetPerc;\n    uint public USDTTargetPerc;\n\n    address public vault;\n\n    event TargetComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXTargetPool, uint USDTTargetPool);\n    event CurrentComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXCurrentPool, uint USDTCurrentPool);\n    event InvestWBTC(uint USDTAmt, uint WBTCAmt);\n    event InvestWETH(uint USDTAmt, uint WETHAmt);\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\n    event InvestUSDT(uint USDTAmt, uint USDtAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawWBTC(uint WBTCAmt, uint USDTAmt);\n    event WithdrawWETH(uint WETHAmt, uint USDTAmt);\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\n    event WithdrawUSDT(uint USDtAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external initializer {\n        __Ownable_init();\n\n        WBTCTargetPerc = 4500; // 45%\n        WETHTargetPerc = 3500; // 35%\n        WAVAXTargetPerc = 1500; // 15%\n        USDTTargetPerc = 500; // 5%\n\n        WBTCVault = _WBTCVault;\n        WETHVault = _WETHVault;\n        WAVAXVault = _WAVAXVault;\n        USDTVault = _USDTVault;\n\n        // USDT.safeApprove(address(JoeRouter), type(uint).max);\n        // WBTC.safeApprove(address(JoeRouter), type(uint).max);\n        // WETH.safeApprove(address(JoeRouter), type(uint).max);\n        // WAVAX.safeApprove(address(JoeRouter), type(uint).max);\n        // USDt.safeApprove(address(JoeRouter), type(uint).max);\n\n        // WBTC.safeApprove(address(WBTCVault), type(uint).max);\n        // WETH.safeApprove(address(WETHVault), type(uint).max);\n        // WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        // USDt.safeApprove(address(USDTVault), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        // USDTAmt = USDT.balanceOf(address(this));\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n        // uint k = USDTPriceInUSD * 1e4;\n\n        // uint[] memory pools = getEachPoolInUSD();\n        // uint pool = pools[0] + pools[1] + pools[2] + pools[3] + (USDTAmt * k); // USDT's decimals is 6\n        // uint WBTCTargetPool = pool * WBTCTargetPerc / DENOMINATOR;\n        // uint WETHTargetPool = pool * WETHTargetPerc / DENOMINATOR;\n        // uint WAVAXTargetPool = pool * WAVAXTargetPerc / DENOMINATOR;\n        // uint USDTTargetPool = pool * USDTTargetPerc / DENOMINATOR;\n\n        // // Rebalancing invest\n        // if (\n        //     WBTCTargetPool > pools[0] &&\n        //     WETHTargetPool > pools[1] &&\n        //     WAVAXTargetPool > pools[2] &&\n        //     USDTTargetPool > pools[3]\n        // ) {\n        //     _investWBTC((WBTCTargetPool-pools[0])/k, USDTPriceInUSD);\n        //     _investWETH((WETHTargetPool-pools[1])/k, USDTPriceInUSD);\n        //     _investWAVAX((WAVAXTargetPool-pools[2])/k, USDTPriceInUSD);\n        //     _investUSDT((USDTTargetPool-pools[3])/k);\n        // } else {\n        //     uint furthest;\n        //     uint farmIndex;\n        //     uint diff;\n\n        //     if (WBTCTargetPool > pools[0]) {\n        //         diff = WBTCTargetPool - pools[0];\n        //         furthest = diff;\n        //         farmIndex = 0;\n        //     }\n        //     if (WETHTargetPool > pools[1]) {\n        //         diff = WETHTargetPool - pools[1];\n        //         if (diff > furthest) {\n        //             furthest = diff;\n        //             farmIndex = 1;\n        //         }\n        //     }\n        //     if (WAVAXTargetPool > pools[2]) {\n        //         diff = WAVAXTargetPool - pools[2];\n        //         if (diff > furthest) {\n        //             furthest = diff;\n        //             farmIndex = 2;\n        //         }\n        //     }\n        //     if (USDTTargetPool > pools[3]) {\n        //         diff = USDTTargetPool - pools[3];\n        //         if (diff > furthest) {\n        //             farmIndex = 3;\n        //         }\n        //     }\n\n        //     if (farmIndex == 0) _investWBTC(USDTAmt, USDTPriceInUSD);\n        //     else if (farmIndex == 1) _investWETH(USDTAmt, USDTPriceInUSD);\n        //     else if (farmIndex == 2) _investWAVAX(USDTAmt, USDTPriceInUSD);\n        //     else _investUSDT(USDTAmt);\n        // }\n\n        // emit TargetComposition(WBTCTargetPool, WETHTargetPool, WAVAXTargetPool, USDTTargetPool);\n        // emit CurrentComposition(pools[0], pools[1], pools[2], pools[3]);\n    }\n\n    function _investWBTC(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 100 / WBTCPriceInUSD;  // USDT's decimals is 6, WBTC's decimals is 8\n        uint WBTCAmt = _swap2(address(USDT), address(WBTC), USDTAmt, amountOut*95/100);\n        WBTCVault.deposit(WBTCAmt);\n        emit InvestWBTC(USDTAmt, WBTCAmt);\n    }\n\n    function _investWETH(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WETHPriceInUSD;  // USDT's decimals is 6, WETH's decimals is 18\n        uint WETHAmt = _swap2(address(USDT), address(WETH), USDTAmt, amountOut*95/100);\n        WETHVault.deposit(WETHAmt);\n        emit InvestWETH(USDTAmt, WETHAmt);\n    }\n\n    function _investWAVAX(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WAVAXPriceInUSD;  // USDT's decimals is 6, WAVAX's decimals is 18\n        uint WAVAXAmt = _swap(address(USDT), address(WAVAX), USDTAmt, amountOut*95/100);\n        WAVAXVault.deposit(WAVAXAmt);\n        emit InvestWAVAX(USDTAmt, WAVAXAmt);\n    }\n\n    function _investUSDT(uint USDTAmt) private {\n        uint USDtAmt = _swap(address(USDT), address(USDt), USDTAmt, USDTAmt*99/100);\n        USDTVault.deposit(USDtAmt);\n        emit InvestUSDT(USDTAmt, USDtAmt);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        // uint USDTAmtBefore = USDT.balanceOf(address(this));\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        // _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        // _withdrawWETH(sharePerc, USDTPriceInUSD);\n        // _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        // _withdrawUSDT(sharePerc);\n\n        // USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawWBTC(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WBTCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WBTCVault.withdraw(amount);\n\n            uint WBTCAmt = WBTC.balanceOf(address(this));\n            uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n            uint amountOut = WBTCAmt * WBTCPriceInUSD / (USDTPriceInUSD * 100);  // USDT's decimals is 6, WBTC's decimals is 8\n            uint USDTAmt = _swap2(address(WBTC), address(USDT), WBTCAmt, amountOut*95/100);\n            emit WithdrawWBTC(WBTCAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWETH(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WETHVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WETHVault.withdraw(amount);\n\n            uint WETHAmt = WETH.balanceOf(address(this));\n            uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n            uint amountOut = WETHAmt * WETHPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WETH's decimals is 18\n            uint USDTAmt = _swap2(address(WETH), address(USDT), WETHAmt, amountOut*95/100);\n            emit WithdrawWETH(WETHAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWAVAX(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WAVAXVault.withdraw(amount);\n\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\n            uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            uint amountOut = WAVAXAmt * WAVAXPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WAVAX's decimals is 18\n            uint USDTAmt = _swap(address(WAVAX), address(USDT), WAVAXAmt, amountOut*95/100);\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawUSDT(uint _sharePerc) private {\n        uint amount = USDTVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTVault.withdraw(amount);\n\n            uint USDtAmt = USDt.balanceOf(address(this));\n            uint USDTAmt = _swap(address(USDt), address(USDT), USDtAmt, USDtAmt*99/100);\n            emit WithdrawUSDT(USDtAmt, USDTAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(WAVAX);\n        path[2] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        // if (farmIndex == 0) _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        // else if (farmIndex == 1) _withdrawWETH(sharePerc, USDTPriceInUSD);\n        // else if (farmIndex == 2) _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        // else if (farmIndex == 3) _withdrawUSDT(sharePerc);\n\n        // USDTAmt = USDT.balanceOf(address(this));\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        // _withdrawWBTC(1e18, USDTPriceInUSD);\n        // _withdrawWETH(1e18, USDTPriceInUSD);\n        // _withdrawWAVAX(1e18, USDTPriceInUSD);\n        // _withdrawUSDT(1e18);\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\n        require(_targetPerc.length == 4, \"Invalid count\");\n        require((_targetPerc[0]+_targetPerc[1]+_targetPerc[2]+_targetPerc[3]) == DENOMINATOR, \"Invalid parameter\");\n\n        WBTCTargetPerc = _targetPerc[0];\n        WETHTargetPerc = _targetPerc[1];\n        WAVAXTargetPerc = _targetPerc[2];\n        USDTTargetPerc = _targetPerc[3];\n    }\n\n    function getWBTCPoolInUSD() private view  returns (uint) {\n        uint amt = WBTCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WBTCVault.balanceOf(address(this)) / WBTCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWETHPoolInUSD() private view  returns (uint) {\n        uint amt = WETHVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WETHVault.balanceOf(address(this)) / WETHVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWAVAXPoolInUSD() private view  returns (uint) {\n        uint amt = WAVAXVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WAVAXVault.balanceOf(address(this)) / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTPoolInUSD() private view  returns (uint) {\n        uint amt = USDTVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTVault.balanceOf(address(this)) / USDTVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](4);\n        // pools[0] = getWBTCPoolInUSD();\n        // pools[1] = getWETHPoolInUSD();\n        // pools[2] = getWAVAXPoolInUSD();\n        // pools[3] = getUSDTPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint[] memory pools = getEachPoolInUSD();\n        // return pools[0] + pools[1] + pools[2] + pools[3];\n        return USDT.balanceOf(address(this));\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory tokens, uint[] memory percentages) {\n        tokens = new address[](4);\n        tokens[0] = address(WBTC_MAIN);\n        tokens[1] = address(WETH_MAIN);\n        tokens[2] = address(WAVAX_MAIN);\n        tokens[3] = address(USDt_MAIN);\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3];\n        percentages = new uint[](4);\n        percentages[0] = allPool == 0 ? WBTCTargetPerc : pools[0] * DENOMINATOR / allPool;\n        percentages[1] = allPool == 0 ? WETHTargetPerc : pools[1] * DENOMINATOR / allPool;\n        percentages[2] = allPool == 0 ? WAVAXTargetPerc : pools[2] * DENOMINATOR / allPool;\n        percentages[3] = allPool == 0 ? USDTTargetPerc : pools[3] * DENOMINATOR / allPool;\n    }\n\n    function getAPR() external view returns (uint) {\n        (, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr = WBTCVault.getAPR() * perc[0]\n                    + WETHVault.getAPR() * perc[1]\n                    + WAVAXVault.getAPR() * perc[2]\n                    + USDTVault.getAPR() * perc[3];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/mwi/MWIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIStrategy is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\n    IERC20Upgradeable public constant WBTC = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n    IERC20Upgradeable public constant USDt = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\n\n    IRouter public constant JoeRouter = IRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    uint constant POOL_COUNT = 4;\n    IL2Vault public WBTCVault;\n    IL2Vault public WETHVault;\n    IL2Vault public WAVAXVault;\n    IL2Vault public USDTVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint[] public targetPercentages;\n\n    address public vault;\n\n    event TargetComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXTargetPool, uint USDTTargetPool);\n    event CurrentComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXCurrentPool, uint USDTCurrentPool);\n    event InvestWBTC(uint USDTAmt, uint WBTCAmt);\n    event InvestWETH(uint USDTAmt, uint WETHAmt);\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\n    event InvestUSDT(uint USDTAmt, uint USDtAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawWBTC(uint WBTCAmt, uint USDTAmt);\n    event WithdrawWETH(uint WETHAmt, uint USDTAmt);\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\n    event WithdrawUSDT(uint USDtAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external initializer {\n        __Ownable_init();\n\n        targetPercentages.push(4500); // WBTC: 45%\n        targetPercentages.push(3500); // WETH: 35%\n        targetPercentages.push(1500); // WAVAX: 15%\n        targetPercentages.push(500); // USDT: 5%\n\n        WBTCVault = _WBTCVault;\n        WETHVault = _WETHVault;\n        WAVAXVault = _WAVAXVault;\n        USDTVault = _USDTVault;\n\n        USDT.safeApprove(address(JoeRouter), type(uint).max);\n        WBTC.safeApprove(address(JoeRouter), type(uint).max);\n        WETH.safeApprove(address(JoeRouter), type(uint).max);\n        WAVAX.safeApprove(address(JoeRouter), type(uint).max);\n        USDt.safeApprove(address(JoeRouter), type(uint).max);\n\n        WBTC.safeApprove(address(WBTCVault), type(uint).max);\n        WETH.safeApprove(address(WETHVault), type(uint).max);\n        WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        USDt.safeApprove(address(USDTVault), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        USDTAmt = USDT.balanceOf(address(this));\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3] + (USDTAmt * USDTPriceInUSD * 1e4); // USDT's decimals is 6\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        uint[] memory USDTAmts = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            USDTAmts[i] = USDTAmt * allocations[i] / totalAllocation;\n        }\n\n        if (USDTAmts[0] > 0) {\n            _investWBTC(USDTAmts[0], USDTPriceInUSD);\n        }\n        if (USDTAmts[1] > 0) {\n            _investWETH(USDTAmts[1], USDTPriceInUSD);\n        }\n        if (USDTAmts[2] > 0) {\n            _investWAVAX(USDTAmts[2], USDTPriceInUSD);\n        }\n        if (USDTAmts[3] > 0) {\n            _investUSDT(USDTAmts[3]);\n        }\n\n        emit CurrentComposition(pools[0], pools[1], pools[2], pools[3]);\n        emit TargetComposition(targetPercentages[0], targetPercentages[1], targetPercentages[2], targetPercentages[3]);\n    }\n\n    function _investWBTC(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 100 / WBTCPriceInUSD;  // USDT's decimals is 6, WBTC's decimals is 8\n        uint WBTCAmt = _swap2(address(USDT), address(WBTC), USDTAmt, amountOut*95/100);\n        WBTCVault.deposit(WBTCAmt);\n        emit InvestWBTC(USDTAmt, WBTCAmt);\n    }\n\n    function _investWETH(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WETHPriceInUSD;  // USDT's decimals is 6, WETH's decimals is 18\n        uint WETHAmt = _swap2(address(USDT), address(WETH), USDTAmt, amountOut*95/100);\n        WETHVault.deposit(WETHAmt);\n        emit InvestWETH(USDTAmt, WETHAmt);\n    }\n\n    function _investWAVAX(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WAVAXPriceInUSD;  // USDT's decimals is 6, WAVAX's decimals is 18\n        uint WAVAXAmt = _swap(address(USDT), address(WAVAX), USDTAmt, amountOut*95/100);\n        WAVAXVault.deposit(WAVAXAmt);\n        emit InvestWAVAX(USDTAmt, WAVAXAmt);\n    }\n\n    function _investUSDT(uint USDTAmt) private {\n        uint USDtAmt = _swap(address(USDT), address(USDt), USDTAmt, USDTAmt*99/100);\n        USDTVault.deposit(USDtAmt);\n        emit InvestUSDT(USDTAmt, USDtAmt);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        uint USDTAmtBefore = USDT.balanceOf(address(this));\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        _withdrawWETH(sharePerc, USDTPriceInUSD);\n        _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        _withdrawUSDT(sharePerc);\n\n        USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawWBTC(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WBTCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WBTCVault.withdraw(amount);\n\n            uint WBTCAmt = WBTC.balanceOf(address(this));\n            uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n            uint amountOut = WBTCAmt * WBTCPriceInUSD / (USDTPriceInUSD * 100);  // USDT's decimals is 6, WBTC's decimals is 8\n            uint USDTAmt = _swap2(address(WBTC), address(USDT), WBTCAmt, amountOut*95/100);\n            emit WithdrawWBTC(WBTCAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWETH(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WETHVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WETHVault.withdraw(amount);\n\n            uint WETHAmt = WETH.balanceOf(address(this));\n            uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n            uint amountOut = WETHAmt * WETHPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WETH's decimals is 18\n            uint USDTAmt = _swap2(address(WETH), address(USDT), WETHAmt, amountOut*95/100);\n            emit WithdrawWETH(WETHAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWAVAX(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WAVAXVault.withdraw(amount);\n\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\n            uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            uint amountOut = WAVAXAmt * WAVAXPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WAVAX's decimals is 18\n            uint USDTAmt = _swap(address(WAVAX), address(USDT), WAVAXAmt, amountOut*95/100);\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawUSDT(uint _sharePerc) private {\n        uint amount = USDTVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTVault.withdraw(amount);\n\n            uint USDtAmt = USDt.balanceOf(address(this));\n            uint USDTAmt = _swap(address(USDt), address(USDT), USDtAmt, USDtAmt*99/100);\n            emit WithdrawUSDT(USDtAmt, USDTAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(WAVAX);\n        path[2] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        if (farmIndex == 0) _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        else if (farmIndex == 1) _withdrawWETH(sharePerc, USDTPriceInUSD);\n        else if (farmIndex == 2) _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        else if (farmIndex == 3) _withdrawUSDT(sharePerc);\n\n        USDTAmt = USDT.balanceOf(address(this));\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        _withdrawWBTC(1e18, USDTPriceInUSD);\n        _withdrawWETH(1e18, USDTPriceInUSD);\n        _withdrawWAVAX(1e18, USDTPriceInUSD);\n        _withdrawUSDT(1e18);\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function setL2Vault(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external onlyOwner {\n        WBTCVault = _WBTCVault;\n        WETHVault = _WETHVault;\n        WAVAXVault = _WAVAXVault;\n        USDTVault = _USDTVault;\n\n        if (WBTC.allowance(address(this), address(WBTCVault)) == 0) {\n            WBTC.safeApprove(address(WBTCVault), type(uint).max);\n        }\n        if (WETH.allowance(address(this), address(WETHVault)) == 0) {\n            WETH.safeApprove(address(WETHVault), type(uint).max);\n        }\n        if (WAVAX.allowance(address(this), address(WAVAXVault)) == 0) {\n            WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        }\n        if (USDt.allowance(address(this), address(USDTVault)) == 0) {\n            USDt.safeApprove(address(USDTVault), type(uint).max);\n        }\n    }\n\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == DENOMINATOR, \"Invalid parameter\");\n    }\n\n    function getWBTCPoolInUSD() private view  returns (uint) {\n        uint amt = WBTCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WBTCVault.balanceOf(address(this)) / WBTCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWETHPoolInUSD() private view  returns (uint) {\n        uint amt = WETHVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WETHVault.balanceOf(address(this)) / WETHVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWAVAXPoolInUSD() private view  returns (uint) {\n        uint amt = WAVAXVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WAVAXVault.balanceOf(address(this)) / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTPoolInUSD() private view  returns (uint) {\n        uint amt = USDTVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTVault.balanceOf(address(this)) / USDTVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](POOL_COUNT);\n        pools[0] = getWBTCPoolInUSD();\n        pools[1] = getWETHPoolInUSD();\n        pools[2] = getWAVAXPoolInUSD();\n        pools[3] = getUSDTPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = getEachPoolInUSD();\n        return pools[0] + pools[1] + pools[2] + pools[3];\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory tokens, uint[] memory percentages) {\n        tokens = new address[](POOL_COUNT);\n        tokens[0] = address(WBTC);\n        tokens[1] = address(WETH);\n        tokens[2] = address(WAVAX);\n        tokens[3] = address(USDt);\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3];\n        percentages = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\n        }\n    }\n\n    function getAPR() external view returns (uint) {\n        (, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr = WBTCVault.getAPR() * perc[0]\n                    + WETHVault.getAPR() * perc[1]\n                    + WAVAXVault.getAPR() * perc[2]\n                    + USDTVault.getAPR() * perc[3];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/mwi/deps/VaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/DataTypes.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IERC20UpgradeableEx is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract Aave3VaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n\n    IUniRouter public constant JoeRouter = IUniRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        IAToken _aToken,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableEx(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        // token.approve(address(aPool), type(uint).max);\n        // aToken.approve(address(aPool), type(uint).max);\n        // WAVAX.approve(address(JoeRouter), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        // require(_amount > 0, \"Invalid amount\");\n\n        // uint _pool = getAllPool();\n        // token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // depositedBlock[msg.sender] = block.number;\n\n        // aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        // uint available = token.balanceOf(address(this));\n        // if(available < _amountToWithdraw) {\n        //     aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n        // }\n        // _burn(msg.sender, _shares);\n\n        // token.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // uint stakedTokens = aToken.balanceOf(address(this));\n        // if(stakedTokens > 0 ) {\n        //     aPool.withdraw(address(token), stakedTokens, address(this));\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < DENOMINATOR, \"yieldFeePerc invalid\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        // _yield();\n    }\n\n    function _yield() private {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.claimAllRewardsToSelf(assets);\n\n        uint rewardsCount = rewards.length;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint amount = amounts[i];\n            if (0 < amount && reward != address(WAVAX)) {\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, amount);\n            }\n        }\n\n        uint AVAXAmt = WAVAX.balanceOf(address(this));\n        if(AVAXAmt > 0) {\n            uint fee = AVAXAmt * yieldFee / DENOMINATOR; //yield fee\n            WAVAX.safeTransfer(treasuryWallet, fee);\n            AVAXAmt -= fee;\n\n            if (token != WAVAX) {\n                _swap(address(WAVAX), address(token), AVAXAmt);\n            }\n            _invest();\n\n            uint AVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            emit Yield((AVAXAmt + fee) * AVAXPriceInUSD / 1e8);\n            emit YieldFee(fee * AVAXPriceInUSD / 1e8);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = JoeRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint priceInUSD = PriceLib.getAssetPrice(address(token));\n        // uint _pool = getAllPool();\n        // if (tokenDecimals < 18) {\n        //     _pool = _pool * (10 ** (18-tokenDecimals));\n        // }\n        // return _pool * priceInUSD / 1e8;\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        // address[] memory assets = new address[](1);\n        // assets[0] = address(aToken);\n        // (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        // uint rewardsCount = rewards.length;\n        // uint pending;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     address reward = rewards[i];\n        //     uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n        //     uint numeratorDecimals = 18; // USD precision\n        //     uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals() // against to amounts\n        //                             + 8; // against to priceInUSD\n        //     uint _pending = (numeratorDecimals < denominatorDecimals)\n        //                     ? amounts[i] * priceInUSD / (10 ** (denominatorDecimals-numeratorDecimals))\n        //                     : amounts[i] * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals));\n        //     pending += _pending;\n        // }\n        // return pending;\n        return 10e18;\n    }\n\n    function getAPR() external view returns (uint) {\n        // DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        // uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        // address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        // uint rewardsCount = rewards.length;\n        // uint totalSupply = aToken.totalSupply();\n        // uint TokenPriceInUSD = PriceLib.getAssetPrice(address(token));\n        // uint rewardsApr;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     address reward = rewards[i];\n        //     (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n        //     uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n        //     uint numeratorDecimals = 18 // APR precision\n        //                             + tokenDecimals; // against to totalSupply\n        //     uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals(); // against to emissionPerSecond\n        //     uint rewardApr = YEAR_IN_SEC * emissionPerSecond * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals))\n        //                     / (totalSupply * TokenPriceInUSD);\n        //     rewardsApr += rewardApr;\n        // }\n\n        // return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n        return 8e15;\n    }\n\n}\n"
    },
    "contracts/mwi/libs/DataTypes.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\nlibrary DataTypes {\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    //timestamp of last update\r\n    uint40 lastUpdateTimestamp;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint16 id;\r\n    //aToken address\r\n    address aTokenAddress;\r\n    //stableDebtToken address\r\n    address stableDebtTokenAddress;\r\n    //variableDebtToken address\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the current treasury balance, scaled\r\n    uint128 accruedToTreasury;\r\n    //the outstanding unbacked aTokens minted through the bridging feature\r\n    uint128 unbacked;\r\n    //the outstanding debt borrowed against this asset in isolation mode\r\n    uint128 isolationModeTotalDebt;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60: asset is paused\r\n    //bit 61: borrowing in isolation mode is enabled\r\n    //bit 62-63: reserved\r\n    //bit 64-79: reserve factor\r\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\r\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\r\n    //bit 152-167 liquidation protocol fee\r\n    //bit 168-175 eMode category\r\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\r\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\r\n    //bit 252-255 unused\r\n\r\n    uint256 data;\r\n  }\r\n}\r\n"
    },
    "contracts/mwi/deps/Aave3Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/DataTypes.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IERC20UpgradeableEx is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract Aave3Vault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n\n    IUniRouter public constant JoeRouter = IUniRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        IAToken _aToken,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableEx(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        token.approve(address(aPool), type(uint).max);\n        aToken.approve(address(aPool), type(uint).max);\n        WAVAX.approve(address(JoeRouter), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        uint _totalSupply = totalSupply();\n        uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        uint available = token.balanceOf(address(this));\n        if(available < _amountToWithdraw) {\n            aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n        }\n        _burn(msg.sender, _shares);\n\n        token.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        uint stakedTokens = aToken.balanceOf(address(this));\n        if(stakedTokens > 0 ) {\n            aPool.withdraw(address(token), stakedTokens, address(this));\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() private {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.claimAllRewardsToSelf(assets);\n\n        uint rewardsCount = rewards.length;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint amount = amounts[i];\n            if (0 < amount && reward != address(WAVAX)) {\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, amount);\n            }\n        }\n\n        uint AVAXAmt = WAVAX.balanceOf(address(this));\n        if(AVAXAmt > 0) {\n            uint fee = AVAXAmt * yieldFee / DENOMINATOR; //yield fee\n            WAVAX.safeTransfer(treasuryWallet, fee);\n            AVAXAmt -= fee;\n\n            if (token != WAVAX) {\n                _swap(address(WAVAX), address(token), AVAXAmt);\n            }\n            _invest();\n\n            uint AVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            emit Yield((AVAXAmt + fee) * AVAXPriceInUSD / 1e8);\n            emit YieldFee(fee * AVAXPriceInUSD / 1e8);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = JoeRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint priceInUSD = PriceLib.getAssetPrice(address(token));\n        uint _pool = getAllPool();\n        if (tokenDecimals < 18) {\n            _pool = _pool * (10 ** (18-tokenDecimals));\n        }\n        return _pool * priceInUSD / 1e8;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        uint rewardsCount = rewards.length;\n        uint pending;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n            uint numeratorDecimals = 18; // USD precision\n            uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals() // against to amounts\n                                    + 8; // against to priceInUSD\n            uint _pending = (numeratorDecimals < denominatorDecimals)\n                            ? amounts[i] * priceInUSD / (10 ** (denominatorDecimals-numeratorDecimals))\n                            : amounts[i] * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals));\n            pending += _pending;\n        }\n        return pending;\n    }\n\n    function getAPR() external view returns (uint) {\n        DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        uint rewardsCount = rewards.length;\n        uint _totalSupply = aToken.totalSupply();\n        uint TokenPriceInUSD = PriceLib.getAssetPrice(address(token));\n        uint rewardsApr;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n            uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n            uint numeratorDecimals = 18 // APR precision\n                                    + tokenDecimals; // against to totalSupply\n            uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals(); // against to emissionPerSecond\n            uint rewardApr = YEAR_IN_SEC * emissionPerSecond * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals))\n                            / (_totalSupply * TokenPriceInUSD);\n            rewardsApr += rewardApr;\n        }\n\n        return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/lci/LCIVault.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIVault is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    uint constant DENOMINATOR = 10000;\n    uint public watermark; // In USD (18 decimals)\n    uint public profitFeePerc;\n    uint public fees; // In USD (18 decimals)\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\n    event TransferredOutFees(uint fees, address token);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Low-risk Crypto Index\", \"LCI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        profitFeePerc = 2000;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n        uint amtDeposit = amount * USDTPriceInUSD / denominator; // USDT's decimals is 18\n\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\n        uint USDTAmt = _transferOutFees();\n        if (USDTAmt > 0) {\n            strategy.invest(amount);\n        }\n        adjustWatermark(amtDeposit, true);\n\n        uint _totalSupply = totalSupply();\n        uint share = _totalSupply == 0 ? amtDeposit : _totalSupply * amtDeposit / pool;\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\n        share = share * 997 / 1000;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint pool = getAllPoolInUSD();\n        uint withdrawAmt = pool * share / _totalSupply;\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\n\n        if (!paused()) {\n            strategy.withdrawPerc(sharePerc);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n            adjustWatermark(withdrawAmt, false);\n        } else {\n            uint USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n            USDT.safeTransfer(account, USDTAmt);\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n        watermark = 0;\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n            uint amtDeposit = USDTAmt * USDTPriceInUSD / denominator; // USDT's decimals is 18\n\n            strategy.invest(USDTAmt);\n            adjustWatermark(amtDeposit, true);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n    function _collectProfitAndUpdateWatermark() private {\n        uint currentWatermark = strategy.getAllPoolInUSD();\n        uint lastWatermark = watermark;\n        uint fee;\n        if (currentWatermark > lastWatermark) {\n            uint profit = currentWatermark - lastWatermark;\n            fee = profit * profitFeePerc / DENOMINATOR;\n            fees += fee;\n            watermark = currentWatermark;\n        }\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        uint lastWatermark = watermark;\n        watermark = signs == true\n                    ? watermark + amount\n                    : (watermark > amount) ? watermark - amount : 0;\n        emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        if (!paused()) {\n            uint pool = strategy.getAllPoolInUSD();\n            uint _fees = fees;\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\n            strategy.withdrawPerc(sharePerc);\n        }\n        _transferOutFees();\n    }\n\n    function _transferOutFees() private returns (uint USDTAmt) {\n        USDTAmt = USDT.balanceOf(address(this));\n        uint _fees = fees;\n        if (_fees != 0) {\n            (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n            uint FeeAmt = _fees * denominator / USDTPriceInUSD; // USDT's decimals is 18\n\n            if (FeeAmt < USDTAmt) {\n                _fees = 0;\n                USDTAmt -= FeeAmt;\n            } else {\n                _fees -= (USDTAmt * USDTPriceInUSD / denominator);\n                FeeAmt = USDTAmt;\n                USDTAmt = 0;\n            }\n            fees = _fees;\n\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\n        }\n    }\n\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\n        require(profitFeePerc < 3001, \"Profit fee cannot > 30%\");\n        profitFeePerc = _profitFeePerc;\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool;\n        if (paused()) {\n            (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n            pool = USDT.balanceOf(address(this)) * USDTPriceInUSD / denominator; // USDT's decimals is 18\n        } else {\n            pool = strategy.getAllPoolInUSD();\n        }\n        return (pool > fees ? pool - fees : 0);\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/lci/libs/Price.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\nlibrary PriceLib {\n\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n\n    /// @return the price in USD of 8 decimals in precision.\n    function getAssetPrice(address asset) internal view returns (uint) {\n        if (asset == USDT) {\n            return uint(IChainlink(0xB97Ad0E74fa7d920791E90258A6E2085088b4320).latestAnswer());\n        } else if (asset == USDC) {\n            return uint(IChainlink(0x51597f405303C4377E36123cBc172b13269EA163).latestAnswer());\n        } else if (asset == BUSD) {\n            return uint(IChainlink(0xcBb98864Ef56E9042e7d2efef76141f15731B82f).latestAnswer());\n        }\n        return 0;\n    }\n\n    function getBNBPriceInUSD() internal view returns (uint, uint) {\n        uint BNBPriceInUSD = uint(IChainlink(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE).latestAnswer()); // 8 decimals\n        return (BNBPriceInUSD, 1e8);\n    }\n\n    function getCAKEPriceInUSD() internal view returns (uint, uint) {\n        uint CAKEPriceInUSD = uint(IChainlink(0xB6064eD41d4f67e353768aA239cA86f4F73665a1).latestAnswer()); // 8 decimals\n        return (CAKEPriceInUSD, 1e8);\n    }\n\n    function getUSDTPriceInUSD() internal view returns (uint, uint) {\n        uint USDTPriceInUSD = uint(IChainlink(0xB97Ad0E74fa7d920791E90258A6E2085088b4320).latestAnswer()); // 8 decimals\n        return (USDTPriceInUSD, 1e8);\n    }\n}\n"
    },
    "contracts/lci/LCIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIStrategy is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\n\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    uint constant POOL_COUNT = 3;\n    IL2Vault public USDTUSDCVault;\n    IL2Vault public USDTBUSDVault;\n    IL2Vault public USDCBUSDVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint[] public targetPercentages;\n\n    address public vault;\n\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\n        __Ownable_init();\n\n        targetPercentages.push(6000); // 60%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n\n        USDTUSDCVault = _USDTUSDCVault;\n        USDTBUSDVault = _USDTBUSDVault;\n        USDCBUSDVault = _USDCBUSDVault;\n\n        USDT.safeApprove(address(PnckRouter), type(uint).max);\n        USDC.safeApprove(address(PnckRouter), type(uint).max);\n        BUSD.safeApprove(address(PnckRouter), type(uint).max);\n\n        USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\n        USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\n        USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\n\n        USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\n        USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\n        USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        USDTAmt = USDT.balanceOf(address(this));\n        (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + USDTAmt * USDTPriceInUSD / denominator; // USDT's decimals is 18\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        uint[] memory USDTAmts = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            USDTAmts[i] = USDTAmt * allocations[i] / totalAllocation;\n        }\n\n        if (USDTAmts[0] > 0) {\n            _investUSDTUSDC(USDTAmts[0]);\n        }\n        if (USDTAmts[1] > 0) {\n            _investUSDTBUSD(USDTAmts[1]);\n        }\n        if (USDTAmts[2] > 0) {\n            _investUSDCBUSD(USDT.balanceOf(address(this)));\n        }\n\n        emit CurrentComposition(pools[0], pools[1], pools[2]);\n        emit TargetComposition(targetPercentages[0], targetPercentages[1], targetPercentages[2]);\n    }\n\n\n    function _investUSDTUSDC(uint _usdtAmt) private {\n        uint _amt = _usdtAmt/2;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\n\n        USDTUSDCVault.deposit(lpTokens);\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDTBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\n\n        USDTBUSDVault.deposit(lpTokens);\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDCBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\n\n        USDCBUSDVault.deposit(lpTokens);\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        uint USDTAmtBefore = USDT.balanceOf(address(this));\n        _withdrawUSDTUSDC(sharePerc);\n        _withdrawUSDTBUSD(sharePerc);\n        _withdrawUSDCBUSD(sharePerc);\n        USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDT.safeTransfer(vault, USDTAmt);\n\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTUSDCVault.withdraw(amount);\n\n            uint _amt = USDTUSDC.balanceOf(address(this));\n            (uint _amtUSDT,) = _removeLiquidity(address(USDT), address(USDC), _amt);\n            uint _amtUSDC = USDC.balanceOf(address(this));\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTBUSDVault.withdraw(amount);\n\n            uint _amt = USDTBUSD.balanceOf(address(this));\n            (uint _amtUSDT,) = _removeLiquidity(address(USDT), address(BUSD), _amt);\n            uint _amtBUSD = BUSD.balanceOf(address(this));\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDCBUSDVault.withdraw(amount);\n\n            uint _amt = USDCBUSD.balanceOf(address(this));\n            _removeLiquidity(address(USDC), address(BUSD), _amt);\n            uint _amtUSDC = USDC.balanceOf(address(this));\n            uint _amtBUSD = BUSD.balanceOf(address(this));\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\n    }\n\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \n        else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\n        else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\n        USDTAmt = USDT.balanceOf(address(this));\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        _withdrawUSDTUSDC(1e18);\n        _withdrawUSDTBUSD(1e18);\n        _withdrawUSDCBUSD(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function setLPCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == DENOMINATOR, \"Invalid parameter\");\n    }\n\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\n    }\n\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](POOL_COUNT);\n        pools[0] = getUSDTUSDCPoolInUSD();\n        pools[1] = getUSDTBUSDPoolInUSD();\n        pools[2] = getUSDCBUSDPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = getEachPoolInUSD();\n        return pools[0] + pools[1] + pools[2];\n    }\n\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2];\n        percentages = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\n        }\n    }\n\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        tokens = new address[](POOL_COUNT);\n        tokens[0] = address(USDT);\n        tokens[1] = address(USDC);\n        tokens[2] = address(BUSD);\n        percentages = new uint[](POOL_COUNT);\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\n    }\n\n    function getAPR() external view returns (uint) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/lci/deps/VaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/Math.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IUniPair is IERC20Upgradeable{\n    function getReserves() external view returns (uint, uint);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n\ninterface IMasterChefV2 {\n    function poolInfo(\n        uint pid\n    ) external view returns(\n        uint accCakePerShare, uint lastRewardBlock, uint allocPoint, uint totalBoostedShare, bool isRegular\n    );\n\n    function userInfo(\n        uint pid, address user\n    ) external view returns(\n        uint amount, uint rewardDebt, uint boostMultiplier\n    );\n\n    function pendingCake(uint pid, address user) external view returns (uint);\n    function lpToken(uint pid) external view returns (address);\n    function totalRegularAllocPoint() external view returns (uint);\n    function totalSpecialAllocPoint() external view returns (uint);\n    function cakePerBlock(bool isRegular) external view returns (uint amount);\n\n    function deposit(uint pid, uint amount) external;\n    function withdraw(uint pid, uint amount) external;\n}\n\ncontract BscVaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    using SafeERC20Upgradeable for IUniPair;\n\n    IERC20Upgradeable public constant CAKE  = IERC20Upgradeable(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\n    IERC20Upgradeable public constant WBNB = IERC20Upgradeable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\n\n    IUniRouter public constant PckRouter = IUniRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IMasterChefV2 public constant MasterChefV2 = IMasterChefV2(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    uint public pid;\n    IUniPair public lpToken;\n    IERC20Upgradeable public token0;\n    IERC20Upgradeable public token1;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n    uint constant BSC_BLOCK_TIME = 3;\n    uint constant BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365; // 10512000\n\n    uint public lpRewardApr;\n    uint public lpReservePerShare;\n    uint public lpDataLastUpdate;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        uint _pid,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        pid = _pid;\n\n        // address _lpToken = MasterChefV2.lpToken(_pid);\n\n        // lpToken = IUniPair(_lpToken);\n        // token0 = IERC20Upgradeable(lpToken.token0());\n        // token1 = IERC20Upgradeable(lpToken.token1());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        // lpToken.safeApprove(address(MasterChefV2), type(uint).max);\n        // CAKE.safeApprove(address(PckRouter), type(uint).max);\n        // token0.approve(address(PckRouter), type(uint).max);\n        // token1.approve(address(PckRouter), type(uint).max);\n\n        _updateLpRewardApr();\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        // require(_amount > 0, \"Invalid amount\");\n\n        // depositedBlock[msg.sender] = block.number;\n        // lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // uint _pool = getAllPool();\n        // MasterChefV2.deposit(pid, _amount);\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        // uint lpTokenAvailable = lpToken.balanceOf(address(this));\n        // if(lpTokenAvailable < _amountToWithdraw) {\n        //     MasterChefV2.withdraw(pid, _amountToWithdraw - lpTokenAvailable );\n        // }\n        // _burn(msg.sender, _shares);\n\n        // lpToken.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = lpToken.balanceOf(address(this));\n        if(available > 0) {\n            MasterChefV2.deposit(pid, available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        // if(stakedTokens > 0 ) {\n        //     MasterChefV2.withdraw(pid, stakedTokens);\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < DENOMINATOR, \"yieldFeePerc invalid\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        // _yield();\n        _updateLpRewardApr();\n    }\n\n    function _yield() private {\n        uint cakeBalance = CAKE.balanceOf(address(this));\n        \n        if(cakeBalance > 0) {\n            uint fee = cakeBalance * yieldFee / DENOMINATOR; //yield fee\n            CAKE.safeTransfer(treasuryWallet, fee);\n            cakeBalance -= fee;\n\n            uint _token0Amount = token0 == CAKE ? cakeBalance /2 : _swap(address(CAKE), address(token0), cakeBalance/2)[1];\n            uint _token1Amount = token1 == CAKE ? cakeBalance /2 :  _swap(address(CAKE), address(token1), cakeBalance/2)[1];\n\n            PckRouter.addLiquidity(address(token0), address(token1), _token0Amount, _token1Amount, 0, 0, address(this), block.timestamp);\n\n            _invest();\n\n            (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n            emit Yield((cakeBalance + fee) * CAKEPriceInUSD / denominator);\n            emit YieldFee(fee * CAKEPriceInUSD / denominator);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = PckRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        // (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        // return lpToken.balanceOf(address(this)) + stakedTokens;\n        return 0;\n    }\n\n    function getAllPoolInBNB() public view returns (uint _valueInBNB) {\n        // return _getValueInBNB(getAllPool());\n        return 0;\n    }\n\n    function _getValueInBNB(uint lpAmt) public view returns (uint _valueInBNB) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n        \n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n        \n        _valueInBNB = (_total0 * _getPriceInBNB(address(token0))) + \n        (_total1 * _getPriceInBNB(address(token1))) ;\n\n        _valueInBNB = _valueInBNB / 1e18;\n    }\n\n    function _getPriceInBNB(address _token) private view returns (uint) {\n        if(_token == address(WBNB)) {\n            return 1e18;\n        } else {\n            address[] memory path = new address[](2);\n\n            path[0] = _token;\n            path[1] = address(WBNB);\n            return PckRouter.getAmountsOut(1e18, path)[1];\n        }\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // (uint BNBPriceInUSD, uint denominator) = PriceLib.getBNBPriceInUSD();\n        // return getAllPoolInBNB() * BNBPriceInUSD / denominator;\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    ///@notice Returns the pending rewards in UDS.\n    function getPendingRewards() public view returns (uint) {\n        // uint pendingCake = MasterChefV2.pendingCake(pid, address(this));\n        // (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n        // return pendingCake * CAKEPriceInUSD / denominator;\n        return 10e18;\n    }\n\n    function getAPR() external view returns (uint) {\n        (uint _lpRewardApr,,) = getLpRewardApr();\n        uint _farmRewardApr = getCakeRewardApr();\n        _farmRewardApr = _farmRewardApr * (DENOMINATOR-yieldFee) / DENOMINATOR;\n        return (_lpRewardApr + _farmRewardApr);\n    }\n\n    function resetLpRewardApr() external onlyOwner {\n        lpRewardApr = 0;\n        lpReservePerShare = 0;\n        lpDataLastUpdate = 0;\n        _updateLpRewardApr();\n    }\n\n    function _updateLpRewardApr() private {\n        (uint _lpRewardApr, uint _lpReservePerShare, bool _update) = getLpRewardApr();\n        if (_update) {\n            lpRewardApr = _lpRewardApr;\n            lpReservePerShare = _lpReservePerShare;\n            lpDataLastUpdate = block.timestamp;\n        }\n    }\n\n    function _getLpReservePerShare() private view returns (uint) {\n        uint _totalSupply = lpToken.totalSupply();\n        if (_totalSupply == 0) return 0;\n        (uint reserve0, uint reserve1) = lpToken.getReserves();\n        return Math.sqrt(reserve0 * reserve1) *1e18 / _totalSupply;\n    }\n\n    function getLpRewardApr() public view returns (uint, uint, bool) {\n        // if (lpRewardApr == 0 || (lpDataLastUpdate+DAY_IN_SEC) <= block.timestamp) {\n        //     uint _lpReservePerShare = _getLpReservePerShare();\n        //     if (0 < lpReservePerShare && lpReservePerShare < _lpReservePerShare) {\n        //         uint _lpRewardApr = (_lpReservePerShare-lpReservePerShare) * YEAR_IN_SEC * 1e18 / (lpReservePerShare * (block.timestamp-lpDataLastUpdate));\n        //         return (_lpRewardApr, _lpReservePerShare, true);\n        //     } else {\n        //         return (0, _lpReservePerShare, true);\n        //     }\n        // } else {\n        //     return (lpRewardApr, lpReservePerShare, false);\n        // }\n        return (0, 0, false);\n    }\n\n    function getCakeRewardApr() public view returns (uint) {\n        // uint yearlyCakeReward = _getYearlyCakeReward();\n        // (uint CAKEPriceInUSD, uint cakeDenominator) = PriceLib.getCAKEPriceInUSD();\n        // uint yearlyRewardInUSD = yearlyCakeReward * CAKEPriceInUSD / cakeDenominator;\n\n        // uint poolInBNB = _getValueInBNB(lpToken.balanceOf(address(MasterChefV2)));\n        // (uint BNBPriceInUSD, uint bnbDenominator) = PriceLib.getBNBPriceInUSD();\n        // uint poolInUSD = poolInBNB * BNBPriceInUSD / bnbDenominator;\n\n        // return yearlyRewardInUSD * 1e18 / poolInUSD;\n        return 7e15;\n    }\n\n    function _getYearlyCakeReward() private view returns (uint) {\n        (,, uint allocPoint, , bool isRegular) = MasterChefV2.poolInfo(pid);\n        uint totalAllocPoint = isRegular ? MasterChefV2.totalRegularAllocPoint() : MasterChefV2.totalSpecialAllocPoint();\n        uint cakePerBlock = MasterChefV2.cakePerBlock(isRegular);\n        return cakePerBlock * BLOCKS_PER_YEAR * allocPoint / totalAllocPoint;\n    }\n\n}\n"
    },
    "contracts/lci/libs/Math.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/lci/deps/PckFarm2Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/Math.sol\";\nimport \"../libs/Price.sol\";\nimport \"../../../interfaces/IUniPair.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IMasterChefV2 {\n    function poolInfo(\n        uint pid\n    ) external view returns(\n        uint accCakePerShare, uint lastRewardBlock, uint allocPoint, uint totalBoostedShare, bool isRegular\n    );\n\n    function userInfo(\n        uint pid, address user\n    ) external view returns(\n        uint amount, uint rewardDebt, uint boostMultiplier\n    );\n\n    function pendingCake(uint pid, address user) external view returns (uint);\n    function lpToken(uint pid) external view returns (address);\n    function totalRegularAllocPoint() external view returns (uint);\n    function totalSpecialAllocPoint() external view returns (uint);\n    function cakePerBlock(bool isRegular) external view returns (uint amount);\n\n    function deposit(uint pid, uint amount) external;\n    function withdraw(uint pid, uint amount) external;\n}\n\ncontract PckFarm2Vault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    using SafeERC20Upgradeable for IUniPair;\n\n    IERC20Upgradeable public constant CAKE  = IERC20Upgradeable(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\n    IERC20Upgradeable public constant WBNB = IERC20Upgradeable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\n\n    IUniRouter public constant PckRouter = IUniRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IMasterChefV2 public constant MasterChefV2 = IMasterChefV2(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    uint public pid;\n    IUniPair public lpToken;\n    IERC20Upgradeable public token0;\n    IERC20Upgradeable public token1;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n    uint constant BSC_BLOCK_TIME = 3;\n    uint constant BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365; // 10512000\n\n    uint public lpRewardApr;\n    uint public lpReservePerShare;\n    uint public lpDataLastUpdate;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        uint _pid,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        pid = _pid;\n\n        address _lpToken = MasterChefV2.lpToken(_pid);\n\n        lpToken = IUniPair(_lpToken);\n        token0 = IERC20Upgradeable(lpToken.token0());\n        token1 = IERC20Upgradeable(lpToken.token1());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        lpToken.safeApprove(address(MasterChefV2), type(uint).max);\n        CAKE.safeApprove(address(PckRouter), type(uint).max);\n        token0.approve(address(PckRouter), type(uint).max);\n        token1.approve(address(PckRouter), type(uint).max);\n\n        _updateLpRewardApr();\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        MasterChefV2.deposit(pid, _amount);\n\n        uint _totalSupply = totalSupply();\n        uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        uint lpTokenAvailable = lpToken.balanceOf(address(this));\n        if(lpTokenAvailable < _amountToWithdraw) {\n            MasterChefV2.withdraw(pid, _amountToWithdraw - lpTokenAvailable );\n        }\n        _burn(msg.sender, _shares);\n\n        lpToken.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = lpToken.balanceOf(address(this));\n        if(available > 0) {\n            MasterChefV2.deposit(pid, available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        if(stakedTokens > 0 ) {\n            MasterChefV2.withdraw(pid, stakedTokens);\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n        _updateLpRewardApr();\n    }\n\n    function _yield() private {\n        MasterChefV2.deposit(pid, 0);\n        uint cakeBalance = CAKE.balanceOf(address(this));\n        \n        if(cakeBalance > 0) {\n            uint fee = cakeBalance * yieldFee / DENOMINATOR; //yield fee\n            CAKE.safeTransfer(treasuryWallet, fee);\n            cakeBalance -= fee;\n\n            uint _token0Amount;\n            if (token0 == CAKE) {\n                _token0Amount = cakeBalance /2;\n            } else {\n                _swap(address(CAKE), address(token0), cakeBalance/2);\n                _token0Amount = token0.balanceOf(address(this));\n            }\n\n            uint _token1Amount;\n            if (token1 == CAKE) {\n                _token1Amount = cakeBalance /2;\n            } else {\n                _swap(address(CAKE), address(token1), cakeBalance/2);\n                _token1Amount = token1.balanceOf(address(this));\n            }\n\n            PckRouter.addLiquidity(address(token0), address(token1), _token0Amount, _token1Amount, 0, 0, address(this), block.timestamp);\n\n            _invest();\n\n            (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n            emit Yield((cakeBalance + fee) * CAKEPriceInUSD / denominator);\n            emit YieldFee(fee * CAKEPriceInUSD / denominator);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = PckRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        return lpToken.balanceOf(address(this)) + stakedTokens;\n    }\n\n    function getAllPoolInBNB() public view returns (uint _valueInBNB) {\n        return _getValueInBNB(getAllPool());\n    }\n\n    function _getValueInBNB(uint lpAmt) public view returns (uint _valueInBNB) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n        \n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n        \n        _valueInBNB = (_total0 * _getPriceInBNB(address(token0))) + \n        (_total1 * _getPriceInBNB(address(token1))) ;\n\n        _valueInBNB = _valueInBNB / 1e18;\n    }\n\n    function _getPriceInBNB(address _token) private view returns (uint) {\n        if(_token == address(WBNB)) {\n            return 1e18;\n        } else {\n            address[] memory path = new address[](2);\n\n            path[0] = _token;\n            path[1] = address(WBNB);\n            return PckRouter.getAmountsOut(1e18, path)[1];\n        }\n    }\n\n    function _getValueInUSD(uint lpAmt) public view returns (uint _valueInUSD, bool valid) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n\n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n\n        uint _price0 = PriceLib.getAssetPrice(address(token0));\n        uint _price1 = PriceLib.getAssetPrice(address(token1));\n        if (_price0 == 0 || _price1 == 0) {\n            return (0, false);\n        }\n\n        _valueInUSD = ((_total0 * _price0) + (_total1 * _price1)) / 1e8;\n        valid = true;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        (uint poolInUSD, bool valid) = _getValueInUSD(getAllPool());\n        if (valid) {\n            return poolInUSD;\n        } else {\n            (uint BNBPriceInUSD, uint denominator) = PriceLib.getBNBPriceInUSD();\n            return getAllPoolInBNB() * BNBPriceInUSD / denominator;\n        }\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    ///@notice Returns the pending rewards in UDS.\n    function getPendingRewards() public view returns (uint) {\n        uint pendingCake = MasterChefV2.pendingCake(pid, address(this));\n        (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n        return pendingCake * CAKEPriceInUSD / denominator;\n    }\n\n    function getAPR() external view returns (uint) {\n        (uint _lpRewardApr,,) = getLpRewardApr();\n        uint _farmRewardApr = getCakeRewardApr();\n        _farmRewardApr = _farmRewardApr * (DENOMINATOR-yieldFee) / DENOMINATOR;\n        return (_lpRewardApr + _farmRewardApr);\n    }\n\n    function resetLpRewardApr() external onlyOwner {\n        lpRewardApr = 0;\n        lpReservePerShare = 0;\n        lpDataLastUpdate = 0;\n        _updateLpRewardApr();\n    }\n\n    function _updateLpRewardApr() private {\n        (uint _lpRewardApr, uint _lpReservePerShare, bool _update) = getLpRewardApr();\n        if (_update) {\n            lpRewardApr = _lpRewardApr;\n            lpReservePerShare = _lpReservePerShare;\n            lpDataLastUpdate = block.timestamp;\n        }\n    }\n\n    function _getLpReservePerShare() private view returns (uint) {\n        uint _totalSupply = lpToken.totalSupply();\n        if (_totalSupply == 0) return 0;\n        (uint reserve0, uint reserve1) = lpToken.getReserves();\n        return Math.sqrt(reserve0 * reserve1) * 1e18 / _totalSupply;\n    }\n\n    function getLpRewardApr() public view returns (uint, uint, bool) {\n        if (lpRewardApr == 0 || (lpDataLastUpdate+DAY_IN_SEC) <= block.timestamp) {\n            uint _lpReservePerShare = _getLpReservePerShare();\n            if (0 < lpReservePerShare && lpReservePerShare < _lpReservePerShare) {\n                uint _lpRewardApr = (_lpReservePerShare-lpReservePerShare) * YEAR_IN_SEC * 1e18 / (lpReservePerShare * (block.timestamp-lpDataLastUpdate));\n                return (_lpRewardApr, _lpReservePerShare, true);\n            } else {\n                return (0, _lpReservePerShare, true);\n            }\n        } else {\n            return (lpRewardApr, lpReservePerShare, false);\n        }\n    }\n\n    function getCakeRewardApr() public view returns (uint) {\n        uint yearlyCakeReward = _getYearlyCakeReward();\n        (uint CAKEPriceInUSD, uint cakeDenominator) = PriceLib.getCAKEPriceInUSD();\n        uint yearlyRewardInUSD = yearlyCakeReward * CAKEPriceInUSD / cakeDenominator;\n\n        uint poolInBNB = _getValueInBNB(lpToken.balanceOf(address(MasterChefV2)));\n        (uint BNBPriceInUSD, uint bnbDenominator) = PriceLib.getBNBPriceInUSD();\n        uint poolInUSD = poolInBNB * BNBPriceInUSD / bnbDenominator;\n\n        return yearlyRewardInUSD * 1e18 / poolInUSD;\n    }\n\n    function _getYearlyCakeReward() private view returns (uint) {\n        (,, uint allocPoint, , bool isRegular) = MasterChefV2.poolInfo(pid);\n        uint totalAllocPoint = isRegular ? MasterChefV2.totalRegularAllocPoint() : MasterChefV2.totalSpecialAllocPoint();\n        uint cakePerBlock = MasterChefV2.cakePerBlock(isRegular);\n        return cakePerBlock * BLOCKS_PER_YEAR * allocPoint / totalAllocPoint;\n    }\n\n}\n"
    },
    "interfaces/IUniPair.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IUniPair is IERC20Upgradeable{\r\n    function getReserves() external view returns (uint, uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n"
    },
    "contracts/l2Vaults/compound/BasicCompoundVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface ICToken is IERC20Upgradeable {\n    function comptroller() external view returns (address);\n    function underlying() external view returns (address);\n    function exchangeRateStored() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n}\n\ninterface IComptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cToken) external returns (uint);\n}\n\ncontract BasicCompoundVaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    ICToken public cToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IComptroller public comptroller;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    uint constant MANTISSA_ONE = 1e18;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        ICToken _cToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        cToken = _cToken;\n\n        // token = IERC20Upgradeable(_cToken.underlying());\n        // tokenDecimals = IERC20UpgradeableExt(address(_cToken)).decimals();\n        // comptroller = IComptroller(_cToken.comptroller());\n        \n        // address[] memory cTokens = new address[](1);\n        // cTokens[0] = address(_cToken);\n        // comptroller.enterMarkets(cTokens);\n        // token.approve(address(_cToken), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        // require(_amount > 0, \"Invalid amount\");\n\n        // uint _pool = getAllPool();\n        // token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // depositedBlock[msg.sender] = block.number;\n\n        // cToken.mint(token.balanceOf(address(this)));\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _pool = getAllPool();\n        // uint _amountToWithdraw = _pool * _shares / totalSupply(); \n\n        // uint available = token.balanceOf(address(this));\n        // if(available < _amountToWithdraw) {\n        //     cToken.redeem(cToken.balanceOf(address(this)) * (_amountToWithdraw - available) / (_pool - available));\n        //     _amountToWithdraw = token.balanceOf(address(this));\n        // }\n        // _burn(msg.sender, _shares);\n\n        // token.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            cToken.mint(available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // uint stakedTokens = cToken.balanceOf(address(this));\n        // if(stakedTokens > 0 ) {\n        //     cToken.redeem(stakedTokens);\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint) {\n        uint rate = cToken.exchangeRateStored();\n        uint underlyingAmount = (cToken.balanceOf(address(this)) * rate) / MANTISSA_ONE;\n        return token.balanceOf(address(this)) + underlyingAmount;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint _pool = getAllPool();\n        // return getValueInUSD(address(token), _pool);\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view virtual returns (uint) {\n        return 0;\n    }\n\n    function getBlocksPerYear() public view virtual returns (uint) {\n        return 0;\n    }\n\n    ///@dev It's scaled by 1e18\n    function getAPR() public view virtual returns (uint) {\n        // return cToken.supplyRatePerBlock() * getBlocksPerYear();\n        return 8e15;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[41] private __gap;\n}\n"
    },
    "contracts/bni/priceOracle/IPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\ninterface IPriceOracle {\r\n\r\n    /**\r\n     * @notice Sets or replaces price sources of assets\r\n     * @param assets The addresses of the assets\r\n     * @param sources The addresses of the price sources\r\n     */\r\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the source for an asset address\r\n     * @param asset The address of the asset\r\n     * @return The address of the source\r\n     */\r\n    function getSourceOfAsset(address asset) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns a list of prices from a list of assets addresses\r\n     * @param assets The list of assets addresses\r\n     * @return prices The prices of the given assets\r\n     */\r\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\r\n\r\n    /**\r\n     * @notice Returns a list of prices from a list of assets addresses\r\n     * @param asset The asset address\r\n     * @return price The prices of the given assets\r\n     */\r\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\r\n}"
    },
    "interfaces/IERC20UpgradeableExt.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "libs/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nlibrary Token {\r\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\r\n        if (curDecimals < newDecimals) {\r\n            return amount * (10 ** (newDecimals - curDecimals));\r\n        } else {\r\n            return amount / (10 ** (curDecimals - newDecimals));\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/l2Vaults/compound/BasicCompoundVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface ICToken is IERC20Upgradeable {\n    function comptroller() external view returns (address);\n    function underlying() external view returns (address);\n    function exchangeRateStored() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n}\n\ninterface IComptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cToken) external returns (uint);\n}\n\ncontract BasicCompoundVault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    ICToken public cToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IComptroller public comptroller;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    uint constant MANTISSA_ONE = 1e18;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        ICToken _cToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        cToken = _cToken;\n\n        token = IERC20Upgradeable(_cToken.underlying());\n        tokenDecimals = IERC20UpgradeableExt(address(_cToken)).decimals();\n        comptroller = IComptroller(_cToken.comptroller());\n        \n        address[] memory cTokens = new address[](1);\n        cTokens[0] = address(_cToken);\n        comptroller.enterMarkets(cTokens);\n        token.approve(address(_cToken), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        cToken.mint(token.balanceOf(address(this)));\n\n        uint _totalSupply = totalSupply();\n        uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _pool = getAllPool();\n        uint _amountToWithdraw = _pool * _shares / totalSupply(); \n\n        uint available = token.balanceOf(address(this));\n        if(available < _amountToWithdraw) {\n            cToken.redeem(cToken.balanceOf(address(this)) * (_amountToWithdraw - available) / (_pool - available));\n            _amountToWithdraw = token.balanceOf(address(this));\n        }\n        _burn(msg.sender, _shares);\n\n        token.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            cToken.mint(available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        uint stakedTokens = cToken.balanceOf(address(this));\n        if(stakedTokens > 0 ) {\n            cToken.redeem(stakedTokens);\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint) {\n        uint rate = cToken.exchangeRateStored();\n        uint underlyingAmount = (cToken.balanceOf(address(this)) * rate) / MANTISSA_ONE;\n        return token.balanceOf(address(this)) + underlyingAmount;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint _pool = getAllPool();\n        return getValueInUSD(address(token), _pool);\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view virtual returns (uint) {\n        return 0;\n    }\n\n    function getBlocksPerYear() public view virtual returns (uint) {\n        return 0;\n    }\n\n    ///@dev It's scaled by 1e18\n    function getAPR() public view virtual returns (uint) {\n        return cToken.supplyRatePerBlock() * getBlocksPerYear();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[41] private __gap;\n}\n"
    },
    "contracts/l2Vaults/compound/AuroraBastionVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./BasicCompoundVault.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IUniRouter.sol\";\n\ninterface IBastionComptroller {\n    function rewardDistributor() external view returns (address);\n}\n\nstruct RewardMarketState {\n    /// @notice The market's last updated borrowIndex or supplyIndex\n    uint224 index;\n    /// @notice The timestamp number the index was last updated at\n    uint32 timestamp;\n}\n\ninterface IRewardDistributor {\n    function getRewardAddress(uint rewardType) external view returns (address);\n    function rewardSupplySpeeds(uint8 rewardType, address cToken) external view returns (uint);\n    function rewardSupplyState(uint8 rewardType,  address cToken) external view returns (RewardMarketState memory);\n    function rewardSupplierIndex(uint8 rewardType, address cToken, address supplier) external view returns(uint);\n    function rewardAccrued(uint8 rewardType, address supplyer) external view returns(uint);\n\n    function claimReward(uint8 rewardType, address holder, address[] memory cTokens) external;\n}\n\ncontract AuroraBastionVault is BasicCompoundVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WNEAR = IERC20Upgradeable(0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d);\n\n    IUniRouter public constant Router = IUniRouter(0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B); // Trisolaris\n\n    uint constant REWARD_COUNT = 2;\n    uint constant doubleScale = 1e36;\n    uint constant rewardInitialIndex = 1e36;\n    IRewardDistributor public rewardDistributor;\n\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        ICToken _cToken\n    ) public virtual override initializer {\n        super.initialize(_name, _symbol, _treasury, _admin, _priceOracle, _cToken);\n\n        _updateRewardDistributor();\n    }\n\n    function _updateRewardDistributor() private {\n        rewardDistributor = IRewardDistributor(IBastionComptroller(address(comptroller)).rewardDistributor());\n        // It needs to approve router for reward token\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            address reward = rewardDistributor.getRewardAddress(rewardType);\n            IERC20Upgradeable(reward).safeApprove(address(Router), type(uint).max);\n        }\n    }\n    function updateRewardDistributor() external onlyOwner {\n        _updateRewardDistributor();\n    }\n\n    function _yield() internal override {\n        address[] memory cTokens = new address[](1);\n        cTokens[0] = address(cToken);\n\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            rewardDistributor.claimReward(rewardType, address(this), cTokens);\n            address reward = rewardDistributor.getRewardAddress(rewardType);\n            uint amount = IERC20Upgradeable(reward).balanceOf(address(this));\n            if (0 < amount) {\n                uint fee = amount * yieldFee / DENOMINATOR; //yield fee\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, fee);\n                amount -= fee;\n\n                if (address(token) != reward) {\n                    if (token == WNEAR || reward == address(WNEAR)) {\n                        _swap(reward, address(token), amount);\n                    } else {\n                        _swap2(reward, address(token), amount);\n                    }\n                }\n                uint rewardInUSD = getValueInUSD(reward, amount+fee);\n                emit Yield(rewardInUSD);\n                emit YieldFee(rewardInUSD * yieldFee / DENOMINATOR);\n            }\n        }\n\n        _invest();\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](2);\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](3);\n        path[0] = address(_tokenA);\n        path[1] = address(WNEAR);\n        path[2] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[2];\n    }\n\n    function getPendingRewards() public view override returns (uint) {\n        uint pending;\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            uint amount = _getPendingRewardAmount(rewardType);\n            if (amount > 0) {\n                address reward = rewardDistributor.getRewardAddress(rewardType);\n                pending += getValueInUSD(reward, amount);\n            }\n        }\n        return pending;\n    }\n\n    function _getPendingRewardAmount(uint8 rewardType) private view returns (uint supplierAccrued) {\n        RewardMarketState memory supplyState = rewardDistributor.rewardSupplyState(rewardType, address(cToken));\n        uint supplySpeed = rewardDistributor.rewardSupplySpeeds(rewardType, address(cToken));\n        uint256 deltaTimestamps = block.timestamp - uint(supplyState.timestamp);\n        if (deltaTimestamps > 0 && supplySpeed > 0) {\n            uint supplyTokens = cToken.totalSupply();\n            uint _rewardAccrued = deltaTimestamps * supplySpeed;\n            uint ratio = supplyTokens > 0\n                ? _rewardAccrued * doubleScale / supplyTokens\n                : 0;\n            uint supplyIndex = uint(supplyState.index) + ratio;\n            uint supplierIndex = rewardDistributor.rewardSupplierIndex(rewardType, address(cToken), address(this));\n            if (supplierIndex == 0 && supplyIndex > 0) {\n                supplierIndex = rewardInitialIndex;\n            }\n            uint deltaIndex = supplyIndex - supplierIndex;\n            uint supplierDelta = cToken.balanceOf(address(this)) * deltaIndex / doubleScale;\n            supplierAccrued = rewardDistributor.rewardAccrued(rewardType, address(this)) + supplierDelta;\n        }\n    }\n\n    function getBlocksPerYear() public view override returns (uint) {\n        return 28_908_000; //55 * 60 * 24 * 365;\n    }\n\n    function getAPR() public view virtual override returns (uint) {\n        uint rewardsPerYear;\n        for (uint rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            uint supplySpeed = rewardDistributor.rewardSupplySpeeds(uint8(rewardType), address(cToken));\n            if (supplySpeed > 0) {\n                address reward = rewardDistributor.getRewardAddress(rewardType);\n                rewardsPerYear += getValueInUSD(reward, supplySpeed * YEAR_IN_SEC);\n            }\n        }\n        if (rewardsPerYear > 0) {\n            uint underlyingSupply = (cToken.totalSupply() * cToken.exchangeRateStored()) / MANTISSA_ONE;\n            uint rewardsApr = rewardsPerYear * 1e18 / getValueInUSD(address(token), underlyingSupply);\n            return super.getAPR() + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n        } else {\n            return super.getAPR();\n        }\n    }\n}\n"
    },
    "interfaces/IUniRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\ninterface IUniRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/l2Vaults/aave3/MaticAave3Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./BasicAave3Vault.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IUniRouter.sol\";\n\ncontract MaticAave3Vault is BasicAave3Vault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WMATIC = IERC20Upgradeable(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\n\n    IUniRouter public constant Router = IUniRouter(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\n\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        IAToken _aToken\n    ) public virtual override initializer {\n        super.initialize(_name, _symbol, _treasury, _admin, _priceOracle, _aToken);\n\n        // It needs to approve router for reward token\n    }\n\n    function _yield() internal override {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.claimAllRewardsToSelf(assets);\n\n        uint rewardsCount = rewards.length;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint amount = amounts[i];\n            if (0 < amount) {\n                uint fee = amount * yieldFee / DENOMINATOR; //yield fee\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, fee);\n                amount -= fee;\n\n                // It needs to approve router for reward token\n                if (IERC20Upgradeable(reward).allowance(address(this), address(Router)) < amount) {\n                    IERC20Upgradeable(reward).safeApprove(address(Router), type(uint).max);\n                }\n\n                if (address(token) != reward) {\n                    if (token == WMATIC || reward == address(WMATIC)) {\n                        _swap(reward, address(token), amount);\n                    } else {\n                        _swap2(reward, address(token), amount);\n                    }\n                }\n                uint rewardInUSD = getValueInUSD(reward, amount+fee);\n                emit Yield(rewardInUSD);\n                emit YieldFee(rewardInUSD * yieldFee / DENOMINATOR);\n            }\n        }\n\n        _invest();\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](2);\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](3);\n        path[0] = address(_tokenA);\n        path[1] = address(WMATIC);\n        path[2] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[2];\n    }\n}\n"
    },
    "contracts/l2Vaults/aave3/BasicAave3Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./Aave3DataTypes.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (Aave3DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract BasicAave3Vault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        IAToken _aToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableExt(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        token.approve(address(aPool), type(uint).max);\n        aToken.approve(address(aPool), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        uint _totalSupply = totalSupply();\n        uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        uint available = token.balanceOf(address(this));\n        if(available < _amountToWithdraw) {\n            aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n            _amountToWithdraw = token.balanceOf(address(this));\n        }\n        _burn(msg.sender, _shares);\n\n        token.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        uint stakedTokens = aToken.balanceOf(address(this));\n        if(stakedTokens > 0 ) {\n            aPool.withdraw(address(token), stakedTokens, address(this));\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint _pool = getAllPool();\n        return getValueInUSD(address(token), _pool);\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        uint rewardsCount = rewards.length;\n        uint pending;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            pending += getValueInUSD(rewards[i], amounts[i]);\n        }\n        return pending;\n    }\n\n    function getAPR() external view returns (uint) {\n        Aave3DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        uint rewardsCount = rewards.length;\n        uint aTokenInUSD = getValueInUSD(address(token), aToken.totalSupply());\n        uint rewardsApr;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n            rewardsApr += getValueInUSD(reward, YEAR_IN_SEC * emissionPerSecond) * 1e18 / aTokenInUSD;\n        }\n\n        return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[40] private __gap;\n}\n"
    },
    "contracts/l2Vaults/aave3/Aave3DataTypes.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\nlibrary Aave3DataTypes {\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    //timestamp of last update\r\n    uint40 lastUpdateTimestamp;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint16 id;\r\n    //aToken address\r\n    address aTokenAddress;\r\n    //stableDebtToken address\r\n    address stableDebtTokenAddress;\r\n    //variableDebtToken address\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the current treasury balance, scaled\r\n    uint128 accruedToTreasury;\r\n    //the outstanding unbacked aTokens minted through the bridging feature\r\n    uint128 unbacked;\r\n    //the outstanding debt borrowed against this asset in isolation mode\r\n    uint128 isolationModeTotalDebt;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60: asset is paused\r\n    //bit 61: borrowing in isolation mode is enabled\r\n    //bit 62-63: reserved\r\n    //bit 64-79: reserve factor\r\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\r\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\r\n    //bit 152-167 liquidation protocol fee\r\n    //bit 168-175 eMode category\r\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\r\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\r\n    //bit 252-255 unused\r\n\r\n    uint256 data;\r\n  }\r\n}\r\n"
    },
    "contracts/l2Vaults/aave3/BasicAave3VaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./Aave3DataTypes.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (Aave3DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract BasicAave3VaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        IAToken _aToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableExt(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        // token.approve(address(aPool), type(uint).max);\n        // aToken.approve(address(aPool), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        // require(_amount > 0, \"Invalid amount\");\n\n        // uint _pool = getAllPool();\n        // token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // depositedBlock[msg.sender] = block.number;\n\n        // // aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        // uint available = token.balanceOf(address(this));\n        // if(available < _amountToWithdraw) {\n        //     aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n        //     _amountToWithdraw = token.balanceOf(address(this));\n        // }\n        // _burn(msg.sender, _shares);\n\n        // token.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // uint stakedTokens = aToken.balanceOf(address(this));\n        // if(stakedTokens > 0 ) {\n        //     aPool.withdraw(address(token), stakedTokens, address(this));\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint _pool = getAllPool();\n        // return getValueInUSD(address(token), _pool);\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        // address[] memory assets = new address[](1);\n        // assets[0] = address(aToken);\n        // (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        // uint rewardsCount = rewards.length;\n        // uint pending;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     pending += getValueInUSD(rewards[i], amounts[i]);\n        // }\n        // return pending;\n        return 10e18;\n    }\n\n    function getAPR() external view returns (uint) {\n        // Aave3DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        // uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        // address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        // uint rewardsCount = rewards.length;\n        // uint aTokenInUSD = getValueInUSD(address(token), aToken.totalSupply());\n        // uint rewardsApr;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     address reward = rewards[i];\n        //     (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n        //     rewardsApr += getValueInUSD(reward, YEAR_IN_SEC * emissionPerSecond) * 1e18 / aTokenInUSD;\n        // }\n\n        // return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n        return 8e15;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[40] private __gap;\n}\n"
    },
    "contracts/bni/strategy/BNIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../priceOracle/IPriceOracle.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ncontract BNIStrategyTest is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IRouter public router;\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    uint constant DENOMINATOR = 10000;\n\n    address public treasuryWallet;\n    address public admin;\n    address public vault;\n    IPriceOracle public priceOracle;\n\n    address[] public tokens;\n    mapping(address => uint) public pid; // Pool indices in tokens array\n\n    event AddToken(address token, uint pid);\n    event RemoveToken(address token, uint pid);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _priceOracle,\n        address _router, address _SWAP_BASE_TOKEN,\n        address _USDT, address _token0\n    ) external initializer {\n        require(_router != address(0), \"Invalid router\");\n        require(_SWAP_BASE_TOKEN != address(0), \"Invalid SWAP_BASE_TOKEN\");\n        require(_USDT != address(0), \"Invalid USDT\");\n        require(_token0 != address(0), \"Invalid token0\");\n        __Ownable_init();\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n        router = IRouter(_router);\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        tokens.push(_token0);\n        updatePid();\n\n        // USDT.safeApprove(address(router), type(uint).max);\n        // IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\n    }\n\n    function updatePid() internal {\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            pid[_tokens[i]] = i;\n        }\n    }\n\n    function addToken(address _token) external onlyOwner {\n        uint _pid = pid[_token];\n        require ((_pid == 0 && _token != tokens[0]), \"Already added\");\n\n        tokens.push(_token);\n        _pid = tokens.length-1;\n        pid[_token] = _pid;\n\n        // if (IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\n        //     IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\n        // }\n        emit AddToken(_token, _pid);\n    }\n\n    function removeToken(uint _pid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_pid < tokenCnt, \"Invalid pid\");\n        uint pool = _getPoolInUSD(_pid);\n        require(pool == 0, \"Pool is not empty\");\n\n        address _token = tokens[_pid];\n        tokens[_pid] = tokens[tokenCnt-1];\n        tokens.pop();\n\n        pid[_token] = 0;\n        updatePid();\n\n        emit RemoveToken(_token, _pid);\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        uint poolCnt = _tokens.length;\n        uint USDTAmt;\n        uint[] memory USDTAmts = new uint[](tokens.length);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint amount = _USDTAmts[i];\n            USDTAmt += amount;\n            uint _pid = pid[_tokens[i]];\n            USDTAmts[_pid] += amount;\n        }\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n\n        // _invest(USDTAmts);\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual {\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(USDT)) continue;\n\n            uint USDTAmt = _USDTAmts[i];\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n            uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n            uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n            uint amountOutMin = USDTAmt * numerator * 95 / (denominator * 100);\n\n            if (token == address(SWAP_BASE_TOKEN)) {\n                _swap(address(USDT), token, USDTAmt, amountOutMin);\n            } else {\n                _swap2(address(USDT), token, USDTAmt, amountOutMin);\n            }\n        }\n    }\n\n    function withdrawPerc(uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        // USDTAmt = _withdraw(_sharePerc);\n        USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(_sharePerc, USDTAmt);\n    }\n\n    function _withdraw(uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        uint poolCnt = tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            USDTAmt += _withdrawFromPool(i, _sharePerc);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        uint amount = token.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            if (address(token) == address(USDT)) {\n                USDTAmt = amount;\n            } else {\n                (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n                (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n                uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n                uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n                uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n                uint amountOutMin = amount * numerator * 95 / (denominator * 100);\n\n                if (address(token) == address(SWAP_BASE_TOKEN)) {\n                    USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\n                } else{\n                    USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\n                }\n            }\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        path[2] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromPool(uint _pid, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        // USDTAmt = _withdrawFromPool(_pid, _sharePerc);\n        USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        // uint USDTAmt = _withdraw(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        // return priceOracle.getAssetPrice(address(USDT));\n        return (1e8, 8);\n    }\n\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\n        return (tokens, _getEachPoolInUSD());\n    }\n\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\n        uint poolCnt = tokens.length;\n        pools = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            pools[i] = _getPoolInUSD(i);\n        }\n    }\n\n    function _getPoolInUSD(uint _pid) private view returns (uint pool) {\n        // IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        // uint amount = token.balanceOf(address(this));\n        // if (0 < amount) {\n        //     (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n        //     uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n        //     pool = amount * TOKENPriceInUSD * (10 ** (18-tokenDecimals)) / (10 ** (TOKENPriceDecimals));\n        // }\n        uint amount = USDT.balanceOf(address(this));\n        pool = amount * (10 ** (18-usdtDecimals));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n        return allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : DENOMINATOR / poolCnt;\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * DENOMINATOR / allPool;\n        }\n        return (tokens, percentages);\n    }\n\n    function getAPR() external view virtual returns (uint) {\n        return 0;\n    }\n\n}\n"
    },
    "contracts/bni/strategy/BNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IRouter.sol\";\nimport \"../../../libs/Token.sol\";\n\ncontract BNIStrategy is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IRouter public router;\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    uint constant DENOMINATOR = 10000;\n\n    address public treasuryWallet;\n    address public admin;\n    address public vault;\n    IPriceOracle public priceOracle;\n\n    address[] public tokens;\n    mapping(address => uint) public pid; // Pool indices in tokens array\n\n    event AddToken(address token, uint pid);\n    event RemoveToken(address token, uint pid);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _priceOracle,\n        address _router, address _SWAP_BASE_TOKEN,\n        address _USDT, address _token0\n    ) public virtual initializer {\n        require(_router != address(0), \"Invalid router\");\n        require(_SWAP_BASE_TOKEN != address(0), \"Invalid SWAP_BASE_TOKEN\");\n        require(_USDT != address(0), \"Invalid USDT\");\n        require(_token0 != address(0), \"Invalid token0\");\n        __Ownable_init();\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n        router = IRouter(_router);\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        tokens.push(_token0);\n        updatePid();\n\n        USDT.safeApprove(address(router), type(uint).max);\n        IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\n    }\n\n    function updatePid() internal {\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            pid[_tokens[i]] = i;\n        }\n    }\n\n    function addToken(address _token) external onlyOwner {\n        uint _pid = pid[_token];\n        require ((_pid == 0 && _token != tokens[0]), \"Already added\");\n\n        tokens.push(_token);\n        _pid = tokens.length-1;\n        pid[_token] = _pid;\n\n        if (IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\n            IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\n        }\n        emit AddToken(_token, _pid);\n    }\n\n    function removeToken(uint _pid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_pid < tokenCnt, \"Invalid pid\");\n        uint pool = _getPoolInUSD(_pid);\n        require(pool == 0, \"Pool is not empty\");\n\n        address _token = tokens[_pid];\n        tokens[_pid] = tokens[tokenCnt-1];\n        tokens.pop();\n\n        pid[_token] = 0;\n        updatePid();\n\n        emit RemoveToken(_token, _pid);\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        uint poolCnt = _tokens.length;\n        uint USDTAmt;\n        uint[] memory USDTAmts = new uint[](tokens.length);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint amount = _USDTAmts[i];\n            USDTAmt += amount;\n            uint _pid = pid[_tokens[i]];\n            USDTAmts[_pid] += amount;\n        }\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n\n        _invest(USDTAmts);\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual {\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(USDT)) continue;\n\n            uint USDTAmt = _USDTAmts[i];\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n            uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n            uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n            uint amountOutMin = USDTAmt * numerator * 95 / (denominator * 100);\n\n            if (token == address(SWAP_BASE_TOKEN)) {\n                _swap(address(USDT), token, USDTAmt, amountOutMin);\n            } else {\n                _swap2(address(USDT), token, USDTAmt, amountOutMin);\n            }\n        }\n    }\n\n    function withdrawPerc(uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        USDTAmt = _withdraw(_sharePerc);\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(_sharePerc, USDTAmt);\n    }\n\n    function _withdraw(uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        uint poolCnt = tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            USDTAmt += _withdrawFromPool(i, _sharePerc);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        uint amount = token.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            if (address(token) == address(USDT)) {\n                USDTAmt = amount;\n            } else {\n                USDTAmt = _swapForUSDT(address(token), amount);\n            }\n        }\n    }\n\n    function _swapForUSDT(address token, uint amount) internal returns (uint USDTAmt) {\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n        uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n        uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n        uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n        uint amountOutMin = amount * numerator * 95 / (denominator * 100);\n\n        if (address(token) == address(SWAP_BASE_TOKEN)) {\n            USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\n        } else{\n            USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        path[2] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromPool(uint _pid, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        USDTAmt = _withdrawFromPool(_pid, _sharePerc);\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        uint USDTAmt = _withdraw(1e18);\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(address(USDT));\n    }\n\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\n        return (tokens, _getEachPoolInUSD());\n    }\n\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\n        uint poolCnt = tokens.length;\n        pools = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            pools[i] = _getPoolInUSD(i);\n        }\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual returns (uint pool) {\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        uint amount = token.balanceOf(address(this));\n        if (0 < amount) {\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n            pool = Token.changeDecimals(amount, tokenDecimals, 18) * TOKENPriceInUSD / (10 ** (TOKENPriceDecimals));\n        }\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n        return allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : DENOMINATOR / poolCnt;\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * DENOMINATOR / allPool;\n        }\n        return (tokens, percentages);\n    }\n\n    function getAPR() public view virtual returns (uint) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[40] private __gap;\n}\n"
    },
    "interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/bni/strategy/MaticBNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BNIStrategy.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\n\ncontract MaticBNIStrategy is BNIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WMATIC = IERC20Upgradeable(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\n\n    IL2Vault public WMATICVault;\n\n    event InvestWMATIC(uint USDTAmt, uint WMATICAmt);\n    event WithdrawWMATIC(uint WMATICAmt, uint USDTAmt);\n\n    function setWMATICVault(IL2Vault _WMATICVault) external onlyOwner {\n        WMATICVault = _WMATICVault;\n        if (WMATIC.allowance(address(this), address(WMATICVault)) == 0) {\n            WMATIC.safeApprove(address(WMATICVault), type(uint).max);\n        }\n    }\n\n    function _investWMATIC(uint USDTAmt) private {\n        uint WMATICAmt = WMATIC.balanceOf(address(this));\n        if (WMATICAmt > 0) {\n            WMATICVault.deposit(WMATICAmt);\n            emit InvestWMATIC(USDTAmt, WMATICAmt);\n        }\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual override {\n        super._invest(_USDTAmts);\n\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(WMATIC)) {\n                _investWMATIC(_USDTAmts[i]);\n            }\n        }\n    }\n\n    function _withdrawWMATIC(uint _sharePerc) private returns (uint USDTAmt) {\n        uint amount = WMATICVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WMATICVault.withdraw(amount);\n            uint WMATICAmt = WMATIC.balanceOf(address(this));\n            USDTAmt = _swapForUSDT(address(WMATIC), WMATICAmt);\n            emit WithdrawWMATIC(WMATICAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual override returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        if (token == address(WMATIC)) {\n            USDTAmt = _withdrawWMATIC(_sharePerc);\n        } else {\n            USDTAmt = super._withdrawFromPool(_pid, _sharePerc);\n        }\n    }\n\n    function getWMATICPoolInUSD() private view  returns (uint) {\n        uint amt = WMATICVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WMATICVault.balanceOf(address(this)) / WMATICVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual override returns (uint pool) {\n        address token = tokens[_pid];\n        if (token == address(WMATIC)) {\n            pool = getWMATICPoolInUSD();\n        } else {\n            pool = super._getPoolInUSD(_pid);\n        }\n    }\n\n    function getAPR() public view override returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = _tokens[i];\n            if (token == address(WMATIC)) {\n                allApr += WMATICVault.getAPR() * perc[i];\n            }\n        }\n        return (allApr / DENOMINATOR);\n    }\n}\n"
    },
    "interfaces/IL2Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IL2Vault is IERC20Upgradeable {\r\n    function deposit(uint amount) external;\r\n    function withdraw(uint share) external;\r\n    function getAllPoolInUSD() external view returns (uint);\r\n    function getAPR() external view returns (uint);\r\n}\r\n"
    },
    "contracts/bni/strategy/AvaxBNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BNIStrategy.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\n\ncontract AvaxBNIStrategy is BNIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n\n    IL2Vault public WAVAXVault;\n\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\n\n    function setWAVAXVault(IL2Vault _WAVAXVault) external onlyOwner {\n        WAVAXVault = _WAVAXVault;\n        if (WAVAX.allowance(address(this), address(WAVAXVault)) == 0) {\n            WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        }\n    }\n\n    function _investWAVAX(uint USDTAmt) private {\n        uint WAVAXAmt = WAVAX.balanceOf(address(this));\n        if (WAVAXAmt > 0) {\n            WAVAXVault.deposit(WAVAXAmt);\n            emit InvestWAVAX(USDTAmt, WAVAXAmt);\n        }\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual override {\n        super._invest(_USDTAmts);\n\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(WAVAX)) {\n                _investWAVAX(_USDTAmts[i]);\n            }\n        }\n    }\n\n    function _withdrawWAVAX(uint _sharePerc) private returns (uint USDTAmt) {\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WAVAXVault.withdraw(amount);\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\n            USDTAmt = _swapForUSDT(address(WAVAX), WAVAXAmt);\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual override returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        if (token == address(WAVAX)) {\n            USDTAmt = _withdrawWAVAX(_sharePerc);\n        } else {\n            USDTAmt = super._withdrawFromPool(_pid, _sharePerc);\n        }\n    }\n\n    function getWAVAXPoolInUSD() private view  returns (uint) {\n        uint amt = WAVAXVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WAVAXVault.balanceOf(address(this)) / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual override returns (uint pool) {\n        address token = tokens[_pid];\n        if (token == address(WAVAX)) {\n            pool = getWAVAXPoolInUSD();\n        } else {\n            pool = super._getPoolInUSD(_pid);\n        }\n    }\n\n    function getAPR() public view override returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = _tokens[i];\n            if (token == address(WAVAX)) {\n                allApr += WAVAXVault.getAPR() * perc[i];\n            }\n        }\n        return (allApr / DENOMINATOR);\n    }\n}\n"
    },
    "contracts/bni/strategy/AuroraBNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BNIStrategy.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\n\ncontract AuroraBNIStrategy is BNIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WNEAR = IERC20Upgradeable(0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d);\n\n    IL2Vault public WNEARVault;\n\n    event InvestWNEAR(uint USDTAmt, uint WNEARAmt);\n    event WithdrawWNEAR(uint WNEARAmt, uint USDTAmt);\n\n    function setWNEARVault(IL2Vault _WNEARVault) external onlyOwner {\n        WNEARVault = _WNEARVault;\n        if (WNEAR.allowance(address(this), address(WNEARVault)) == 0) {\n            WNEAR.safeApprove(address(WNEARVault), type(uint).max);\n        }\n    }\n\n    function _investWNEAR(uint USDTAmt) private {\n        uint WNEARAmt = WNEAR.balanceOf(address(this));\n        if (WNEARAmt > 0) {\n            WNEARVault.deposit(WNEARAmt);\n            emit InvestWNEAR(USDTAmt, WNEARAmt);\n        }\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual override {\n        super._invest(_USDTAmts);\n\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(WNEAR)) {\n                _investWNEAR(_USDTAmts[i]);\n            }\n        }\n    }\n\n    function _withdrawWNEAR(uint _sharePerc) private returns (uint USDTAmt) {\n        uint amount = WNEARVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WNEARVault.withdraw(amount);\n            uint WNEARAmt = WNEAR.balanceOf(address(this));\n            USDTAmt = _swapForUSDT(address(WNEAR), WNEARAmt);\n            emit WithdrawWNEAR(WNEARAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual override returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        if (token == address(WNEAR)) {\n            USDTAmt = _withdrawWNEAR(_sharePerc);\n        } else {\n            USDTAmt = super._withdrawFromPool(_pid, _sharePerc);\n        }\n    }\n\n    function getWNEARPoolInUSD() private view  returns (uint) {\n        uint amt = WNEARVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WNEARVault.balanceOf(address(this)) / WNEARVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual override returns (uint pool) {\n        address token = tokens[_pid];\n        if (token == address(WNEAR)) {\n            pool = getWNEARPoolInUSD();\n        } else {\n            pool = super._getPoolInUSD(_pid);\n        }\n    }\n\n    function getAPR() public view override returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = _tokens[i];\n            if (token == address(WNEAR)) {\n                allApr += WNEARVault.getAPR() * perc[i];\n            }\n        }\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/bni/priceOracle/PriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./IPriceOracle.sol\";\n\ninterface IChainlinkAggregator {\n    function decimals() external view returns (uint8);\n    function description() external view returns (string memory);\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId) external view returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n\n    function latestRoundData() external view returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n\n    function latestAnswer() external view returns (int256);\n}\n\ncontract PriceOracle is IPriceOracle, OwnableUpgradeable {\n    \n    // Map of asset price sources (asset => priceSource)\n    mapping(address => IChainlinkAggregator) internal assetsSources;\n\n    function initialize() public virtual initializer {\n        __Ownable_init();\n    }\n\n    function setAssetSources(address[] memory assets, address[] memory sources) public override onlyOwner {\n        uint count = assets.length;\n        require(count == sources.length, \"Not match array length\");\n        for (uint i = 0; i < count; i ++) {\n            assetsSources[assets[i]] = IChainlinkAggregator(sources[i]);\n        }\n    }\n\n    function getSourceOfAsset(address asset) public override view returns (address) {\n        return address(assetsSources[asset]);\n    }\n\n    function getAssetsPrices(address[] memory assets) public override view returns (uint[] memory prices, uint8[] memory decimalsArray) {\n        uint count = assets.length;\n        prices = new uint[](count);\n        decimalsArray = new uint8[](count);\n        for (uint i = 0; i < count; i ++) {\n            (uint price, uint8 decimals) = getAssetPrice(assets[i]);\n            prices[i] = price;\n            decimalsArray[i] = decimals;\n        }\n    }\n\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        IChainlinkAggregator source = assetsSources[asset];\n        if (address(source) != address(0)) {\n            int256 _price = source.latestAnswer();\n            if (_price > 0) {\n                price = uint(_price);\n            }\n            decimals = source.decimals();\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/bni/priceOracle/MaticPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/MaticConstant.sol\";\n\ncontract MaticPriceOracle is PriceOracle {\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](2);\n        assets[0] = MaticConstant.USDT;\n        assets[1] = MaticConstant.WMATIC;\n        address[] memory sources = new address[](2);\n        sources[0] = 0x0A6513e40db6EB1b165753AD52E80663aeA50545;\n        sources[1] = 0xAB594600376Ec9fD91F8e885dADF0CE036862dE0;\n\n        setAssetSources(assets, sources);\n    }\n}\n"
    },
    "contracts/bni/constant/MaticConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary MaticConstant {\n    uint internal constant CHAINID = 137;\n\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\n}\n"
    },
    "contracts/bni/BNIMinterTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"./priceOracle/IPriceOracle.sol\";\nimport \"./constant/AvaxConstant.sol\";\nimport \"./constant/AuroraConstant.sol\";\nimport \"./constant/MaticConstant.sol\";\n\ninterface IBNI is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n    function mint(address account_, uint256 amount_) external;\n    function burn(uint256 amount) external;\n    function burnFrom(address account_, uint256 amount_) external;\n}\n\nerror OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\n\ninterface Gateway {\n    function getCurrentTokenCompositionPerc1() external view returns(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n    function getAllPoolInUSD1() external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getPricePerFullShare1() external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getAPR1() external view returns(\n        uint[] memory _allPoolInUSDs,  uint[] memory _APRs,\n        bytes memory sig\n    );\n    function getDepositTokenComposition1() external view returns(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n}\n\n\ncontract BNIMinterTest is ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\n    using ECDSAUpgradeable for bytes32;\n\n    uint constant DENOMINATOR = 10000;\n\n    uint[] public chainIDs;\n    address[] public tokens;\n    uint[] public targetPercentages;\n    mapping(uint => mapping(address => uint)) public tid; // Token indices in arrays\n\n    address public admin;\n    IBNI public BNI;\n    IPriceOracle public priceOracle;\n\n    string[] public urls;\n\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event AddToken(uint chainID, address token, uint tid);\n    event RemoveToken(uint chainID, address token, uint targetPerc, uint tid);\n    event Mint(address caller, uint amtDeposit, uint shareMinted);\n    event Burn(address caller, uint shareBurned);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _admin, address _BNI, address _priceOracle\n    ) external initializer {\n        __Ownable_init();\n\n        admin = _admin;\n        BNI = IBNI(_BNI);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        chainIDs.push(MaticConstant.CHAINID);\n        chainIDs.push(AvaxConstant.CHAINID);\n        chainIDs.push(AuroraConstant.CHAINID);\n\n        tokens.push(MaticConstant.WMATIC);\n        tokens.push(AvaxConstant.WAVAX);\n        tokens.push(AuroraConstant.WNEAR);\n\n        targetPercentages.push(4000); // 40%\n        targetPercentages.push(4000); // 40%\n        targetPercentages.push(2000); // 20%\n\n        updateTid();\n\n        urls.push(\"http://localhost:8000/\");\n    }\n\n    function updateTid() private {\n        uint[] memory _chainIDs = chainIDs;\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            tid[_chainIDs[i]][_tokens[i]] = i;\n        }\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function addToken(uint _chainID, address _token) external onlyOwner {\n        uint _tid = tid[_chainID][_token];\n        require ((_tid == 0 && _chainID != chainIDs[0] && _token != tokens[0]), \"Already added\");\n\n        chainIDs.push(_chainID);\n        tokens.push(_token);\n        targetPercentages.push(0);\n\n        _tid = tokens.length-1;\n        tid[_chainID][_token] = _tid;\n\n        emit AddToken(_chainID, _token, _tid);\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function removeToken(uint _tid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_tid < tokenCnt, \"Invalid tid\");\n\n        uint _chainID = chainIDs[_tid];\n        address _token = tokens[_tid];\n        uint _targetPerc = targetPercentages[_tid];\n\n        chainIDs[_tid] = chainIDs[tokenCnt-1];\n        chainIDs.pop();\n        tokens[_tid] = tokens[tokenCnt-1];\n        tokens.pop();\n        targetPercentages[_tid] = targetPercentages[tokenCnt-1];\n        targetPercentages.pop();\n\n        tid[_chainID][_token] = 0;\n        updateTid();\n\n        emit RemoveToken(_chainID, _token, _targetPerc, _tid);\n    }\n\n    /// @notice The length of array is based on token count.\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) public onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == DENOMINATOR, \"Invalid parameter\");\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getEachPoolInUSD(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) private view returns (uint[] memory pools) {\n        uint inputCnt = _tokens.length;\n        uint tokenCnt = tokens.length;\n        pools = new uint[](tokenCnt);\n\n        for (uint i = 0; i < inputCnt; i ++) {\n            uint _chainID = _chainIDs[i];\n            address _token = _tokens[i];\n            uint _tid = tid[_chainID][_token];\n            if (tokenCnt <= _tid) continue;\n            if (_tid == 0 && (_chainID != chainIDs[0] || _token != tokens[0])) continue;\n\n            pools[_tid] = _poolInUSDs[i];\n        }\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getCurrentTokenCompositionPerc(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory pools, uint[] memory percentages\n    ) {\n        pools = getEachPoolInUSD(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = pools.length;\n\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\n        }\n\n        return (chainIDs, tokens, pools, percentages);\n    }\n    function getCurrentTokenCompositionPerc1() external view returns (\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getCurrentTokenCompositionPerc1.selector),\n            BNIMinterTest.getCurrentTokenCompositionPercWithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getCurrentTokenCompositionPercWithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        extraData;\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(admin == recovered, \"Signer is incorrect\");\n\n        return getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAllPoolInUSD(uint[] memory _allPoolInUSDs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        uint allPoolInUSD;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allPoolInUSD += _allPoolInUSDs[i];\n        }\n        return allPoolInUSD;\n    }\n    function getAllPoolInUSD1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAllPoolInUSD1.selector),\n            BNIMinterTest.getAllPoolInUSD1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAllPoolInUSD1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(admin == recovered, \"Signer is incorrect\");\n\n        return getAllPoolInUSD(_allPoolInUSDs);\n    }\n\n    /// @notice Can be used for calculate both user shares & APR\n    function getPricePerFullShare(uint[] memory _allPoolInUSDs) public view returns (uint) {\n        uint _totalSupply = BNI.totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD(_allPoolInUSDs) * 1e18 / _totalSupply;\n    }\n    function getPricePerFullShare1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getPricePerFullShare1.selector),\n            BNIMinterTest.getPricePerFullShare1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getPricePerFullShare1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(admin == recovered, \"Signer is incorrect\");\n\n        return getPricePerFullShare(_allPoolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAPR(uint[] memory _allPoolInUSDs, uint[] memory _APRs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        require(networkCnt == _APRs.length, \"Not match array length\");\n\n        uint pool = getAllPoolInUSD(_allPoolInUSDs);\n        if (pool == 0) return 0;\n\n        uint allApr;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allApr += (_APRs[i] * _allPoolInUSDs[i]);\n        }\n        return (allApr / pool);\n    }\n    function getAPR1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAPR1.selector),\n            BNIMinterTest.getAPR1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAPR1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs,  uint[] memory _APRs, bytes memory sig) = abi.decode(result, (uint[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs, _APRs))\n        )).recover(sig);\n        require(admin == recovered, \"Signer is incorrect\");\n\n        return getAPR(_allPoolInUSDs, _APRs);\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        // return priceOracle.getAssetPrice(AvaxConstant.USDT);\n        return (1e8, 8);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDTAmt amount of USDT with 6 decimals\n    /// @return _USDTAmts amount of USDT should be deposited to each pools\n    function getDepositTokenComposition(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, uint _USDTAmt\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory _USDTAmts\n    ) {\n        (,, uint[] memory pools, uint[] memory perc) = getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = perc.length;\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n\n        uint allPool = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        _USDTAmts = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDTAmts[i] = _USDTAmt * allocations[i] / totalAllocation;\n        }\n\n        return (chainIDs, tokens, _USDTAmts);\n    }\n    function getDepositTokenComposition1(uint _USDTAmt) external view returns (\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getDepositTokenComposition1.selector),\n            BNIMinterTest.getDepositTokenComposition1WithSig.selector,\n            abi.encode(_USDTAmt)\n        );\n    }\n    function getDepositTokenComposition1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        (uint _USDTAmt) = abi.decode(extraData, (uint));\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(admin == recovered, \"Signer is incorrect\");\n\n        return getDepositTokenComposition(_chainIDs, _tokens, _poolInUSDs, _USDTAmt);\n    }\n\n    /// @dev mint BNIs according to the deposited USDT\n    /// @param _pool total USD worth in all pools of BNI after deposited\n    /// @param _account account to which BNIs will be minted\n    /// @param _USDTAmt the deposited amount of USDT with 6 decimals\n    function mint(uint _pool, address _account, uint _USDTAmt) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        uint amtDeposit = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n        _pool = (amtDeposit < _pool) ? _pool - amtDeposit : 0;\n\n        uint _totalSupply = BNI.totalSupply();\n        uint share = (_totalSupply == 0 || _pool == 0)  ? amtDeposit : amtDeposit * _totalSupply / _pool;\n\n        BNI.mint(_account, share);\n        emit Mint(_account, amtDeposit, share);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _share amount of BNI to be withdrawn\n    /// @return _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function getWithdrawPerc(address _account, uint _share) public view returns (uint _sharePerc) {\n        require(0 < _share && _share <= BNI.balanceOf(_account), \"Invalid share amount\");\n        return (_share * 1e18) / BNI.totalSupply();\n    }\n\n    /// @dev mint BNIs according to the deposited USDT\n    /// @param _account account to which BNIs will be minted\n    /// @param _share amount of BNI to be burnt\n    function burn(address _account, uint _share) external onlyOwnerOrAdmin nonReentrant {\n        require(0 < _share && _share <= BNI.balanceOf(_account), \"Invalid share amount\");\n        BNI.burnFrom(_account, _share);\n        emit Burn(_account, _share);\n    }\n\n    function setUrls(string[] memory _urls) external onlyOwner {\n        urls = _urls;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/bni/constant/AvaxConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary AvaxConstant {\n    uint internal constant CHAINID = 43114;\n\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\n}\n"
    },
    "contracts/bni/constant/AuroraConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary AuroraConstant {\n    uint internal constant CHAINID = 1313161554;\n\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/bni/priceOracle/AuroraPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./PriceOracle.sol\";\nimport \"../constant/AuroraConstant.sol\";\n\ninterface IUniPair is IERC20Upgradeable{\n    function getReserves() external view returns (uint, uint);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ncontract AuroraPriceOracle is PriceOracle {\n\n    IUniPair constant WNEARUSDT = IUniPair(0x03B666f3488a7992b2385B12dF7f35156d7b29cD);\n    IUniPair constant WNEARUSDC = IUniPair(0x20F8AeFB5697B77E0BB835A8518BE70775cdA1b0);\n    IUniPair constant BSTNWNEAR = IUniPair(0xBBf3D4281F10E537d5b13CA80bE22362310b2bf9);\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n    }\n\n    ///@notice Chainlink is not yet supported on Aurora.\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        if (asset == AuroraConstant.USDT || asset == AuroraConstant.USDT) {\n            return (1e8, 8);\n        } else if (asset == AuroraConstant.WNEAR) {\n            return getWNEARPrice();\n        } else if (asset == AuroraConstant.BSTN) {\n            return getBSTNPrice();\n        }\n        return super.getAssetPrice(asset);\n    }\n\n    function getWNEARPrice() public view returns (uint price, uint8 decimals) {\n        uint priceInUSDT = getPriceFromPair(WNEARUSDT, AuroraConstant.WNEAR);\n        uint priceInUSDC = getPriceFromPair(WNEARUSDC, AuroraConstant.WNEAR);\n        return ((priceInUSDT + priceInUSDC) / 2, 18);\n    }\n\n    function getBSTNPrice() private view returns (uint price, uint8 decimals) {\n        uint priceInWNEAR = getPriceFromPair(BSTNWNEAR, AuroraConstant.BSTN);\n        (uint WNEARPriceInUSD, uint8 WNEARPriceDecimals) = getWNEARPrice();\n        price = priceInWNEAR * WNEARPriceInUSD / 1e18;\n        decimals = WNEARPriceDecimals;\n    }\n\n    ///@return the value denominated with other token. It's 18 decimals.\n    function getPriceFromPair(IUniPair pair, address token) private view returns (uint) {\n        (uint _reserve0, uint _reserve1) = pair.getReserves();\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        uint8 decimals0 = IERC20UpgradeableExt(token0).decimals();\n        uint8 decimals1 = IERC20UpgradeableExt(token1).decimals();\n\n        uint numerator;\n        uint denominator;\n        if (token0 == token) {\n            numerator = _reserve1 * (10 ** (18 + decimals0));\n            denominator = _reserve0 * (10 ** (decimals1));\n        } else if (token1 == token) {\n            numerator = _reserve0 * (10 ** (18 + decimals1));\n            denominator = _reserve1 * (10 ** (decimals0));\n        } else {\n            require(false, \"Invalid pair and token\");\n        }\n\n        return (numerator / denominator);\n    }\n}\n"
    },
    "contracts/bni/BNIMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"./priceOracle/IPriceOracle.sol\";\nimport \"./constant/AvaxConstant.sol\";\nimport \"./constant/AuroraConstant.sol\";\nimport \"./constant/MaticConstant.sol\";\n\ninterface IBNI is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n    function mint(address account_, uint256 amount_) external;\n    function burn(uint256 amount) external;\n    function burnFrom(address account_, uint256 amount_) external;\n}\n\nerror OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\n\ninterface Gateway {\n    function getCurrentTokenCompositionPerc1() external view returns(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n    function getAllPoolInUSD1() external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getPricePerFullShare1() external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getAPR1() external view returns(\n        uint[] memory _allPoolInUSDs,  uint[] memory _APRs,\n        bytes memory sig\n    );\n    function getDepositTokenComposition1() external view returns(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n}\n\n\ncontract BNIMinter is ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\n    using ECDSAUpgradeable for bytes32;\n\n    uint constant DENOMINATOR = 10000;\n\n    uint[] public chainIDs;\n    address[] public tokens;\n    uint[] public targetPercentages;\n    mapping(uint => mapping(address => uint)) public tid; // Token indices in arrays\n\n    address public admin;\n    IBNI public BNI;\n    IPriceOracle public priceOracle;\n\n    string[] public urls;\n    address public gatewaySigner;\n\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event AddToken(uint chainID, address token, uint tid);\n    event RemoveToken(uint chainID, address token, uint targetPerc, uint tid);\n    event Mint(address caller, uint amtDeposit, uint shareMinted);\n    event Burn(address caller, uint shareBurned);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _admin, address _BNI, address _priceOracle\n    ) external initializer {\n        __Ownable_init();\n\n        admin = _admin;\n        BNI = IBNI(_BNI);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        chainIDs.push(MaticConstant.CHAINID);\n        chainIDs.push(AvaxConstant.CHAINID);\n        chainIDs.push(AuroraConstant.CHAINID);\n\n        tokens.push(MaticConstant.WMATIC);\n        tokens.push(AvaxConstant.WAVAX);\n        tokens.push(AuroraConstant.WNEAR);\n\n        targetPercentages.push(4000); // 40%\n        targetPercentages.push(4000); // 40%\n        targetPercentages.push(2000); // 20%\n\n        updateTid();\n\n        urls.push(\"http://localhost:8000/\");\n        gatewaySigner = _admin;\n    }\n\n    function updateTid() private {\n        uint[] memory _chainIDs = chainIDs;\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            tid[_chainIDs[i]][_tokens[i]] = i;\n        }\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setGatewaySigner(address _signer) external onlyOwner {\n        gatewaySigner = _signer;\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function addToken(uint _chainID, address _token) external onlyOwner {\n        uint _tid = tid[_chainID][_token];\n        require ((_tid == 0 && _chainID != chainIDs[0] && _token != tokens[0]), \"Already added\");\n\n        chainIDs.push(_chainID);\n        tokens.push(_token);\n        targetPercentages.push(0);\n\n        _tid = tokens.length-1;\n        tid[_chainID][_token] = _tid;\n\n        emit AddToken(_chainID, _token, _tid);\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function removeToken(uint _tid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_tid < tokenCnt, \"Invalid tid\");\n\n        uint _chainID = chainIDs[_tid];\n        address _token = tokens[_tid];\n        uint _targetPerc = targetPercentages[_tid];\n\n        chainIDs[_tid] = chainIDs[tokenCnt-1];\n        chainIDs.pop();\n        tokens[_tid] = tokens[tokenCnt-1];\n        tokens.pop();\n        targetPercentages[_tid] = targetPercentages[tokenCnt-1];\n        targetPercentages.pop();\n\n        tid[_chainID][_token] = 0;\n        updateTid();\n\n        emit RemoveToken(_chainID, _token, _targetPerc, _tid);\n    }\n\n    /// @notice The length of array is based on token count.\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) public onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == DENOMINATOR, \"Invalid parameter\");\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getEachPoolInUSD(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) private view returns (uint[] memory pools) {\n        uint inputCnt = _tokens.length;\n        uint tokenCnt = tokens.length;\n        pools = new uint[](tokenCnt);\n\n        for (uint i = 0; i < inputCnt; i ++) {\n            uint _chainID = _chainIDs[i];\n            address _token = _tokens[i];\n            uint _tid = tid[_chainID][_token];\n            if (tokenCnt <= _tid) continue;\n            if (_tid == 0 && (_chainID != chainIDs[0] || _token != tokens[0])) continue;\n\n            pools[_tid] = _poolInUSDs[i];\n        }\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getCurrentTokenCompositionPerc(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory pools, uint[] memory percentages\n    ) {\n        pools = getEachPoolInUSD(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = pools.length;\n\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\n        }\n\n        return (chainIDs, tokens, pools, percentages);\n    }\n    function getCurrentTokenCompositionPerc1() external view returns (\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getCurrentTokenCompositionPerc1.selector),\n            BNIMinter.getCurrentTokenCompositionPercWithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getCurrentTokenCompositionPercWithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        extraData;\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAllPoolInUSD(uint[] memory _allPoolInUSDs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        uint allPoolInUSD;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allPoolInUSD += _allPoolInUSDs[i];\n        }\n        return allPoolInUSD;\n    }\n    function getAllPoolInUSD1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAllPoolInUSD1.selector),\n            BNIMinter.getAllPoolInUSD1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAllPoolInUSD1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getAllPoolInUSD(_allPoolInUSDs);\n    }\n\n    /// @notice Can be used for calculate both user shares & APR\n    function getPricePerFullShare(uint[] memory _allPoolInUSDs) public view returns (uint) {\n        uint _totalSupply = BNI.totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD(_allPoolInUSDs) * 1e18 / _totalSupply;\n    }\n    function getPricePerFullShare1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getPricePerFullShare1.selector),\n            BNIMinter.getPricePerFullShare1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getPricePerFullShare1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getPricePerFullShare(_allPoolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAPR(uint[] memory _allPoolInUSDs, uint[] memory _APRs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        require(networkCnt == _APRs.length, \"Not match array length\");\n\n        uint pool = getAllPoolInUSD(_allPoolInUSDs);\n        if (pool == 0) return 0;\n\n        uint allApr;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allApr += (_APRs[i] * _allPoolInUSDs[i]);\n        }\n        return (allApr / pool);\n    }\n    function getAPR1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAPR1.selector),\n            BNIMinter.getAPR1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAPR1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs,  uint[] memory _APRs, bytes memory sig) = abi.decode(result, (uint[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs, _APRs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getAPR(_allPoolInUSDs, _APRs);\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(AvaxConstant.USDT);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDTAmt amount of USDT with 6 decimals\n    /// @return _USDTAmts amount of USDT should be deposited to each pools\n    function getDepositTokenComposition(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, uint _USDTAmt\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory _USDTAmts\n    ) {\n        (,, uint[] memory pools, uint[] memory perc) = getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = perc.length;\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n\n        uint allPool = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        _USDTAmts = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDTAmts[i] = _USDTAmt * allocations[i] / totalAllocation;\n        }\n\n        return (chainIDs, tokens, _USDTAmts);\n    }\n    function getDepositTokenComposition1(uint _USDTAmt) external view returns (\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getDepositTokenComposition1.selector),\n            BNIMinter.getDepositTokenComposition1WithSig.selector,\n            abi.encode(_USDTAmt)\n        );\n    }\n    function getDepositTokenComposition1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        (uint _USDTAmt) = abi.decode(extraData, (uint));\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getDepositTokenComposition(_chainIDs, _tokens, _poolInUSDs, _USDTAmt);\n    }\n\n    /// @dev mint BNIs according to the deposited USDT\n    /// @param _pool total USD worth in all pools of BNI after deposited\n    /// @param _account account to which BNIs will be minted\n    /// @param _USDTAmt the deposited amount of USDT with 6 decimals\n    function mint(uint _pool, address _account, uint _USDTAmt) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        uint amtDeposit = _USDTAmt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n        _pool = (amtDeposit < _pool) ? _pool - amtDeposit : 0;\n\n        uint _totalSupply = BNI.totalSupply();\n        uint share = (_totalSupply == 0 || _pool == 0)  ? amtDeposit : _totalSupply * amtDeposit / _pool;\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\n        share = share * 997 / 1000;\n\n        BNI.mint(_account, share);\n        emit Mint(_account, amtDeposit, share);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _share amount of BNI to be withdrawn\n    /// @return _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function getWithdrawPerc(address _account, uint _share) public view returns (uint _sharePerc) {\n        require(0 < _share && _share <= BNI.balanceOf(_account), \"Invalid share amount\");\n        return (_share * 1e18) / BNI.totalSupply();\n    }\n\n    /// @dev mint BNIs according to the deposited USDT\n    /// @param _account account to which BNIs will be minted\n    /// @param _share amount of BNI to be burnt\n    function burn(address _account, uint _share) external onlyOwnerOrAdmin nonReentrant {\n        require(0 < _share && _share <= BNI.balanceOf(_account), \"Invalid share amount\");\n        BNI.burnFrom(_account, _share);\n        emit Burn(_account, _share);\n    }\n\n    function setUrls(string[] memory _urls) external onlyOwner {\n        urls = _urls;\n    }\n}\n"
    },
    "contracts/bni/priceOracle/AvaxPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/AvaxConstant.sol\";\n\ncontract AvaxPriceOracle is PriceOracle {\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](2);\n        assets[0] = AvaxConstant.USDT;\n        assets[1] = AvaxConstant.WAVAX;\n        address[] memory sources = new address[](2);\n        sources[0] = 0xEBE676ee90Fe1112671f19b6B7459bC678B67e8a;\n        sources[1] = 0x0A77230d17318075983913bC2145DB16C7366156;\n\n        setAssetSources(assets, sources);\n    }\n}\n"
    },
    "contracts/bni/BNIVaultTest.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./priceOracle/IPriceOracle.sol\";\n\ninterface IStrategy {\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromPool(uint pid, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ncontract BNIVaultTest is ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    address public admin;\n    IStrategy public strategy;\n    IPriceOracle public priceOracle;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint sharePerc);\n    event Rebalance(uint pid, uint sharePerc, uint amount, address target);\n    event Reinvest(uint amount);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _admin, address _strategy, address _priceOracle,\n        address _USDT\n    ) external initializer {\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function getChainID() public view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. It's 6 decimals\n    function deposit(\n        address _account, address[] memory _tokens, uint[] memory _USDTAmts\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\n        require(_account != address(0), \"Invalid account\");\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _USDTAmts.length, \"Not match array length\");\n\n        uint k = 10 ** (usdtDecimals - 6);\n        uint USDTAmt;\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDTAmts[i] = _USDTAmts[i] * k;\n            USDTAmt += _USDTAmts[i];\n        }\n        require(0 < USDTAmt, \"Amounts must > 0\");\n\n        USDT.safeTransferFrom(_account, address(this), USDTAmt);\n\n        strategy.invest(_tokens, _USDTAmts);\n        emit Deposit(_account, USDTAmt, address(USDT));\n    }\n\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function withdrawPerc(address _account, uint _sharePerc) external onlyOwnerOrAdmin nonReentrant {\n        require(_sharePerc > 0, \"SharePerc must > 0\");\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        \n        uint USDTAmt;\n        if (!paused()) {\n            strategy.withdrawPerc(_sharePerc);\n            USDTAmt = USDT.balanceOf(address(this));\n        } else {\n            USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\n        }\n        USDT.safeTransfer(_account, USDTAmt);\n        emit Withdraw(_account, USDTAmt, address(USDT), _sharePerc);\n    }\n\n    function rebalance(uint _pid, uint _sharePerc, address _target) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromPool(_pid, _sharePerc);\n        if (0 < USDTAmt) {\n            address[] memory targets = new address[](1);\n            targets[0] = _target;\n            uint[] memory USDTAmts = new uint[](1);\n            USDTAmts[0] = USDTAmt;\n            strategy.invest(targets, USDTAmts);\n            emit Rebalance(_pid, _sharePerc, USDTAmt, _target);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _perc.length, \"Not match array length\");\n\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            uint totalPerc;\n            for (uint i = 0; i < poolCnt; i ++) {\n                totalPerc = _perc[i];\n            }\n\n            uint[] memory USMTAmts = new uint[](poolCnt);\n            for (uint i = 0; i < poolCnt; i ++) {\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\n            }\n\n            strategy.invest(_tokens, USMTAmts);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        // return priceOracle.getAssetPrice(address(USDT));\n        return (1e8, 8);\n    }\n\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\n        (tokens, pools) = strategy.getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint chainID = getChainID();\n        chainIDs = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            chainIDs[i] = chainID;\n        }\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if(USDTAmt > 0 && poolCnt > 0) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            uint _pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n            pools[0] += _pool;\n        }\n        return (chainIDs, tokens, pools);\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        if (paused()) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            return USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n        } else {\n            return strategy.getAllPoolInUSD();\n        }\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/bni/BNIVault.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./priceOracle/IPriceOracle.sol\";\n\ninterface IStrategy {\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromPool(uint pid, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ncontract BNIVault is ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    address public admin;\n    IStrategy public strategy;\n    IPriceOracle public priceOracle;\n\n    uint constant DENOMINATOR = 10000;\n    uint public profitFeePerc;\n    address public treasuryWallet;\n    uint public watermark; // In USD (18 decimals)\n    uint public fees; // In USD (18 decimals)\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint sharePerc);\n    event Rebalance(uint pid, uint sharePerc, uint amount, address target);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\n    event TransferredOutFees(uint fees, address token);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _strategy, address _priceOracle,\n        address _USDT\n    ) external initializer {\n        __Ownable_init();\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        strategy = IStrategy(_strategy);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        profitFeePerc = 2000;\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function getChainID() public view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. It's 6 decimals\n    function deposit(\n        address _account, address[] memory _tokens, uint[] memory _USDTAmts\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\n        require(_account != address(0), \"Invalid account\");\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _USDTAmts.length, \"Not match array length\");\n\n        uint k = 10 ** (usdtDecimals - 6);\n        uint USDTAmt;\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDTAmts[i] = _USDTAmts[i] * k;\n            USDTAmt += _USDTAmts[i];\n        }\n        require(0 < USDTAmt, \"Amounts must > 0\");\n\n        USDT.safeTransferFrom(_account, address(this), USDTAmt);\n\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\n        (uint newUSDTAmt, uint[] memory newUSDTAmts) = _transferOutFees(USDTAmt, _USDTAmts);\n        if (newUSDTAmt > 0) {\n            strategy.invest(_tokens, newUSDTAmts);\n        }\n        adjustWatermark(amtDeposit, true);\n\n        emit Deposit(_account, USDTAmt, address(USDT));\n    }\n\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function withdrawPerc(address _account, uint _sharePerc) external onlyOwnerOrAdmin nonReentrant {\n        require(_sharePerc > 0, \"SharePerc must > 0\");\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        \n        uint pool = getAllPoolInUSD();\n        uint withdrawAmt = pool * _sharePerc / 1e18;\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\n        uint USDTAmt;\n        if (!paused()) {\n            strategy.withdrawPerc(sharePerc);\n            USDTAmt = USDT.balanceOf(address(this));\n            adjustWatermark(withdrawAmt, false);\n        } else {\n            USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        }\n        USDT.safeTransfer(_account, USDTAmt);\n        emit Withdraw(_account, withdrawAmt, address(USDT), _sharePerc);\n    }\n\n    function rebalance(uint _pid, uint _sharePerc, address _target) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromPool(_pid, _sharePerc);\n        if (0 < USDTAmt) {\n            address[] memory targets = new address[](1);\n            targets[0] = _target;\n            uint[] memory USDTAmts = new uint[](1);\n            USDTAmts[0] = USDTAmt;\n            strategy.invest(targets, USDTAmts);\n            emit Rebalance(_pid, _sharePerc, USDTAmt, _target);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n        watermark = 0;\n    }\n\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _perc.length, \"Not match array length\");\n\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n            uint totalPerc;\n            for (uint i = 0; i < poolCnt; i ++) {\n                totalPerc = _perc[i];\n            }\n\n            uint[] memory USMTAmts = new uint[](poolCnt);\n            for (uint i = 0; i < poolCnt; i ++) {\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\n            }\n\n            strategy.invest(_tokens, USMTAmts);\n            adjustWatermark(amtDeposit, true);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n    function _collectProfitAndUpdateWatermark() private {\n        uint currentWatermark = strategy.getAllPoolInUSD();\n        uint lastWatermark = watermark;\n        uint fee;\n        if (currentWatermark > lastWatermark) {\n            uint profit = currentWatermark - lastWatermark;\n            fee = profit * profitFeePerc / DENOMINATOR;\n            fees += fee;\n            watermark = currentWatermark;\n        }\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        uint lastWatermark = watermark;\n        watermark = signs == true\n                    ? watermark + amount\n                    : (watermark > amount) ? watermark - amount : 0;\n        emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        if (!paused()) {\n            uint pool = strategy.getAllPoolInUSD();\n            uint _fees = fees;\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\n            strategy.withdrawPerc(sharePerc);\n        }\n        _transferOutFees(USDT.balanceOf(address(this)), new uint[](0));\n    }\n\n    function _transferOutFees(uint _USDTAmt, uint[] memory _USDTAmts) private returns (uint, uint[] memory) {\n        uint _fees = fees;\n        if (_fees != 0) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            uint FeeAmt = _fees * (10 ** USDTPriceDecimals) / ((10 ** (18-usdtDecimals)) * USDTPriceInUSD);\n\n            uint prevUSDTAmt = _USDTAmt;\n            uint poolCnt = _USDTAmts.length;\n            if (FeeAmt < _USDTAmt) {\n                _fees = 0;\n                _USDTAmt -= FeeAmt;\n            } else {\n                _fees -= (_USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals));\n                FeeAmt = _USDTAmt;\n                _USDTAmt = 0;\n            }\n            fees = _fees;\n\n            for (uint i = 0; i < poolCnt; i ++) {\n                _USDTAmts[i] = _USDTAmts[i] * _USDTAmt / prevUSDTAmt;\n            }\n\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\n        }\n        return (_USDTAmt, _USDTAmts);\n    }\n\n    function setStrategy(address _strategy) external onlyOwner {\n        strategy = IStrategy(_strategy);\n\n        if (USDT.allowance(address(this), address(strategy)) == 0) {\n            USDT.safeApprove(address(strategy), type(uint).max);\n        }\n    }\n\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\n        require(profitFeePerc < 3001, \"Profit fee cannot > 30%\");\n        profitFeePerc = _profitFeePerc;\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(address(USDT));\n    }\n\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\n        (tokens, pools) = strategy.getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint chainID = getChainID();\n        chainIDs = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            chainIDs[i] = chainID;\n        }\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if(USDTAmt > 0 && poolCnt > 0) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            uint _pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n            pools[0] += _pool;\n        }\n        return (chainIDs, tokens, pools);\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool;\n        if (paused()) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n        } else {\n            pool = strategy.getAllPoolInUSD();\n        }\n        return (pool > fees ? pool - fees : 0);\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/lci/LCIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIStrategyTest is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x1F326a8CA5399418a76eA0efa0403Cbb00790C67);\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n    IERC20Upgradeable public constant USDT_MAIN = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n    IERC20Upgradeable public constant USDC_MAIN = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD_MAIN = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\n\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    IL2Vault public USDTUSDCVault;\n    IL2Vault public USDTBUSDVault;\n    IL2Vault public USDCBUSDVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint constant USDTUSDCTargetPerc = 6000; // 60%\n    uint constant USDTBUSDTargetPerc = 2000; // 20%\n    uint constant USDCBUSDTargetPerc = 2000; // 20%\n\n    address public vault;\n\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\n        __Ownable_init();\n\n        USDTUSDCVault = _USDTUSDCVault;\n        USDTBUSDVault = _USDTBUSDVault;\n        USDCBUSDVault = _USDCBUSDVault;\n\n        // USDT.safeApprove(address(PnckRouter), type(uint).max);\n        // USDC.safeApprove(address(PnckRouter), type(uint).max);\n        // BUSD.safeApprove(address(PnckRouter), type(uint).max);\n\n        // USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\n        // USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\n        // USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\n\n        // USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\n        // USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\n        // USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        // USDTAmt = USDT.balanceOf(address(this));\n        \n        // uint[] memory pools = getEachPoolInUSD();\n        // uint pool = pools[0] + pools[1] + pools[2] + USDTAmt; // USDT's decimals is 18\n        // uint USDTUSDCTargetPool = pool * USDTUSDCTargetPerc / DENOMINATOR;\n        // uint USDTBUSDTargetPool = pool * USDTBUSDTargetPerc / DENOMINATOR;\n        // uint USDCBUSDTargetPool = pool * USDCBUSDTargetPerc / DENOMINATOR;\n\n        // // Rebalancing invest\n        // if (\n        //     USDTUSDCTargetPool > pools[0] &&\n        //     USDTBUSDTargetPool > pools[1] &&\n        //     USDCBUSDTargetPool > pools[2]\n        // ) {\n        //     _investUSDTUSDC(USDTUSDCTargetPool - pools[0]);\n        //     _investUSDTBUSD(USDTBUSDTargetPool - pools[1]);\n        //     _investUSDCBUSD(USDCBUSDTargetPool - pools[2]);\n        // } else {\n        //     uint furthest;\n        //     uint farmIndex;\n        //     uint diff;\n\n        //     if (USDTUSDCTargetPool > pools[0]) {\n        //         diff = USDTUSDCTargetPool - pools[0];\n        //         furthest = diff;\n        //         farmIndex = 0;\n        //     }\n        //     if (USDTBUSDTargetPool > pools[1]) {\n        //         diff = USDTBUSDTargetPool - pools[1];\n        //         if (diff > furthest) {\n        //             furthest = diff;\n        //             farmIndex = 1;\n        //         }\n        //     }\n        //     if (USDTBUSDTargetPool > pools[2]) {\n        //         diff = USDTBUSDTargetPool - pools[2];\n        //         if (diff > furthest) {\n        //             farmIndex = 2;\n        //         }\n        //     }\n\n        //     if (farmIndex == 0) _investUSDTUSDC(USDTAmt);\n        //     else if (farmIndex == 1) _investUSDTBUSD(USDTAmt);\n        //     else _investUSDCBUSD(USDTAmt);\n        // }\n\n        // emit TargetComposition(USDTUSDCTargetPool, USDTBUSDTargetPool, USDCBUSDTargetPool);\n        // emit CurrentComposition(pools[0], pools[1], pools[2]);\n    }\n\n\n    function _investUSDTUSDC(uint _usdtAmt) private {\n        uint _amt = _usdtAmt/2;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\n\n        USDTUSDCVault.deposit(lpTokens);\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDTBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\n\n        USDTBUSDVault.deposit(lpTokens);\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDCBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\n\n        USDCBUSDVault.deposit(lpTokens);\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        // uint USDTAmtBefore = USDT.balanceOf(address(this));\n        // _withdrawUSDTUSDC(sharePerc);\n        // _withdrawUSDTBUSD(sharePerc);\n        // _withdrawUSDCBUSD(sharePerc);\n        // USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTUSDCVault.withdraw(amount);\n\n            uint _amt = USDTUSDC.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtUSDC) = _removeLiquidity(address(USDT), address(USDC), _amt);\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTBUSDVault.withdraw(amount);\n\n            uint _amt = USDTBUSD.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtBUSD) = _removeLiquidity(address(USDT), address(BUSD), _amt);\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDCBUSDVault.withdraw(amount);\n\n            uint _amt = USDCBUSD.balanceOf(address(this));\n            (uint _amtUSDC, uint _amtBUSD) = _removeLiquidity(address(USDC), address(BUSD), _amt);\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\n    }\n\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        // require(sharePerc <= 1e18, \"Over 100%\");\n        // if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \n        // else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\n        // else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\n        // USDTAmt = USDT.balanceOf(address(this));\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        // _withdrawUSDTUSDC(1e18);\n        // _withdrawUSDTBUSD(1e18);\n        // _withdrawUSDCBUSD(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\n    }\n\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](3);\n        // pools[0] = getUSDTUSDCPoolInUSD();\n        // pools[1] = getUSDTBUSDPoolInUSD();\n        // pools[2] = getUSDCBUSDPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint[] memory pools = getEachPoolInUSD();\n        // return pools[0] + pools[1] + pools[2];\n        return USDT.balanceOf(address(this));\n    }\n\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2];\n        percentages = new uint[](3);\n        percentages[0] = allPool == 0 ? USDTUSDCTargetPerc : pools[0] * DENOMINATOR / allPool;\n        percentages[1] = allPool == 0 ? USDTBUSDTargetPerc : pools[1] * DENOMINATOR / allPool;\n        percentages[2] = allPool == 0 ? USDCBUSDTargetPerc : pools[2] * DENOMINATOR / allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        tokens = new address[](3);\n        tokens[0] = address(USDT_MAIN);\n        tokens[1] = address(USDC_MAIN);\n        tokens[2] = address(BUSD_MAIN);\n        percentages = new uint[](3);\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\n    }\n\n    function getAPR() external view returns (uint) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}