{
  "address": "0x09BE4DF001Af1944214A1BF2883E7EbDc79d174a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        }
      ],
      "name": "AdjustWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reqId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedCount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMulti",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollectProfitAndUpdateWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stAmount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stAmount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TransferredOutFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reqId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bufferedDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bufferedWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reqId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_reqIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMulti",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimedCount",
          "type": "uint256"
        },
        {
          "internalType": "bool[]",
          "name": "_claimed",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimUnbonded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectProfitAndUpdateWatermark",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPendingRedeems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_redeems",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseAprData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBufferedDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmergencyUnbondings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInvestedStTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_stAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "getPoolByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stAmount",
          "type": "uint256"
        }
      ],
      "name": "getPooledTokenByStToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesByPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getStTokenByPooledToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenUnbonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reqId",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_claimable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stTokenAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requestTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_waitForTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_stNEARVault",
          "type": "address"
        }
      ],
      "name": "initialize1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCollectProfitTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastInvestTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRedeemTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaPool",
      "outputs": [
        {
          "internalType": "contract IMetaPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minInvestAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRedeemAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IStVaultNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRedeems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetApr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yieldFeePerc",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "_stNEARVault",
          "type": "address"
        }
      ],
      "name": "setL2Vault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        }
      ],
      "name": "setNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minInvestAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRedeemAmount",
          "type": "uint256"
        }
      ],
      "name": "setStakingAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unbondingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_investInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redeemInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_oneEpoch",
          "type": "uint256"
        }
      ],
      "name": "setStakingPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stNEARVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unbondingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "watermark",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reqId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x514ba7048883294858bfe63e06cdd3837253cc333855c79c03e0574e0cc85f8a",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x09BE4DF001Af1944214A1BF2883E7EbDc79d174a",
    "transactionIndex": 0,
    "gasUsed": "4838394",
    "logsBloom": "0x
    "blockHash": "0xba3972f1f2f9f041b476cf64af0eaa11e930702880b9964970910d3276fb4fc4",
    "transactionHash": "0x514ba7048883294858bfe63e06cdd3837253cc333855c79c03e0574e0cc85f8a",
    "logs": [],
    "blockNumber": 96854376,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6644b0a9238d655c0d3bed5065c63e58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"}],\"name\":\"AdjustWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedCount\",\"type\":\"uint256\"}],\"name\":\"ClaimMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollectProfitAndUpdateWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransferredOutFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferedDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferedWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reqId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_reqIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedCount\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"_claimed\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUnbonded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfitAndUpdateWatermark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPendingRedeems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeems\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseAprData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferedDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyUnbondings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestedStTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"getPoolByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stAmount\",\"type\":\"uint256\"}],\"name\":\"getPooledTokenByStToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSharesByPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStTokenByPooledToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenUnbonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reqId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_claimable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stTokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waitForTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_stNEARVault\",\"type\":\"address\"}],\"name\":\"initialize1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCollectProfitTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInvestTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRedeemTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaPool\",\"outputs\":[{\"internalType\":\"contract IMetaPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRedeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IStVaultNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRedeems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldFeePerc\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"_stNEARVault\",\"type\":\"address\"}],\"name\":\"setL2Vault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minInvestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRedeemAmount\",\"type\":\"uint256\"}],\"name\":\"setStakingAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oneEpoch\",\"type\":\"uint256\"}],\"name\":\"setStakingPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stNEARVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reqId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claim(uint256)\":{\"details\":\"claim token with NFT token\",\"returns\":{\"_amount\":\"is the amount of claimed token.\"}},\"claimMulti(uint256[])\":{\"details\":\"claim token with NFT tokens\",\"returns\":{\"_amount\":\"is the amount of claimed token.\",\"_claimed\":\"is the flag indicating whether the token is claimed.\",\"_claimedCount\":\"is the count of reqIds that are claimed.\"}},\"claimUnbonded()\":{\"details\":\"claim the unbonded tokens from the staking pool. It's called by admin.\"},\"collectProfitAndUpdateWatermark()\":{\"details\":\"collect profit and update the watermark\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"details\":\"deposit `_amount` of token.\"},\"depositETH()\":{\"details\":\"deposit the native asset.\"},\"emergencyPendingRedeems()\":{\"details\":\"the total amount of emergency withdrawal stToken that is not yet requested to the staking pool.\"},\"emergencyRedeem()\":{\"details\":\"In emergency mode, redeem the rest of stTokens. Especially it's needed for stNEAR because the MetaPool has a buffer limit.\"},\"getAPR()\":{\"returns\":{\"_0\":\"the APR in the vault. It's scaled by 1e18.\"}},\"getAllPool()\":{\"details\":\"it doesn't include the unbonding stTokens according to the burnt shares.\"},\"getAllPoolInUSD()\":{\"returns\":{\"_0\":\"the total USD value of tokens in the vault.\"}},\"getPoolByShares(uint256)\":{\"returns\":{\"_0\":\"the amount of token that corresponds to `_shares` of shares.\"}},\"getPooledTokenByStToken(uint256)\":{\"details\":\"wNearSwapFee can be changed after redeem requested.\",\"params\":{\"_stAmount\":\"Amount of stTokens\"}},\"getSharesByPool(uint256)\":{\"returns\":{\"_0\":\"the amount of shares that corresponds to `_amount` of token.\"}},\"getStTokenByPooledToken(uint256)\":{\"details\":\"stNearSwapFee can be changed after redeem requested.\",\"params\":{\"_amount\":\"Amount of tokens\"}},\"getTokenUnbonded()\":{\"returns\":{\"_0\":\"the unbonded token amount that is claimable from the staking pool.\"}},\"getWithdrawRequest(uint256)\":{\"returns\":{\"_claimable\":\"specifys whether user can claim tokens for it.\",\"_requestTs\":\"is timestmap when withdrawal requested.\",\"_stTokenAmt\":\"is amount of stToken to redeem.\",\"_tokenAmt\":\"is amount of token to claim.\",\"_waitForTs\":\"is timestamp to wait for.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"invest()\":{\"details\":\"stake the buffered deposits into the staking pool. It's called by admin.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem()\":{\"details\":\"redeem the requested withdrawals from the staking pool. It's called by admin.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_yieldFeePerc\":\"deposit fee percentage. 2000 for 20%\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"request a withdrawal that corresponds to `_shares` of shares.\",\"returns\":{\"_amount\":\"is the amount of withdrawn token.\",\"_reqId\":\"is the NFT token id indicating the request for rest of withdrawal. 0 if no request is made.\"}},\"withdrawFees()\":{\"details\":\"transfer out fees.\"},\"yield()\":{\"details\":\"take rewards and reinvest them. It's called by admin.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw()\":{\"notice\":\"Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\"},\"getPendingRewards()\":{\"notice\":\"Returns the pending rewards in USD.\"},\"reinvest()\":{\"notice\":\"Unpauses deposit, yield, invest functions, and invests funds.\"},\"setFee(uint256)\":{\"notice\":\"Function to set deposit and yield fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stVaults/meta/AuroraStNEARVaultTest.sol\":\"AuroraStNEARVaultTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstantTest {\\n    uint internal constant CHAINID = 1313161555;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802; // Should be replaced with testnet address\\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n}\\n\",\"keccak256\":\"0xa19460fa3f59876ed69f452358a979f00da1c5edb773fc80ecf3dd32ca91c3dc\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/stVaults/BasicStVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../bni/priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../interfaces/IStVault.sol\\\";\\nimport \\\"../../interfaces/IStVaultNFT.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"../../libs/Token.sol\\\";\\n\\ncontract BasicStVault is IStVault,\\n    ERC20Upgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint public yieldFee;\\n    uint public watermark;\\n    uint public fees;\\n\\n    address public treasuryWallet;\\n    address public admin;\\n    IPriceOracle public priceOracle;\\n    IStVaultNFT public nft;\\n\\n    IERC20Upgradeable public token;\\n    IERC20Upgradeable public stToken;\\n    uint8 internal tokenDecimals;\\n    uint8 internal stTokenDecimals;\\n    uint internal oneToken;\\n    uint internal oneStToken;\\n\\n    uint public bufferedDeposits;\\n    uint public pendingWithdrawals;\\n    uint public pendingRedeems;\\n    uint internal emergencyUnbondings;\\n\\n    uint public unbondingPeriod;\\n    uint public minInvestAmount;\\n    uint public minRedeemAmount;\\n\\n    uint public lastInvestTs;\\n    uint public investInterval;\\n    uint public lastRedeemTs;\\n    uint public redeemInterval;\\n    uint public lastCollectProfitTs;\\n    uint public oneEpoch;\\n\\n    mapping(address => uint) depositedBlock;\\n    mapping(uint => WithdrawRequest) nft2WithdrawRequest;\\n\\n    uint baseApr;\\n    uint baseTokenRate;\\n    uint baseAprLastUpdate;\\n\\n    event Deposit(address user, uint amount, uint shares);\\n    event Withdraw(address user, uint shares, uint amount, uint reqId, uint pendingAmount);\\n    event Claim(address user, uint reqId, uint amount);\\n    event ClaimMulti(address user, uint amount, uint claimedCount);\\n    event Invest(uint amount);\\n    event Redeem(uint stAmount);\\n    event EmergencyWithdraw(uint stAmount);\\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\\n    event TransferredOutFees(uint fees, address token);\\n\\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == admin, \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        string memory _name, string memory _symbol,\\n        address _treasury, address _admin,\\n        address _priceOracle,\\n        address _token, address _stToken\\n    ) public virtual initializer {\\n        require(_treasury != address(0), \\\"treasury invalid\\\");\\n\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __ERC20_init_unchained(_name, _symbol);\\n\\n        yieldFee = 2000; //20%\\n        treasuryWallet = _treasury;\\n        admin = _admin;\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        token = IERC20Upgradeable(_token);\\n        stToken = IERC20Upgradeable(_stToken);\\n        tokenDecimals = _assetDecimals(address(token));\\n        stTokenDecimals = IERC20UpgradeableExt(address(stToken)).decimals();\\n        oneToken = 10**tokenDecimals;\\n        oneStToken = 10**stTokenDecimals;\\n\\n        minInvestAmount = 1;\\n        minRedeemAmount = 1;\\n\\n        _updateApr();\\n    }\\n\\n    ///@notice Function to set deposit and yield fee\\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\\n    function setFee(uint _yieldFeePerc) external onlyOwner{\\n        require(_yieldFeePerc < 3001, \\\"Yield Fee cannot > 30%\\\");\\n        yieldFee = _yieldFeePerc;\\n    }\\n\\n    function setTreasuryWallet(address _wallet) external onlyOwner {\\n        require(_wallet != address(0), \\\"wallet invalid\\\");\\n        treasuryWallet = _wallet;\\n    }\\n\\n    function setAdmin(address _newAdmin) external onlyOwner{\\n        admin = _newAdmin;\\n    }\\n\\n    function setNFT(address _nft) external onlyOwner {\\n        require(address(nft) == address(0), \\\"Already set\\\");\\n        nft = IStVaultNFT(_nft);\\n    }\\n\\n    function setStakingPeriods(\\n        uint _unbondingPeriod,\\n        uint _investInterval,\\n        uint _redeemInterval,\\n        uint _oneEpoch\\n    ) external onlyOwner {\\n        unbondingPeriod = _unbondingPeriod;\\n        investInterval = _investInterval;\\n        redeemInterval = _redeemInterval;\\n        oneEpoch = _oneEpoch;\\n    }\\n\\n    function setStakingAmounts(uint _minInvestAmount, uint _minRedeemAmount) external virtual onlyOwner {\\n        require(_minInvestAmount > 0, \\\"minInvestAmount must be > 0\\\");\\n        require(_minRedeemAmount > 0, \\\"minRedeemAmount must be > 0\\\");\\n        minInvestAmount = _minInvestAmount;\\n        minRedeemAmount = _minRedeemAmount;\\n    }\\n\\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositETH() external payable nonReentrant whenNotPaused{\\n        _deposit(msg.sender, msg.value);\\n    }\\n\\n    function _deposit(address _account, uint _amount) internal {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        depositedBlock[_account] = block.number;\\n\\n        if (address(token) != Const.NATIVE_ASSET) {\\n            token.safeTransferFrom(_account, address(this), _amount);\\n        } else {\\n            // The native asset is already received.\\n        }\\n        bufferedDeposits += _amount;\\n\\n        uint pool = getAllPool() - _amount;\\n        uint _totalSupply = totalSupply();\\n        uint _shares = (pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / pool;\\n\\n        _mint(_account, _shares);\\n        adjustWatermark(_amount, true);\\n        emit Deposit(_account, _amount, _shares);\\n    }\\n\\n    function withdraw(uint _shares) external nonReentrant returns (uint _amount, uint _reqId) {\\n        require(_shares > 0, \\\"Invalid Amount\\\");\\n        require(balanceOf(msg.sender) >= _shares, \\\"Not enough balance\\\");\\n        require(depositedBlock[msg.sender] != block.number, \\\"Withdraw within same block\\\");\\n\\n        uint withdrawAmt = getPoolByShares(_shares);\\n        _burn(msg.sender, _shares);\\n        adjustWatermark(withdrawAmt, false);\\n\\n        uint _bufferedDeposits = getBufferedDeposits();\\n        uint _fees = fees;\\n        uint _buffered = (_bufferedDeposits <= _fees) ? 0 : _bufferedDeposits - fees;\\n\\n        if (_buffered >= withdrawAmt) {\\n            _amount = withdrawAmt;\\n            withdrawAmt = 0;\\n        } else {\\n            _amount = _buffered;\\n            withdrawAmt -= _buffered;\\n        }\\n\\n        bufferedDeposits = _bufferedDeposits - _amount;\\n\\n        if (withdrawAmt > 0) {\\n            uint tokenPerStToken = getPooledTokenByStToken(oneStToken);\\n            uint stTokenAmt = oneStToken * withdrawAmt / tokenPerStToken;\\n            (uint withdrawnStAmount, uint withdrawnAmount) = withdrawStToken(stTokenAmt);\\n            if (withdrawnStAmount > 0) {\\n                _amount += withdrawnAmount;\\n                stTokenAmt -= withdrawnStAmount;\\n            }\\n            withdrawAmt = tokenPerStToken * stTokenAmt / oneStToken;\\n\\n            if (stTokenAmt > 0) {\\n                pendingWithdrawals += withdrawAmt;\\n                if (paused() == false) {\\n                    pendingRedeems += stTokenAmt;\\n                } else {\\n                    // We reduce the emergency bonding because the share is burnt.\\n                    uint _emergencyUnbondings = getEmergencyUnbondings();\\n                    emergencyUnbondings = (_emergencyUnbondings <= stTokenAmt) ? 0 : _emergencyUnbondings - stTokenAmt;\\n                }\\n\\n                _reqId = nft.mint(msg.sender);\\n                nft2WithdrawRequest[_reqId] = WithdrawRequest({\\n                    tokenAmt: withdrawAmt,\\n                    stTokenAmt: stTokenAmt,\\n                    requestTs: block.timestamp\\n                });\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            _transferOutToken(msg.sender, _amount);\\n        }\\n        emit Withdraw(msg.sender, _shares, _amount, _reqId, withdrawAmt);\\n    }\\n\\n    function withdrawStToken(uint _stAmountToWithdraw) internal virtual returns (\\n        uint _withdrawnStAmount,\\n        uint _withdrawnAmount\\n    ) {\\n    }\\n\\n    function claim(uint _reqId) external nonReentrant returns (uint _amount) {\\n        require(nft.isApprovedOrOwner(msg.sender, _reqId), \\\"Not owner\\\");\\n        WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\\n\\n        require(block.timestamp >= (usersRequest.requestTs + unbondingPeriod), \\\"Not able to claim yet\\\");\\n\\n        uint tokenAmt = usersRequest.tokenAmt;\\n        _amount = _getClaimableAmount(bufferedWithdrawals(), tokenAmt);\\n        require(_amount > 0, \\\"No enough token\\\");\\n\\n        nft.burn(_reqId);\\n        pendingWithdrawals -= tokenAmt;\\n\\n        _transferOutToken(msg.sender, _amount);\\n        emit Claim(msg.sender, _reqId, _amount);\\n    }\\n\\n    function claimMulti(uint[] memory _reqIds) external nonReentrant returns (\\n        uint _amount,\\n        uint _claimedCount,\\n        bool[] memory _claimed\\n    ) {\\n        uint buffered = bufferedWithdrawals();\\n        uint amount;\\n        uint length = _reqIds.length;\\n        _claimed = new bool[](length);\\n\\n        for (uint i = 0; i < length; i++) {\\n            uint _reqId = _reqIds[i];\\n            if (nft.isApprovedOrOwner(msg.sender, _reqId) == false) continue;\\n\\n            WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\\n            if (block.timestamp < (usersRequest.requestTs + unbondingPeriod)) continue;\\n\\n            uint tokenAmt = usersRequest.tokenAmt;\\n            amount = _getClaimableAmount(buffered, tokenAmt);\\n            if (amount == 0) continue;\\n\\n            _amount += amount;\\n            buffered -= amount;\\n            pendingWithdrawals -= tokenAmt;\\n\\n            nft.burn(_reqId);\\n            _claimedCount ++;\\n            _claimed[i] = true;\\n        }\\n\\n        if (_amount > 0) {\\n            _transferOutToken(msg.sender, _amount);\\n            emit ClaimMulti(msg.sender, _amount, _claimedCount);\\n        }\\n    }\\n\\n    function invest() external onlyOwnerOrAdmin whenNotPaused {\\n        _investInternal();\\n    }\\n\\n    function _investInternal() internal {\\n        _collectProfitAndUpdateWatermark();\\n        uint _buffered = _transferOutFees();\\n        if (_buffered >= minInvestAmount && block.timestamp >= (lastInvestTs + investInterval)) {\\n            uint _invested = _invest(_buffered);\\n            bufferedDeposits = _buffered - _invested;\\n            lastInvestTs = block.timestamp;\\n            emit Invest(_invested);\\n        }\\n    }\\n\\n    function _invest(uint _amount) internal virtual returns (uint _invested) {}\\n\\n    function redeem() external onlyOwnerOrAdmin whenNotPaused {\\n        uint redeemed = _redeemInternal(pendingRedeems);\\n        pendingRedeems -= redeemed;\\n    }\\n\\n    function _redeemInternal(uint _stAmount) internal returns (uint _redeemed) {\\n        require(_stAmount >= minRedeemAmount, \\\"too small\\\");\\n        require(block.timestamp >= (lastRedeemTs + redeemInterval), \\\"Not able to redeem yet\\\");\\n\\n        _redeemed = _redeem(_stAmount);\\n        emit Redeem(_redeemed);\\n    }\\n\\n    function _redeem(uint _stAmount) internal virtual returns (uint _redeemed) {}\\n\\n    function claimUnbonded() external onlyOwnerOrAdmin {\\n        _claimUnbonded();\\n    }\\n\\n    function _claimUnbonded() internal virtual {}\\n\\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\\n        _pause();\\n        _yield();\\n\\n        _emergencyWithdrawInternal();\\n    }\\n\\n    function _emergencyWithdrawInternal() internal {\\n        uint _pendingRedeems = pendingRedeems;\\n        uint redeemed = _emergencyWithdraw(_pendingRedeems);\\n        pendingRedeems = (_pendingRedeems <= redeemed) ? 0 : _pendingRedeems - redeemed;\\n        emit EmergencyWithdraw(redeemed);\\n    }\\n\\n    function _emergencyWithdraw(uint _pendingRedeems) internal virtual returns (uint _redeemed) {}\\n\\n    function emergencyPendingRedeems() external view returns (uint _redeems) {\\n        if (paused()) {\\n            _redeems = stToken.balanceOf(address(this));\\n        }\\n    }\\n\\n    function emergencyRedeem() external onlyOwnerOrAdmin whenPaused {\\n        _emergencyWithdrawInternal();\\n    }\\n\\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\\n        require(getEmergencyUnbondings() == 0, \\\"Emergency unbonding is not finished\\\");\\n        require(getTokenUnbonded() == 0, \\\"claimUnbonded should be called\\\");\\n        _unpause();\\n\\n        emergencyUnbondings = 0;\\n        _investInternal();\\n    }\\n\\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\\n        _yield();\\n    }\\n\\n    function _yield() internal virtual {}\\n\\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\\n        _collectProfitAndUpdateWatermark();\\n    }\\n\\n    function _collectProfitAndUpdateWatermark() private {\\n        uint currentWatermark = getAllPool();\\n        uint lastWatermark = watermark;\\n        uint fee;\\n        if (currentWatermark > lastWatermark) {\\n            uint profit = currentWatermark - lastWatermark;\\n            fee = profit * yieldFee / Const.DENOMINATOR;\\n            fees += fee;\\n            watermark = currentWatermark - fee;\\n        }\\n        lastCollectProfitTs = block.timestamp;\\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\\n    }\\n\\n    /// @param signs True for positive, false for negative\\n    function adjustWatermark(uint amount, bool signs) private {\\n        uint lastWatermark = watermark;\\n        watermark = signs == true\\n                    ? watermark + amount\\n                    : (watermark > amount) ? watermark - amount : 0;\\n        emit AdjustWatermark(watermark, lastWatermark);\\n    }\\n\\n    function withdrawFees() external onlyOwnerOrAdmin {\\n        _transferOutFees();\\n    }\\n\\n    function _transferOutFees() internal returns (uint _tokenAmt) {\\n        _tokenAmt = getBufferedDeposits();\\n        uint _fees = fees;\\n        if (_fees != 0 && _tokenAmt != 0) {\\n            uint feeAmt = _fees;\\n            if (feeAmt < _tokenAmt) {\\n                _fees = 0;\\n                _tokenAmt -= feeAmt;\\n            } else {\\n                _fees -= _tokenAmt;\\n                feeAmt = _tokenAmt;\\n                _tokenAmt = 0;\\n            }\\n            fees = _fees;\\n            bufferedDeposits = _tokenAmt;\\n\\n            _transferOutToken(treasuryWallet, feeAmt);\\n            emit TransferredOutFees(feeAmt, address(token)); // Decimal follows token\\n        }\\n    }\\n\\n    function _transferOutToken(address _to, uint _amount) internal {\\n        (address(token) != Const.NATIVE_ASSET)\\n            ? token.safeTransfer(_to, _amount)\\n            : Token.safeTransferETH(_to, _amount);\\n    }\\n\\n    function _tokenBalanceOf(address _account) internal view returns (uint) {\\n        return (address(token) != Const.NATIVE_ASSET)\\n            ? token.balanceOf(_account)\\n            : _account.balance;\\n    }\\n\\n    function _assetDecimals(address _asset) internal view returns (uint8 _decimals) {\\n        _decimals = (_asset == Const.NATIVE_ASSET) ? 18 : IERC20UpgradeableExt(_asset).decimals();\\n    }\\n\\n    function _getFreeBufferedDeposits() internal view returns (uint _buffered) {\\n        uint balance = _tokenBalanceOf(address(this));\\n        uint _pendingWithdrawals = pendingWithdrawals;\\n        // While unbonding, the balance could be less than pendingWithdrawals.\\n        // After unbonded, the balance could be greater than pendingWithdrawals\\n        //  because the rewards are accumulated in unbonding period on some staking pools.\\n        //  In this case, the _buffered can be greater than bufferedDeposits.\\n        // And also if the emergency withdrawal is unbonded, the _buffered will be greater than bufferedDeposits.\\n        _buffered = (balance > _pendingWithdrawals) ? balance - _pendingWithdrawals : 0;\\n    }\\n\\n    function getBufferedDeposits() public virtual view returns (uint) {\\n        return MathUpgradeable.max(bufferedDeposits, _getFreeBufferedDeposits());\\n    }\\n\\n    function bufferedWithdrawals() public view returns (uint) {\\n        return _tokenBalanceOf(address(this)) - bufferedDeposits;\\n    }\\n\\n    function getEmergencyUnbondings() public virtual view returns (uint) {\\n        return emergencyUnbondings;\\n    }\\n\\n    function getInvestedStTokens() public virtual view returns (uint _stAmount) {\\n        return 0;\\n    }\\n\\n    ///@param _amount Amount of tokens\\n    function getStTokenByPooledToken(uint _amount) public virtual view returns(uint) {\\n        return Token.changeDecimals(_amount, tokenDecimals, stTokenDecimals);\\n    }\\n\\n    ///@param _stAmount Amount of stTokens\\n    function getPooledTokenByStToken(uint _stAmount) public virtual view returns(uint) {\\n        return _stAmount * oneToken / getStTokenByPooledToken(oneToken);\\n    }\\n\\n    ///@dev it doesn't include the unbonding stTokens according to the burnt shares.\\n    function getAllPool() public virtual view returns (uint _pool) {\\n        if (paused() == false) {\\n            uint stBalance = stToken.balanceOf(address(this))\\n                            + getInvestedStTokens()\\n                            - pendingRedeems;\\n            if (stBalance > 0) {\\n                _pool = getPooledTokenByStToken(stBalance);\\n            }\\n            _pool += bufferedDeposits;\\n            _pool -= fees;\\n        } else {\\n            uint stBalance = stToken.balanceOf(address(this))\\n                            + getInvestedStTokens()\\n                            + getEmergencyUnbondings()\\n                            - pendingRedeems;\\n            if (stBalance > 0) {\\n                _pool = getPooledTokenByStToken(stBalance);\\n            }\\n            // If the emergency withdrawal is unbonded,\\n            //  then getEmergencyUnbondings() is less than emergencyUnbondings,\\n            //  and _getFreeBufferedDeposits will be greater than bufferedDeposits.\\n            _pool += _getFreeBufferedDeposits();\\n            _pool -= fees;\\n        }\\n    }\\n\\n    function getSharesByPool(uint _amount) public view returns (uint) {\\n        uint pool = getAllPool();\\n        return (pool == 0) ? _amount : _amount * totalSupply() / pool;\\n    }\\n\\n    function getPoolByShares(uint _shares) public view returns (uint) {\\n        uint _totalSupply = totalSupply();\\n        return (_totalSupply == 0) ? _shares : _shares * getAllPool() / _totalSupply;\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint pool = getAllPool();\\n        return getValueInUSD(address(token), pool);\\n    }\\n\\n    ///@return the value in USD. it's scaled by 1e18;\\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\\n        uint8 _decimals = _assetDecimals(_asset);\\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\\n    }\\n\\n    ///@notice Returns the pending rewards in USD.\\n    function getPendingRewards() public virtual view returns (uint) {\\n        return 0;\\n    }\\n\\n    function getAPR() public virtual view returns (uint) {\\n        (uint _baseApr,,) = getBaseApr();\\n        return _baseApr;\\n    }\\n\\n    function resetApr() external onlyOwner {\\n        _resetApr();\\n        _updateApr();\\n    }\\n\\n    function _resetApr() internal virtual {\\n        baseApr = 0;\\n        baseTokenRate = 0;\\n        baseAprLastUpdate = 0;\\n    }\\n\\n    function _updateApr() internal virtual {\\n        (uint _baseApr, uint _baseTokenRate, bool _update) = getBaseApr();\\n        if (_update) {\\n            baseApr = _baseApr;\\n            baseTokenRate = _baseTokenRate;\\n            baseAprLastUpdate = block.timestamp;\\n        }\\n    }\\n\\n    function getBaseApr() public view returns (uint, uint, bool) {\\n        uint _baseApr = baseApr;\\n        uint _baseTokenRate = baseTokenRate;\\n        uint _baseAprLastUpdate = baseAprLastUpdate;\\n\\n        if (_baseApr == 0 || (_baseAprLastUpdate + 1 weeks) <= block.timestamp) {\\n            uint newTokenRate = getPoolByShares(1e18);\\n            if (0 < _baseTokenRate && _baseTokenRate < newTokenRate) {\\n                uint newApr = (newTokenRate-_baseTokenRate) * Const.YEAR_IN_SEC * Const.APR_SCALE\\n                            / (_baseTokenRate * (block.timestamp-_baseAprLastUpdate));\\n                return (newApr, newTokenRate, true);\\n            } else {\\n                return (0, newTokenRate, true);\\n            }\\n        } else {\\n            return (_baseApr, _baseTokenRate, false);\\n        }\\n    }\\n\\n    function getBaseAprData() public view returns (uint, uint, uint) {\\n        return (baseApr, baseTokenRate, baseAprLastUpdate);\\n    }\\n\\n    function getWithdrawRequest(uint _reqId) external view returns (\\n        bool _claimable,\\n        uint _tokenAmt, uint _stTokenAmt,\\n        uint _requestTs, uint _waitForTs\\n    ) {\\n        WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\\n        _tokenAmt = usersRequest.tokenAmt;\\n        _stTokenAmt = usersRequest.stTokenAmt;\\n        _requestTs = usersRequest.requestTs;\\n\\n        uint endTs = _requestTs + unbondingPeriod;\\n        if (endTs > block.timestamp) {\\n            _waitForTs = endTs - block.timestamp;\\n        } else if (_getClaimableAmount(bufferedWithdrawals(), _tokenAmt) > 0) {\\n            _claimable = true;\\n        }\\n    }\\n\\n    function _getClaimableAmount(uint _buffered, uint _withdrawAmt) internal view returns (uint) {\\n        // The tokens withdrawn from the staking pool can be slightly less than the calculated withdrawAmt.\\n        uint minWithdrawAmt = _withdrawAmt * (1e8 - 1) / 1e8;\\n        return (_buffered < minWithdrawAmt) ? 0 : MathUpgradeable.min(_buffered, _withdrawAmt);\\n    }\\n\\n    function getTokenUnbonded() public virtual view returns (uint) {\\n        return 0;\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[20] private __gap;\\n}\\n\",\"keccak256\":\"0x547b5583e839d8d327b01207b4697ad299fb3ebb36d334ed9b67458f9e10aa7c\",\"license\":\"MIT\"},\"contracts/stVaults/meta/AuroraStNEARVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n//\\n///@notice The AuroraStNEARVault contract stakes wNEAR tokens into stNEAR on Aurora.\\n///@dev https://metapool.gitbook.io/master/developers-1/contract-adresses\\n///@dev https://metapool.app/dapp/mainnet/metapool-aurora/\\n//\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../BasicStVault.sol\\\";\\nimport \\\"../../bni/constant/AuroraConstant.sol\\\";\\nimport \\\"../../../interfaces/IL2Vault.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\n\\ninterface IMetaPool {\\n    function swapwNEARForstNEAR(uint _amount) external;\\n    function swapstNEARForwNEAR(uint _amount) external;\\n    ///@dev price of stNEAR in wNEAR.\\n    function stNearPrice() external view returns (uint);\\n    function wNearSwapFee() external view returns (uint16);\\n    function stNearSwapFee() external view returns (uint16);\\n}\\n\\ncontract AuroraStNEARVault is BasicStVault {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IMetaPool public metaPool;\\n\\n    IL2Vault public stNEARVault;\\n\\n    function initialize1(\\n        address _treasury, address _admin,\\n        address _priceOracle,\\n        IL2Vault _stNEARVault\\n    ) public virtual initializer {\\n        super.initialize(\\n            \\\"STI Staking WNEAR\\\", \\\"stiStNEAR\\\",\\n            _treasury, _admin,\\n            _priceOracle,\\n            AuroraConstant.WNEAR,\\n            AuroraConstant.stNEAR\\n        );\\n\\n        metaPool = IMetaPool(0x534BACf1126f60EA513F796a3377ff432BE62cf9);\\n\\n        // The backend will call redeem per 1 hour.\\n        unbondingPeriod = 1 hours;\\n        minInvestAmount = oneToken;\\n        // The stNEAR buffer is replenished automatically every 5 minutes.\\n        investInterval = 5 minutes;\\n        // The wNEAR buffer is replenished automatically every 5 minutes.\\n        redeemInterval = 5 minutes;\\n        oneEpoch = 12 hours;\\n\\n        stNEARVault = _stNEARVault;\\n\\n        token.safeApprove(address(metaPool), type(uint).max);\\n        stToken.safeApprove(address(metaPool), type(uint).max);\\n        stToken.safeApprove(address(stNEARVault), type(uint).max);\\n    }\\n\\n    function _invest(uint _amount) internal override returns (uint _invested) {\\n        uint stBuffer = stToken.balanceOf(address(metaPool));\\n        if (stBuffer > 0) {\\n            uint stNearAmount = getStTokenByPooledToken(_amount);\\n            if (stBuffer < stNearAmount) {\\n                _invested = _amount * stBuffer / stNearAmount;\\n            } else {\\n                _invested = _amount;\\n            }\\n            metaPool.swapwNEARForstNEAR(_invested);\\n\\n            investStNEAR();\\n        }\\n    }\\n\\n    function _redeem(uint _stAmount) internal override returns (uint _redeemed) {\\n        uint buffer = token.balanceOf(address(metaPool));\\n        if (buffer > 0) {\\n            uint wNearAmount = getPooledTokenByStToken(_stAmount);\\n            if (buffer < wNearAmount) {\\n                _redeemed = _stAmount * buffer / wNearAmount;\\n            } else {\\n                _redeemed = _stAmount;\\n            }\\n\\n            uint stBalance = stToken.balanceOf(address(this));\\n            if (stBalance < _redeemed) {\\n                withdrawStWNEAR(_redeemed - stBalance);\\n                stBalance = stToken.balanceOf(address(this));\\n            }\\n\\n            if (stBalance > 0) {\\n                // The withdrawn stNEARs can be less than the calcualted _redeemed.\\n                metaPool.swapstNEARForwNEAR(MathUpgradeable.min(_redeemed, stBalance));\\n            } else {\\n                // Because _stAmount may be a calculation delta in withdraw function,\\n                // it will reduce the pendingRedeems even though no redeeming on the staking pool.\\n            }\\n        }\\n    }\\n\\n    function withdrawStToken(uint _stAmountToWithdraw) internal override returns (\\n        uint _withdrawnStAmount,\\n        uint _withdrawnAmount\\n    ) {\\n        uint balanceBefore = token.balanceOf(address(this));\\n        _withdrawnStAmount = _redeem(_stAmountToWithdraw);\\n        _withdrawnAmount = token.balanceOf(address(this)) - balanceBefore;\\n    }\\n\\n    function _emergencyWithdraw(uint _pendingRedeems) internal override returns (uint _redeemed) {\\n        _pendingRedeems;\\n        withdrawStWNEAR(type(uint).max);\\n        uint stBalance = stToken.balanceOf(address(this));\\n        if (stBalance >= minRedeemAmount) {\\n            _redeemed = _redeem(stBalance);\\n        }\\n    }\\n\\n    function getInvestedStTokens() public override view returns (uint _stAmount) {\\n        uint balance = stNEARVault.balanceOf(address(this));\\n        if (balance > 0) {\\n            _stAmount = stNEARVault.getAllPool() * balance / stNEARVault.totalSupply();\\n        }\\n    }\\n\\n    ///@dev stNearSwapFee can be changed after redeem requested.\\n    ///@param _amount Amount of tokens\\n    function getStTokenByPooledToken(uint _amount) public override view returns(uint) {\\n        uint stNearAmount = _amount * oneStToken / metaPool.stNearPrice();\\n        uint feeAmount = (stNearAmount * metaPool.stNearSwapFee()) / Const.DENOMINATOR;\\n        return stNearAmount - feeAmount;\\n    }\\n\\n    ///@dev wNearSwapFee can be changed after redeem requested.\\n    ///@param _stAmount Amount of stTokens\\n    function getPooledTokenByStToken(uint _stAmount) public override view returns(uint) {\\n        uint wNearAmount = _stAmount * metaPool.stNearPrice() / oneStToken;\\n        uint feeAmount = wNearAmount * metaPool.wNearSwapFee() / Const.DENOMINATOR;\\n        return wNearAmount - feeAmount;\\n    }\\n\\n    function setL2Vault(IL2Vault _stNEARVault) external onlyOwner {\\n        stNEARVault = _stNEARVault;\\n        if (stToken.allowance(address(this), address(stNEARVault)) == 0) {\\n            stToken.safeApprove(address(stNEARVault), type(uint).max);\\n        }\\n    }\\n\\n    function investStNEAR() private {\\n        stNEARVault.deposit(stToken.balanceOf(address(this)));\\n    }\\n\\n    function withdrawStWNEAR(uint _stAmount) private {\\n        uint shareBalance = stNEARVault.balanceOf(address(this));\\n        if (shareBalance > 0) {\\n            uint shareAmount;\\n            if (_stAmount != type(uint).max) {\\n                shareAmount = stNEARVault.totalSupply() * _stAmount / stNEARVault.getAllPool();\\n                if (shareAmount > shareBalance) shareAmount = shareBalance;\\n            } else {\\n                shareAmount = shareBalance;\\n            }\\n\\n            stNEARVault.withdraw(shareAmount);\\n        }\\n    }\\n\\n    function getAPR() public virtual override view returns (uint) {\\n        uint baseApr = super.getAPR();\\n        uint lendingApr = stNEARVault.getAPR();\\n        return (1e18 + baseApr) * (1e18 + lendingApr) / 1e18 - 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xac29df76a4a3ffd63aeb6ff2920158e7b89fd2e2bbea4ed9c50aee3d60f12224\",\"license\":\"MIT\"},\"contracts/stVaults/meta/AuroraStNEARVaultTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n//\\n///@notice The AuroraStNEARVault contract stakes wNEAR tokens into stNEAR on Aurora.\\n///@dev https://metapool.gitbook.io/master/developers-1/contract-adresses\\n///@dev https://metapool.app/dapp/mainnet/metapool-aurora/\\n//\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"./AuroraStNEARVault.sol\\\";\\nimport \\\"../../bni/constant/AuroraConstantTest.sol\\\";\\nimport \\\"../../../interfaces/IL2Vault.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\n\\ncontract AuroraStNEARVaultTest is AuroraStNEARVault {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    function initialize1(\\n        address _treasury, address _admin,\\n        address _priceOracle,\\n        IL2Vault _stNEARVault\\n    ) public override initializer {\\n        super.initialize(\\n            \\\"STI Staking WNEAR\\\", \\\"stiStNEAR\\\",\\n            _treasury, _admin,\\n            _priceOracle,\\n            AuroraConstantTest.WNEAR,\\n            AuroraConstantTest.stNEAR\\n        );\\n\\n        metaPool = IMetaPool(0x0dF588AabDd4E031f1903326cC0d8E79DFBD3566);\\n\\n        // The backend will call redeem per 1 hour.\\n        unbondingPeriod = 1 hours;\\n        minInvestAmount = oneToken;\\n        // The stNEAR buffer is replenished automatically every 5 minutes.\\n        investInterval = 5 minutes;\\n        // The wNEAR buffer is replenished automatically every 5 minutes.\\n        redeemInterval = 5 minutes;\\n        oneEpoch = 12 hours;\\n\\n        stNEARVault = _stNEARVault;\\n\\n        token.safeApprove(address(metaPool), type(uint).max);\\n        stToken.safeApprove(address(metaPool), type(uint).max);\\n        stToken.safeApprove(address(stNEARVault), type(uint).max);\\n    }\\n}\\n\",\"keccak256\":\"0xc015193ec4c3570f3e05cdfddc2e9bded534b7a32f86bb4b19d93f6c0540227c\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"interfaces/IL2Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IL2Vault is IERC20Upgradeable {\\r\\n    function deposit(uint amount) external;\\r\\n    function withdraw(uint share) external;\\r\\n    function getAllPool() external view returns (uint);\\r\\n    function getAllPoolInUSD() external view returns (uint);\\r\\n    function getAPR() external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x668b009d391310835da52e6096e87ca47a8a3e34226b9b98491ad303c9e3d1ad\",\"license\":\"MIT\"},\"interfaces/IStVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IStVault is IERC20Upgradeable {\\r\\n\\r\\n    struct WithdrawRequest {\\r\\n        uint tokenAmt;\\r\\n        uint stTokenAmt;\\r\\n        uint requestTs;\\r\\n    }\\r\\n\\r\\n    // fee percentage that treasury takes from rewards.\\r\\n    function yieldFee() external view returns(uint);\\r\\n    // treasury wallet address.\\r\\n    function treasuryWallet() external view returns(address);\\r\\n    // administrator address.\\r\\n    function admin() external view returns(address);\\r\\n\\r\\n    // underlying token such as ETH, WMATIC, and so on.\\r\\n    function token() external view returns(IERC20Upgradeable);\\r\\n    // staked token such as stETH, stMATIC, and so on.\\r\\n    function stToken() external view returns(IERC20Upgradeable);\\r\\n\\r\\n    // the buffered deposit token amount that is not yet staked into the staking pool.\\r\\n    function bufferedDeposits() external view returns(uint);\\r\\n    // On some staking pools, the rewards are accumulated until unbonded even though redeem is requested. This function considers it.\\r\\n    function getBufferedDeposits() external view returns(uint);\\r\\n    // the buffered withdrawal token amount that is unstaked from the staking pool but not yet withdrawn from the user.\\r\\n    function bufferedWithdrawals() external view returns(uint);\\r\\n    // the token amount that shares is already burnt but not withdrawn.\\r\\n    function pendingWithdrawals() external view returns(uint);\\r\\n    // the total amount of withdrawal stToken that is not yet requested to the staking pool.\\r\\n    function pendingRedeems() external view returns(uint);\\r\\n    // the amount of stToken that is emergency unbonding, and shares according to them are not burnt yet.\\r\\n    function getEmergencyUnbondings() external view returns(uint);\\r\\n    // the amount of stToken that has invested into L2 vaults to get extra benefit.\\r\\n    function getInvestedStTokens() external view returns(uint);\\r\\n    \\r\\n    // the seconds to wait for unbonded since withdarwal requested. For example, 30 days in case of unstaking stDOT to get xcDOT\\r\\n    function unbondingPeriod() external view returns(uint);\\r\\n    // the minimum amount of token to invest.\\r\\n    function minInvestAmount() external view returns(uint);\\r\\n    // the minimum amount of stToken to redeem.\\r\\n    function minRedeemAmount() external view returns(uint);\\r\\n\\r\\n    // the timestamp that the last investment was executed on.\\r\\n    function lastInvestTs() external view returns(uint);\\r\\n    // minimum seconds to wait before next investment. For example, MetaPool's stNEAR buffer is replenished every 5 minutes.\\r\\n    function investInterval() external view returns(uint);\\r\\n    // the timestamp that the last redeem was requested on.\\r\\n    function lastRedeemTs() external view returns(uint);\\r\\n    // minimum seconds to wait before next redeem. For example, Lido have up to 20 redeem requests to stDOT in parallel. Therefore, the next redeem should be requested after about 1 day.\\r\\n    function redeemInterval() external view returns(uint);\\r\\n    // the timestamp that the profit last collected on.\\r\\n    function lastCollectProfitTs() external view returns(uint);\\r\\n    // the timestamp of one epoch. Each epoch, the stToken price or balance will increase as staking-rewards are added to the pool.\\r\\n    function oneEpoch() external view returns(uint);\\r\\n\\r\\n    ///@return the total amount of tokens in the vault.\\r\\n    function getAllPool() external view returns (uint);\\r\\n    ///@return the amount of shares that corresponds to `_amount` of token.\\r\\n    function getSharesByPool(uint _amount) external view returns (uint);\\r\\n    ///@return the amount of token that corresponds to `_shares` of shares.\\r\\n    function getPoolByShares(uint _shares) external view returns (uint);\\r\\n    ///@return the total USD value of tokens in the vault.\\r\\n    function getAllPoolInUSD() external view returns (uint);\\r\\n    ///@return the USD value of rewards that is avilable to claim. It's scaled by 1e18.\\r\\n    function getPendingRewards() external view returns (uint);\\r\\n    ///@return the APR in the vault. It's scaled by 1e18.\\r\\n    function getAPR() external view returns (uint);\\r\\n    ///@return _claimable specifys whether user can claim tokens for it.\\r\\n    ///@return _tokenAmt is amount of token to claim.\\r\\n    ///@return _stTokenAmt is amount of stToken to redeem.\\r\\n    ///@return _requestTs is timestmap when withdrawal requested.\\r\\n    ///@return _waitForTs is timestamp to wait for.\\r\\n    function getWithdrawRequest(uint _reqId) external view returns (\\r\\n        bool _claimable,\\r\\n        uint _tokenAmt, uint _stTokenAmt,\\r\\n        uint _requestTs, uint _waitForTs\\r\\n    );\\r\\n    ///@return the unbonded token amount that is claimable from the staking pool.\\r\\n    function getTokenUnbonded() external view returns (uint);\\r\\n\\r\\n    ///@dev deposit `_amount` of token.\\r\\n    function deposit(uint _amount) external;\\r\\n    ///@dev deposit the native asset.\\r\\n    function depositETH() external payable;\\r\\n    ///@dev request a withdrawal that corresponds to `_shares` of shares.\\r\\n    ///@return _amount is the amount of withdrawn token.\\r\\n    ///@return _reqId is the NFT token id indicating the request for rest of withdrawal. 0 if no request is made.\\r\\n    function withdraw(uint _shares) external returns (uint _amount, uint _reqId);\\r\\n    ///@dev claim token with NFT token\\r\\n    ///@return _amount is the amount of claimed token.\\r\\n    function claim(uint _reqId) external returns (uint _amount);\\r\\n    ///@dev claim token with NFT tokens\\r\\n    ///@return _amount is the amount of claimed token.\\r\\n    ///@return _claimedCount is the count of reqIds that are claimed.\\r\\n    ///@return _claimed is the flag indicating whether the token is claimed.\\r\\n    function claimMulti(uint[] memory _reqIds) external returns (uint _amount, uint _claimedCount, bool[] memory _claimed);\\r\\n    ///@dev stake the buffered deposits into the staking pool. It's called by admin.\\r\\n    function invest() external;\\r\\n    ///@dev redeem the requested withdrawals from the staking pool. It's called by admin.\\r\\n    function redeem() external;\\r\\n    ///@dev claim the unbonded tokens from the staking pool. It's called by admin.\\r\\n    function claimUnbonded() external;\\r\\n    ///@dev request a withdrawal for all staked tokens. It's called by admin.\\r\\n    function emergencyWithdraw() external;\\r\\n    ///@dev the total amount of emergency withdrawal stToken that is not yet requested to the staking pool.\\r\\n    function emergencyPendingRedeems() external view returns (uint _redeems);\\r\\n    ///@dev In emergency mode, redeem the rest of stTokens. Especially it's needed for stNEAR because the MetaPool has a buffer limit.\\r\\n    function emergencyRedeem() external;\\r\\n    ///@dev reinvest the tokens, and set the vault status as normal. It's called by admin.\\r\\n    function reinvest() external;\\r\\n    ///@dev take rewards and reinvest them. It's called by admin.\\r\\n    function yield() external;\\r\\n    ///@dev collect profit and update the watermark\\r\\n    function collectProfitAndUpdateWatermark() external;\\r\\n    ///@dev transfer out fees.\\r\\n    function withdrawFees() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xfe50f78aeb3c39c41499935cbef759143a5216dfc53cd59b8b462c0eaa6934db\",\"license\":\"MIT\"},\"interfaces/IStVaultNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IStVaultNFT is IERC721Upgradeable {\\n\\n    function mint(address _to) external returns (uint);\\n    function burn(uint _tokenId) external;\\n    function totalSupply() external view returns (uint);\\n    function isApprovedOrOwner(address _spender, uint _tokenId) external view returns (bool);\\n    function exists(uint _tokenId) external view returns (bool);\\n\\n    function setStVault(address _stVault) external;\\n}\",\"keccak256\":\"0x66e4fe82c405f9d237ea8f7f4cd104113796adaf4e0e47b7bf5d133f6310e894\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n}\\r\\n\",\"keccak256\":\"0x1fe6004a4b9bb67e1c6083bf8a0aa20a312d110f184d7fa396d34cbad86a739b\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcff7c4cca7e1209596f7725bc59261d604e809e82fada4e1be03b2c31f3d6f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claim(uint256)": {
        "details": "claim token with NFT token",
        "returns": {
          "_amount": "is the amount of claimed token."
        }
      },
      "claimMulti(uint256[])": {
        "details": "claim token with NFT tokens",
        "returns": {
          "_amount": "is the amount of claimed token.",
          "_claimed": "is the flag indicating whether the token is claimed.",
          "_claimedCount": "is the count of reqIds that are claimed."
        }
      },
      "claimUnbonded()": {
        "details": "claim the unbonded tokens from the staking pool. It's called by admin."
      },
      "collectProfitAndUpdateWatermark()": {
        "details": "collect profit and update the watermark"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "details": "deposit `_amount` of token."
      },
      "depositETH()": {
        "details": "deposit the native asset."
      },
      "emergencyPendingRedeems()": {
        "details": "the total amount of emergency withdrawal stToken that is not yet requested to the staking pool."
      },
      "emergencyRedeem()": {
        "details": "In emergency mode, redeem the rest of stTokens. Especially it's needed for stNEAR because the MetaPool has a buffer limit."
      },
      "getAPR()": {
        "returns": {
          "_0": "the APR in the vault. It's scaled by 1e18."
        }
      },
      "getAllPool()": {
        "details": "it doesn't include the unbonding stTokens according to the burnt shares."
      },
      "getAllPoolInUSD()": {
        "returns": {
          "_0": "the total USD value of tokens in the vault."
        }
      },
      "getPoolByShares(uint256)": {
        "returns": {
          "_0": "the amount of token that corresponds to `_shares` of shares."
        }
      },
      "getPooledTokenByStToken(uint256)": {
        "details": "wNearSwapFee can be changed after redeem requested.",
        "params": {
          "_stAmount": "Amount of stTokens"
        }
      },
      "getSharesByPool(uint256)": {
        "returns": {
          "_0": "the amount of shares that corresponds to `_amount` of token."
        }
      },
      "getStTokenByPooledToken(uint256)": {
        "details": "stNearSwapFee can be changed after redeem requested.",
        "params": {
          "_amount": "Amount of tokens"
        }
      },
      "getTokenUnbonded()": {
        "returns": {
          "_0": "the unbonded token amount that is claimable from the staking pool."
        }
      },
      "getWithdrawRequest(uint256)": {
        "returns": {
          "_claimable": "specifys whether user can claim tokens for it.",
          "_requestTs": "is timestmap when withdrawal requested.",
          "_stTokenAmt": "is amount of stToken to redeem.",
          "_tokenAmt": "is amount of token to claim.",
          "_waitForTs": "is timestamp to wait for."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "invest()": {
        "details": "stake the buffered deposits into the staking pool. It's called by admin."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem()": {
        "details": "redeem the requested withdrawals from the staking pool. It's called by admin."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_yieldFeePerc": "deposit fee percentage. 2000 for 20%"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "request a withdrawal that corresponds to `_shares` of shares.",
        "returns": {
          "_amount": "is the amount of withdrawn token.",
          "_reqId": "is the NFT token id indicating the request for rest of withdrawal. 0 if no request is made."
        }
      },
      "withdrawFees()": {
        "details": "transfer out fees."
      },
      "yield()": {
        "details": "take rewards and reinvest them. It's called by admin."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw()": {
        "notice": "Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions"
      },
      "getPendingRewards()": {
        "notice": "Returns the pending rewards in USD."
      },
      "reinvest()": {
        "notice": "Unpauses deposit, yield, invest functions, and invests funds."
      },
      "setFee(uint256)": {
        "notice": "Function to set deposit and yield fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2709,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 454,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 460,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 462,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 464,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 466,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1045,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 390,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 434,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 36016,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "yieldFee",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 36018,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "watermark",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 36020,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "fees",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 36022,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "254",
        "type": "t_address"
      },
      {
        "astId": 36024,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "admin",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 36027,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "priceOracle",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IPriceOracle)11071"
      },
      {
        "astId": 36030,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "nft",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IStVaultNFT)52804"
      },
      {
        "astId": 36033,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "token",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IERC20Upgradeable)1124"
      },
      {
        "astId": 36036,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "stToken",
        "offset": 0,
        "slot": "259",
        "type": "t_contract(IERC20Upgradeable)1124"
      },
      {
        "astId": 36038,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "tokenDecimals",
        "offset": 20,
        "slot": "259",
        "type": "t_uint8"
      },
      {
        "astId": 36040,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "stTokenDecimals",
        "offset": 21,
        "slot": "259",
        "type": "t_uint8"
      },
      {
        "astId": 36042,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "oneToken",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 36044,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "oneStToken",
        "offset": 0,
        "slot": "261",
        "type": "t_uint256"
      },
      {
        "astId": 36046,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "bufferedDeposits",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 36048,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "pendingWithdrawals",
        "offset": 0,
        "slot": "263",
        "type": "t_uint256"
      },
      {
        "astId": 36050,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "pendingRedeems",
        "offset": 0,
        "slot": "264",
        "type": "t_uint256"
      },
      {
        "astId": 36052,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "emergencyUnbondings",
        "offset": 0,
        "slot": "265",
        "type": "t_uint256"
      },
      {
        "astId": 36054,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "unbondingPeriod",
        "offset": 0,
        "slot": "266",
        "type": "t_uint256"
      },
      {
        "astId": 36056,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "minInvestAmount",
        "offset": 0,
        "slot": "267",
        "type": "t_uint256"
      },
      {
        "astId": 36058,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "minRedeemAmount",
        "offset": 0,
        "slot": "268",
        "type": "t_uint256"
      },
      {
        "astId": 36060,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "lastInvestTs",
        "offset": 0,
        "slot": "269",
        "type": "t_uint256"
      },
      {
        "astId": 36062,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "investInterval",
        "offset": 0,
        "slot": "270",
        "type": "t_uint256"
      },
      {
        "astId": 36064,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "lastRedeemTs",
        "offset": 0,
        "slot": "271",
        "type": "t_uint256"
      },
      {
        "astId": 36066,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "redeemInterval",
        "offset": 0,
        "slot": "272",
        "type": "t_uint256"
      },
      {
        "astId": 36068,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "lastCollectProfitTs",
        "offset": 0,
        "slot": "273",
        "type": "t_uint256"
      },
      {
        "astId": 36070,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "oneEpoch",
        "offset": 0,
        "slot": "274",
        "type": "t_uint256"
      },
      {
        "astId": 36074,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "depositedBlock",
        "offset": 0,
        "slot": "275",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36079,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "nft2WithdrawRequest",
        "offset": 0,
        "slot": "276",
        "type": "t_mapping(t_uint256,t_struct(WithdrawRequest)52506_storage)"
      },
      {
        "astId": 36081,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "baseApr",
        "offset": 0,
        "slot": "277",
        "type": "t_uint256"
      },
      {
        "astId": 36083,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "baseTokenRate",
        "offset": 0,
        "slot": "278",
        "type": "t_uint256"
      },
      {
        "astId": 36085,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "baseAprLastUpdate",
        "offset": 0,
        "slot": "279",
        "type": "t_uint256"
      },
      {
        "astId": 38168,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "280",
        "type": "t_array(t_uint256)20_storage"
      },
      {
        "astId": 41601,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "metaPool",
        "offset": 0,
        "slot": "300",
        "type": "t_contract(IMetaPool)41592"
      },
      {
        "astId": 41604,
        "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
        "label": "stNEARVault",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IL2Vault)52471"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)1124": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IL2Vault)52471": {
        "encoding": "inplace",
        "label": "contract IL2Vault",
        "numberOfBytes": "20"
      },
      "t_contract(IMetaPool)41592": {
        "encoding": "inplace",
        "label": "contract IMetaPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)11071": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStVaultNFT)52804": {
        "encoding": "inplace",
        "label": "contract IStVaultNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(WithdrawRequest)52506_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStVault.WithdrawRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawRequest)52506_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WithdrawRequest)52506_storage": {
        "encoding": "inplace",
        "label": "struct IStVault.WithdrawRequest",
        "members": [
          {
            "astId": 52501,
            "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
            "label": "tokenAmt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 52503,
            "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
            "label": "stTokenAmt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 52505,
            "contract": "contracts/stVaults/meta/AuroraStNEARVaultTest.sol:AuroraStNEARVaultTest",
            "label": "requestTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}