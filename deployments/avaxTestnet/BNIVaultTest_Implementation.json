{
  "address": "0x36146D325aA8Ab4c8df853BEca2b9c5Eeb7eb6F5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        }
      ],
      "name": "AdjustWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollectProfitAndUpdateWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenDeposit",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryWallet",
          "type": "address"
        }
      ],
      "name": "SetTreasuryWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TransferredOutFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtWithdraw",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenWithdraw",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectProfitAndUpdateWatermark",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "depositByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getAllPoolInUSDAtNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolAtNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitFeePerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_perc",
          "type": "uint256[]"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "setBiconomy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profitFeePerc",
          "type": "uint256"
        }
      ],
      "name": "setProfitFeePerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLastOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "watermark",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "withdrawPercByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xddca4401358db3216b3e81dff87daf0b47f69293f07994bf6459993d7e516492",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x36146D325aA8Ab4c8df853BEca2b9c5Eeb7eb6F5",
    "transactionIndex": 0,
    "gasUsed": "3225948",
    "logsBloom": "0x
    "blockHash": "0x2643eaf15c911176099cca9d7bd64224b1e5a2078a2d1be408e571d3371b9968",
    "transactionHash": "0xddca4401358db3216b3e81dff87daf0b47f69293f07994bf6459993d7e516492",
    "logs": [],
    "blockNumber": 12547740,
    "cumulativeGasUsed": "3225948",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "233991dc8428f72ab84898ee673d42d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"}],\"name\":\"AdjustWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollectProfitAndUpdateWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenDeposit\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransferredOutFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenWithdraw\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfitAndUpdateWatermark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"depositByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getAllPoolInUSDAtNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolAtNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_perc\",\"type\":\"uint256[]\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFeePerc\",\"type\":\"uint256\"}],\"name\":\"setProfitFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawPercByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositByAdmin(address,address[],uint256[],uint256)\":{\"params\":{\"_USDTAmts\":\"amounts of USDT should be deposited to each pools. It's 6 decimals\"}},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawPercByAdmin(address,uint256,uint256)\":{\"params\":{\"_sharePerc\":\"percentage of assets which should be withdrawn. It's 18 decimals\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositByAdmin(address,address[],uint256[],uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/BNIVaultTest.sol\":\"BNIVaultTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/BNIVault.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"../../libs/Token.sol\\\";\\n\\ninterface IStrategy {\\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\\n    function withdrawPerc(uint sharePerc) external;\\n    function withdrawFromPool(uint pid, uint sharePerc) external returns (uint);\\n    function emergencyWithdraw() external;\\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\\n    function getAPR() external view returns (uint);\\n}\\n\\ncontract BNIVault is ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    struct PoolSnapshot {\\n        uint poolInUSD;\\n        uint ts;\\n    }\\n\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    address public admin;\\n    IStrategy public strategy;\\n    IPriceOracle public priceOracle;\\n\\n    uint public profitFeePerc;\\n    address public treasuryWallet;\\n    uint public watermark; // In USD (18 decimals)\\n    uint public fees; // In USD (18 decimals)\\n\\n    address public trustedForwarder;\\n\\n    uint public firstOperationNonce;\\n    uint public lastOperationNonce;\\n    mapping(uint => PoolSnapshot) public poolAtNonce;\\n    mapping(address => uint) public userLastOperationNonce;\\n    mapping(uint => uint) public operationAmounts; // value in USD scaled by 10^18\\n\\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit);\\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint sharePerc);\\n    event Rebalance(uint pid, uint sharePerc, uint amount, address target);\\n    event Reinvest(uint amount);\\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\\n    event TransferredOutFees(uint fees, address token);\\n    \\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == address(admin), \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _treasuryWallet, address _admin,\\n        address _strategy, address _priceOracle,\\n        address _USDT\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        treasuryWallet = _treasuryWallet;\\n        admin = _admin;\\n        strategy = IStrategy(_strategy);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        profitFeePerc = 2000;\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(6 <= usdtDecimals, \\\"USDT decimals must >= 6\\\");\\n\\n        USDT.safeApprove(address(strategy), type(uint).max);\\n    }\\n\\n    function getChainID() public view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. It's 6 decimals\\n    function depositByAdmin(\\n        address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce\\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\\n        require(_account != address(0), \\\"Invalid account\\\");\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _USDTAmts.length, \\\"Not match array length\\\");\\n\\n        uint k = 10 ** (usdtDecimals - 6);\\n        uint USDTAmt;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            _USDTAmts[i] = _USDTAmts[i] * k;\\n            USDTAmt += _USDTAmts[i];\\n        }\\n        require(0 < USDTAmt, \\\"Amounts must > 0\\\");\\n\\n        require(userLastOperationNonce[_account] < _nonce, \\\"Nonce is behind\\\");\\n        userLastOperationNonce[_account] = _nonce;\\n        operationAmounts[_nonce] = getValueInUSD(address(USDT), USDTAmt);\\n        _snapshotPool(_nonce, getAllPoolInUSD());\\n\\n        USDT.safeTransferFrom(_account, address(this), USDTAmt);\\n\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n\\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\\n        (uint newUSDTAmt, uint[] memory newUSDTAmts) = _transferOutFees(USDTAmt, _USDTAmts);\\n        if (newUSDTAmt > 0) {\\n            strategy.invest(_tokens, newUSDTAmts);\\n        }\\n        adjustWatermark(amtDeposit, true);\\n\\n        emit Deposit(_account, USDTAmt, address(USDT));\\n    }\\n\\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\\n    function withdrawPercByAdmin(\\n        address _account, uint _sharePerc, uint _nonce\\n    ) external onlyOwnerOrAdmin nonReentrant {\\n        require(_sharePerc > 0, \\\"SharePerc must > 0\\\");\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n\\n        uint pool = getAllPoolInUSD();\\n        uint withdrawAmt = pool * _sharePerc / 1e18;\\n\\n        require(userLastOperationNonce[_account] < _nonce, \\\"Nonce is behind\\\");\\n        userLastOperationNonce[_account] = _nonce;\\n        operationAmounts[_nonce] = withdrawAmt;\\n        _snapshotPool(_nonce, pool);\\n\\n        // calculate sharePerc to withdraw from strategy\\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\\n        uint USDTAmt;\\n        if (!paused()) {\\n            strategy.withdrawPerc(sharePerc);\\n            USDTAmt = USDT.balanceOf(address(this));\\n            adjustWatermark(withdrawAmt, false);\\n        } else {\\n            USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\\n        }\\n        USDT.safeTransfer(_account, USDTAmt);\\n        emit Withdraw(_account, withdrawAmt, address(USDT), _sharePerc);\\n    }\\n\\n    function _snapshotPool(uint _nonce, uint _pool) internal {\\n        poolAtNonce[_nonce] = PoolSnapshot({\\n            poolInUSD: _pool,\\n            ts: block.timestamp\\n        });\\n\\n        if (firstOperationNonce == 0) {\\n            firstOperationNonce = _nonce;\\n        }\\n        if (lastOperationNonce < _nonce) {\\n            lastOperationNonce = _nonce;\\n        }\\n    }\\n\\n    function rebalance(uint _pid, uint _sharePerc, address _target) external onlyOwnerOrAdmin {\\n        uint USDTAmt = strategy.withdrawFromPool(_pid, _sharePerc);\\n        if (0 < USDTAmt) {\\n            address[] memory targets = new address[](1);\\n            targets[0] = _target;\\n            uint[] memory USDTAmts = new uint[](1);\\n            USDTAmts[0] = USDTAmt;\\n            strategy.invest(targets, USDTAmts);\\n            emit Rebalance(_pid, _sharePerc, USDTAmt, _target);\\n        }\\n    }\\n\\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\\n        _pause();\\n        strategy.emergencyWithdraw();\\n        watermark = 0;\\n    }\\n\\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _perc.length, \\\"Not match array length\\\");\\n\\n        _unpause();\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n            uint totalPerc;\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                totalPerc = _perc[i];\\n            }\\n\\n            uint[] memory USMTAmts = new uint[](poolCnt);\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\\n            }\\n\\n            strategy.invest(_tokens, USMTAmts);\\n            adjustWatermark(amtDeposit, true);\\n            emit Reinvest(USDTAmt);\\n        }\\n    }\\n\\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\\n        _collectProfitAndUpdateWatermark();\\n    }\\n    function _collectProfitAndUpdateWatermark() private {\\n        uint currentWatermark = strategy.getAllPoolInUSD();\\n        uint lastWatermark = watermark;\\n        uint fee;\\n        if (currentWatermark > lastWatermark) {\\n            uint profit = currentWatermark - lastWatermark;\\n            fee = profit * profitFeePerc / Const.DENOMINATOR;\\n            fees += fee;\\n            watermark = currentWatermark;\\n        }\\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\\n    }\\n\\n    /// @param signs True for positive, false for negative\\n    function adjustWatermark(uint amount, bool signs) private {\\n        uint lastWatermark = watermark;\\n        watermark = signs == true\\n                    ? watermark + amount\\n                    : (watermark > amount) ? watermark - amount : 0;\\n        emit AdjustWatermark(watermark, lastWatermark);\\n    }\\n\\n    function withdrawFees() external onlyOwnerOrAdmin {\\n        if (!paused()) {\\n            uint pool = strategy.getAllPoolInUSD();\\n            uint _fees = fees;\\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\\n            strategy.withdrawPerc(sharePerc);\\n        }\\n        _transferOutFees(USDT.balanceOf(address(this)), new uint[](0));\\n    }\\n\\n    function _transferOutFees(uint _USDTAmt, uint[] memory _USDTAmts) private returns (uint, uint[] memory) {\\n        uint _fees = fees;\\n        if (_fees != 0) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint FeeAmt = _fees * (10 ** USDTPriceDecimals) / ((10 ** (18-usdtDecimals)) * USDTPriceInUSD);\\n\\n            uint prevUSDTAmt = _USDTAmt;\\n            uint poolCnt = _USDTAmts.length;\\n            if (FeeAmt < _USDTAmt) {\\n                _fees = 0;\\n                _USDTAmt -= FeeAmt;\\n            } else {\\n                _fees -= (_USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals));\\n                FeeAmt = _USDTAmt;\\n                _USDTAmt = 0;\\n            }\\n            fees = _fees;\\n\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                _USDTAmts[i] = _USDTAmts[i] * _USDTAmt / prevUSDTAmt;\\n            }\\n\\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\\n        }\\n        return (_USDTAmt, _USDTAmts);\\n    }\\n\\n    function setStrategy(address _strategy) external onlyOwner {\\n        strategy = IStrategy(_strategy);\\n\\n        if (USDT.allowance(address(this), address(strategy)) == 0) {\\n            USDT.safeApprove(address(strategy), type(uint).max);\\n        }\\n    }\\n\\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\\n        require(profitFeePerc < 3001, \\\"Profit fee cannot > 30%\\\");\\n        profitFeePerc = _profitFeePerc;\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\n        address oldTreasuryWallet = treasuryWallet;\\n        treasuryWallet = _treasuryWallet;\\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    function setBiconomy(address _biconomy) external onlyOwner {\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    function _msgSender() internal override(ContextUpgradeable) view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function versionRecipient() external pure returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(address(USDT));\\n    }\\n\\n    ///@return the value in USD. it's scaled by 1e18;\\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\\n        uint8 _decimals = IERC20UpgradeableExt(_asset).decimals();\\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\\n    }\\n\\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\\n        (tokens, pools) = strategy.getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint chainID = getChainID();\\n        chainIDs = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            chainIDs[i] = chainID;\\n        }\\n\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if(USDTAmt > 0 && poolCnt > 0) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint _pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n            pools[0] += _pool;\\n        }\\n        return (chainIDs, tokens, pools);\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint pool;\\n        if (paused()) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n        } else {\\n            pool = strategy.getAllPoolInUSD();\\n        }\\n        return (pool > fees ? pool - fees : 0);\\n    }\\n\\n    function getAllPoolInUSDAtNonce(uint _nonce) public view returns (uint) {\\n        if (firstOperationNonce != 0) {\\n            if (_nonce < firstOperationNonce) {\\n                return 0;\\n            }\\n            if (_nonce <= lastOperationNonce) {\\n                for (uint i = _nonce; i >= firstOperationNonce; i --) {\\n                    PoolSnapshot memory snapshot = poolAtNonce[i];\\n                    if (snapshot.ts > 0) {\\n                        return snapshot.poolInUSD;\\n                    }\\n                }\\n            }\\n        }\\n        return getAllPoolInUSD();\\n    }\\n\\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\\n        return strategy.getCurrentTokenCompositionPerc();\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        return strategy.getAPR();\\n    }\\n}\\n\",\"keccak256\":\"0x363f00189c00847b9f86302e9593e76ed6c5d3be0b8a95da4213ec2f5bb6b87f\",\"license\":\"MIT\"},\"contracts/bni/BNIVaultTest.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\nimport \\\"./BNIVault.sol\\\";\\n\\ncontract BNIVaultTest is BNIVault {\\n\\n    function setPriceOracle(address _priceOracle) external onlyOwner {\\n        priceOracle = IPriceOracle(_priceOracle);\\n    }\\n}\\n\",\"keccak256\":\"0xdbc0bacf2ce2fbcde678e222aff02af30f45f82c3dcd43d357e2d7843b41f271\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n}\\r\\n\",\"keccak256\":\"0x1fe6004a4b9bb67e1c6083bf8a0aa20a312d110f184d7fa396d34cbad86a739b\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcff7c4cca7e1209596f7725bc59261d604e809e82fada4e1be03b2c31f3d6f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613963806100206000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80638855c91a11610146578063bd244af4116100c3578063e63cfa3b11610087578063e63cfa3b1461050d578063efca0d0714610549578063f13dc2e214610552578063f2fde38b1461055b578063f851a4401461056e578063ffec4eb11461058157600080fd5b8063bd244af4146104cf578063c54e44eb146104d7578063c89d5b8b146104ea578063db2e21bc146104f2578063e5e19776146104fa57600080fd5b8063a8c62e761161010a578063a8c62e761461045d578063a9d98f5914610470578063aae0923614610483578063ac25f6891461049a578063b47c6a27146104b057600080fd5b80638855c91a146104145780638da5cb5b1461041d5780639af1d35a1461042e5780639b86088214610437578063a8602fea1461044a57600080fd5b8063476343ee116101d45780635c975abb116101985780635c975abb146103c85780636d2b3d7b146103d3578063704b6c02146103e6578063715018a6146103f95780637da0a8771461040157600080fd5b8063476343ee14610352578063486ff0cd1461035a578063530e784f1461037d578063564b81ef14610390578063572b6c051461039657600080fd5b80632630c12f1161021b5780632630c12f146102e657806333a100ca1461031157806345d207ec146103245780634626402b14610337578063470343d81461034a57600080fd5b8063057feb99146102585780630b47b7ff1461028b5780630d8b76a8146102a05780631459457a146102b357806319dac5af146102c6575b600080fd5b610278610266366004612fd3565b60d66020526000908152604090205481565b6040519081526020015b60405180910390f35b61029e610299366004612fd3565b61058a565b005b61029e6102ae366004613001565b610634565b61029e6102c136600461301e565b61069f565b6102786102d4366004613001565b60d56020526000908152604090205481565b60cc546102f9906001600160a01b031681565b6040516001600160a01b039091168152602001610282565b61029e61031f366004613001565b610874565b61029e61033236600461308f565b61097d565b60ce546102f9906001600160a01b031681565b61029e610d97565b61029e610e03565b60408051808201825260018152603160f81b6020820152905161028291906130f0565b61029e61038b366004613001565b610ffb565b46610278565b6103b86103a4366004613001565b60d1546001600160a01b0391821691161490565b6040519015158152602001610282565b60655460ff166103b8565b61029e6103e1366004613123565b611066565b61029e6103f4366004613001565b61127d565b61029e611328565b60d1546102f9906001600160a01b031681565b61027860d35481565b6097546001600160a01b03166102f9565b61027860d05481565b61029e610445366004613296565b61137b565b61029e610458366004613001565b6116d7565b60cb546102f9906001600160a01b031681565b61027861047e366004612fd3565b61177a565b61048b611804565b6040516102829392919061336e565b6104a2611ac3565b6040516102829291906133a7565b6104b8611b58565b6040805192835260ff909116602083015201610282565b610278611bda565b60c9546102f9906001600160a01b031681565b610278611d7c565b61029e611dfe565b61029e6105083660046133d5565b611ed7565b61053461051b366004612fd3565b60d4602052600090815260409020805460019091015482565b60408051928352602083019190915201610282565b61027860cd5481565b61027860cf5481565b61029e610569366004613001565b612348565b60ca546102f9906001600160a01b031681565b61027860d25481565b6105926123ff565b6001600160a01b03166105ad6097546001600160a01b031690565b6001600160a01b0316146105dc5760405162461bcd60e51b81526004016105d390613453565b60405180910390fd5b610bb960cd541061062f5760405162461bcd60e51b815260206004820152601760248201527f50726f666974206665652063616e6e6f74203e2033302500000000000000000060448201526064016105d3565b60cd55565b61063c6123ff565b6001600160a01b03166106576097546001600160a01b031690565b6001600160a01b03161461067d5760405162461bcd60e51b81526004016105d390613453565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60006106ab6001612433565b905080156106c3576000805461ff0019166101001790555b6106cb6124c0565b60ce80546001600160a01b038089166001600160a01b03199283161790925560ca805488841690831617905560cb805487841690831617905560cc80548684169083161790556107d060cd5560c9805492851692909116821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190613499565b60c9805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156108065760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d203600000000000000000060448201526064016105d3565b60cb5460c954610825916001600160a01b0391821691166000196124ef565b801561086c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050505050565b61087c6123ff565b6001600160a01b03166108976097546001600160a01b031690565b6001600160a01b0316146108bd5760405162461bcd60e51b81526004016105d390613453565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095791906134b4565b61097a5760cb5460c95461097a916001600160a01b0391821691166000196124ef565b50565b6097546001600160a01b03163314806109a0575060ca546001600160a01b031633145b6109bc5760405162461bcd60e51b81526004016105d3906134cd565b60026001541415610a0f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105d3565b600260015581610a565760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b60448201526064016105d3565b670de0b6b3a7640000821115610a9a5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016105d3565b6000610aa4611bda565b90506000670de0b6b3a7640000610abb8584613510565b610ac5919061352f565b6001600160a01b038616600090815260d560205260409020549091508311610b215760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b60448201526064016105d3565b6001600160a01b038516600090815260d56020908152604080832086905585835260d69091529020819055610b56838361264b565b600060d05483610b669190613551565b610b7883670de0b6b3a7640000613510565b610b82919061352f565b90506000610b9260655460ff1690565b610c815760cb5460405163ed47d90960e01b8152600481018490526001600160a01b039091169063ed47d90990602401600060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f91906134b4565b9050610c7c836000612697565b610d1f565b60c9546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906134b4565b610d129190613510565b610d1c919061352f565b90505b60c954610d36906001600160a01b03168883612719565b60c954604080516001600160a01b038a81168252602082018790529092168282015260608201889052517f457f950b75085c30ff780acd57bde642ff1316cc4aad9f286af2c1ffc4163a789181900360800190a15050600180555050505050565b6097546001600160a01b0316331480610dba575060ca546001600160a01b031633145b610dd65760405162461bcd60e51b81526004016105d3906134cd565b60655460ff1615610df95760405162461bcd60e51b81526004016105d390613569565b610e01612749565b565b6097546001600160a01b0316331480610e26575060ca546001600160a01b031633145b610e425760405162461bcd60e51b81526004016105d3906134cd565b60655460ff16610f665760cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906134b4565b60d0549091506000828210610ee657670de0b6b3a7640000610f03565b82610ef983670de0b6b3a7640000613510565b610f03919061352f565b60cb5460405163ed47d90960e01b8152600481018390529192506001600160a01b03169063ed47d90990602401600060405180830381600087803b158015610f4a57600080fd5b505af1158015610f5e573d6000803e3d6000fd5b505050505050505b60c9546040516370a0823160e01b8152306004820152610ff7916001600160a01b0316906370a082319060240160206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906134b4565b60408051600081526020810190915261285d565b5050565b6110036123ff565b6001600160a01b031661101e6097546001600160a01b031690565b6001600160a01b0316146110445760405162461bcd60e51b81526004016105d390613453565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b0316331480611089575060ca546001600160a01b031633145b6110a55760405162461bcd60e51b81526004016105d3906134cd565b60cb5460405163778d98b360e11b815260048101859052602481018490526000916001600160a01b03169063ef1b316690604401602060405180830381600087803b1580156110f357600080fd5b505af1158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b91906134b4565b905080156112775760408051600180825281830190925260009160208083019080368337019050509050828160008151811061116957611169613593565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905082816000815181106111ba576111ba613593565b602090810291909101015260cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b71906111f790859085906004016133a7565b600060405180830381600087803b15801561121157600080fd5b505af1158015611225573d6000803e3d6000fd5b505060408051898152602081018990529081018690526001600160a01b03871660608201527f2be1fd30870a31378112c815f24e8611c8a87ed036bce5cf5670a8e34dbf210a92506080019050610863565b50505050565b6112856123ff565b6001600160a01b03166112a06097546001600160a01b031690565b6001600160a01b0316146112c65760405162461bcd60e51b81526004016105d390613453565b60ca80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b6113306123ff565b6001600160a01b031661134b6097546001600160a01b031690565b6001600160a01b0316146113715760405162461bcd60e51b81526004016105d390613453565b610e016000612a33565b6097546001600160a01b031633148061139e575060ca546001600160a01b031633145b6113ba5760405162461bcd60e51b81526004016105d3906134cd565b60655460ff166114035760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d3565b81518151811461144e5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b60448201526064016105d3565b611456612a85565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561149a57600080fd5b505afa1580156114ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d291906134b4565b90508015611277576000806114e5611b58565b909250905060006114f782600a61368d565b60c954849061151190600160a01b900460ff16601261369c565b61151c90600a61368d565b6115269087613510565b6115309190613510565b61153a919061352f565b90506000805b868110156115775787818151811061155a5761155a613593565b60200260200101519150808061156f906136bf565b915050611540565b5060008667ffffffffffffffff8111156115935761159361315c565b6040519080825280602002602001820160405280156115bc578160200160208202803683370190505b50905060005b878110156116295782878a83815181106115de576115de613593565b60200260200101516115f09190613510565b6115fa919061352f565b82828151811061160c5761160c613593565b602090810291909101015280611621816136bf565b9150506115c2565b5060cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b719061165c908c9085906004016133a7565b600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b50505050611699836001612697565b6040518681527fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed79060200160405180910390a1505050505050505050565b6116df6123ff565b6001600160a01b03166116fa6097546001600160a01b031690565b6001600160a01b0316146117205760405162461bcd60e51b81526004016105d390613453565b60ce80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed7910161131c565b600060d2546000146117f65760d25482101561179857506000919050565b60d35482116117f657815b60d25481106117f457600081815260d4602090815260409182902082518084019093528054835260010154908201819052156117e157519392505050565b50806117ec816136da565b9150506117a3565b505b6117fe611bda565b92915050565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611893919081019061374c565b80519193509150468167ffffffffffffffff8111156118b4576118b461315c565b6040519080825280602002602001820160405280156118dd578160200160208202803683370190505b50945060005b8281101561191b57818682815181106118fe576118fe613593565b602090810291909101015280611913816136bf565b9150506118e3565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561196057600080fd5b505afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199891906134b4565b90506000811180156119aa5750600083115b15611abb576000806119ba611b58565b909250905060006119cc82600a61368d565b60c95484906119e690600160a01b900460ff16601261369c565b6119f190600a61368d565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611a3457600080fd5b505afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c91906134b4565b611a769190613510565b611a809190613510565b611a8a919061352f565b90508087600081518110611aa057611aa0613593565b60200260200101818151611ab49190613551565b9052505050505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b158015611b1457600080fd5b505afa158015611b28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b50919081019061374c565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b158015611ba257600080fd5b505afa158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b509190613807565b600080611be960655460ff1690565b15611cd057600080611bf9611b58565b9092509050611c0981600a61368d565b60c9548390611c2390600160a01b900460ff16601261369c565b611c2e90600a61368d565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611c7157600080fd5b505afa158015611c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca991906134b4565b611cb39190613510565b611cbd9190613510565b611cc7919061352f565b92505050611d59565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1e57600080fd5b505afa158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5691906134b4565b90505b60d0548111611d69576000611d76565b60d054611d769082613833565b91505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b158015611dc157600080fd5b505afa158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df991906134b4565b905090565b6097546001600160a01b0316331480611e21575060ca546001600160a01b031633145b611e3d5760405162461bcd60e51b81526004016105d3906134cd565b60655460ff1615611e605760405162461bcd60e51b81526004016105d390613569565b611e68612b1e565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611eb857600080fd5b505af1158015611ecc573d6000803e3d6000fd5b5050600060cf555050565b6097546001600160a01b0316331480611efa575060ca546001600160a01b031633145b611f165760405162461bcd60e51b81526004016105d3906134cd565b60026001541415611f695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105d3565b600260015560655460ff1615611f915760405162461bcd60e51b81526004016105d390613569565b6001600160a01b038416611fd95760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b60448201526064016105d3565b8251825181146120245760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b60448201526064016105d3565b60c95460009061204090600690600160a01b900460ff1661369c565b61204b90600a61368d565b90506000805b838110156120d5578286828151811061206c5761206c613593565b602002602001015161207e9190613510565b86828151811061209057612090613593565b6020026020010181815250508581815181106120ae576120ae613593565b6020026020010151826120c19190613551565b9150806120cd816136bf565b915050612051565b50806000106121195760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b60448201526064016105d3565b6001600160a01b038716600090815260d5602052604090205484116121725760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b60448201526064016105d3565b6001600160a01b03808816600090815260d56020526040902085905560c95461219c911682612b77565b600085815260d660205260409020556121bc846121b7611bda565b61264b565b60c9546121d4906001600160a01b0316883084612cac565b6000806121df611b58565b909250905060006121f182600a61368d565b60c954849061220b90600160a01b900460ff16601261369c565b61221690600a61368d565b6122209087613510565b61222a9190613510565b612234919061352f565b60cf549091501561224757612247612749565b600080612254868b61285d565b909250905081156122c45760cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190612291908e9085906004016133a7565b600060405180830381600087803b1580156122ab57600080fd5b505af11580156122bf573d6000803e3d6000fd5b505050505b6122cf836001612697565b60c9546040517fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f9161232e918f918a916001600160a01b03909116906001600160a01b0393841681526020810192909252909116604082015260600190565b60405180910390a150506001805550505050505050505050565b6123506123ff565b6001600160a01b031661236b6097546001600160a01b031690565b6001600160a01b0316146123915760405162461bcd60e51b81526004016105d390613453565b6001600160a01b0381166123f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b61097a81612a33565b60006018361080159061241c575060d1546001600160a01b031633145b1561242e575060131936013560601c90565b503390565b60008054610100900460ff161561247a578160ff1660011480156124565750303b155b6124725760405162461bcd60e51b81526004016105d39061384a565b506000919050565b60005460ff8084169116106124a15760405162461bcd60e51b81526004016105d39061384a565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166124e75760405162461bcd60e51b81526004016105d390613898565b610e01612ce4565b8015806125785750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257691906134b4565b155b6125e35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105d3565b6040516001600160a01b03831660248201526044810182905261264690849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d1b565b505050565b604080518082018252828152426020808301918252600086815260d49091529290922090518155905160019091015560d2546126875760d28290555b8160d3541015610ff7575060d355565b60cf546001821515146126c7578260cf54116126b45760006126d5565b8260cf546126c29190613833565b6126d5565b8260cf546126d59190613551565b60cf81905560408051918252602082018390527f07b7fa586c4fdef11992d9448b97ba78814c23ddec7e1d4bf195fda6716e472691015b60405180910390a1505050565b6040516001600160a01b03831660248201526044810182905261264690849063a9059cbb60e01b9060640161260f565b60cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b15801561278e57600080fd5b505afa1580156127a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c691906134b4565b60cf5490915060008183111561281f5760006127e28385613833565b905061271060cd54826127f59190613510565b6127ff919061352f565b91508160d060008282546128139190613551565b90915550505060cf8390555b60408051848152602081018490529081018290527fa3e3c8c92ed1e364d04865f99cd96c3ae8f5a7d800f4a1d8148a58c6de6f1b719060600161270c565b60d0546000906060908015612a2a57600080612877611b58565b60c9549193509150600090839061289990600160a01b900460ff16601261369c565b6128a490600a61368d565b6128ae9190613510565b6128b983600a61368d565b6128c39086613510565b6128cd919061352f565b87519091508890818310156128f157600095506128ea838b613833565b9950612952565b6128fc84600a61368d565b60c954869061291690600160a01b900460ff16601261369c565b61292190600a61368d565b61292b908d613510565b6129359190613510565b61293f919061352f565b6129499087613833565b60009a90965092505b60d086905560005b818110156129c157828b8b838151811061297657612976613593565b60200260200101516129889190613510565b612992919061352f565b8a82815181106129a4576129a4613593565b6020908102919091010152806129b9816136bf565b91505061295a565b5060ce5460c9546129df916001600160a01b03918216911685612719565b60c954604080518581526001600160a01b0390921660208301527f6e027f1905abd7233c51c9483e29a545074ed10d39db528c9791a246b26741ff910160405180910390a150505050505b50929391925050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16612ace5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d3565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b016123ff565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615612b415760405162461bcd60e51b81526004016105d390613569565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b016123ff565b60cc5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b158015612bc257600080fd5b505afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa9190613807565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3957600080fd5b505afa158015612c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c719190613499565b9050612c7e82600a61368d565b83612c8e878460ff166012612ded565b612c989190613510565b612ca2919061352f565b9695505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112779085906323b872dd60e01b9060840161260f565b600054610100900460ff16612d0b5760405162461bcd60e51b81526004016105d390613898565b610e01612d166123ff565b612a33565b6000612d70826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e529092919063ffffffff16565b8051909150156126465780806020019051810190612d8e91906138e3565b6126465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d3565b600081831415612dfe575082612e4b565b81831015612e2c57612e108383613833565b612e1b90600a613905565b612e259085613510565b9050612e4b565b612e368284613833565b612e4190600a613905565b612e25908561352f565b9392505050565b6060612e618484600085612e69565b949350505050565b606082471015612eca5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105d3565b6001600160a01b0385163b612f215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d3565b600080866001600160a01b03168587604051612f3d9190613911565b60006040518083038185875af1925050503d8060008114612f7a576040519150601f19603f3d011682016040523d82523d6000602084013e612f7f565b606091505b5091509150612f8f828286612f9a565b979650505050505050565b60608315612fa9575081612e4b565b825115612fb95782518084602001fd5b8160405162461bcd60e51b81526004016105d391906130f0565b600060208284031215612fe557600080fd5b5035919050565b6001600160a01b038116811461097a57600080fd5b60006020828403121561301357600080fd5b8135612e4b81612fec565b600080600080600060a0868803121561303657600080fd5b853561304181612fec565b9450602086013561305181612fec565b9350604086013561306181612fec565b9250606086013561307181612fec565b9150608086013561308181612fec565b809150509295509295909350565b6000806000606084860312156130a457600080fd5b83356130af81612fec565b95602085013595506040909401359392505050565b60005b838110156130df5781810151838201526020016130c7565b838111156112775750506000910152565b602081526000825180602084015261310f8160408501602087016130c4565b601f01601f19169190910160400192915050565b60008060006060848603121561313857600080fd5b8335925060208401359150604084013561315181612fec565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561319b5761319b61315c565b604052919050565b600067ffffffffffffffff8211156131bd576131bd61315c565b5060051b60200190565b600082601f8301126131d857600080fd5b813560206131ed6131e8836131a3565b613172565b82815260059290921b8401810191818101908684111561320c57600080fd5b8286015b8481101561323057803561322381612fec565b8352918301918301613210565b509695505050505050565b600082601f83011261324c57600080fd5b8135602061325c6131e8836131a3565b82815260059290921b8401810191818101908684111561327b57600080fd5b8286015b84811015613230578035835291830191830161327f565b600080604083850312156132a957600080fd5b823567ffffffffffffffff808211156132c157600080fd5b6132cd868387016131c7565b935060208501359150808211156132e357600080fd5b506132f08582860161323b565b9150509250929050565b600081518084526020808501945080840160005b8381101561332a5781518752958201959082019060010161330e565b509495945050505050565b600081518084526020808501945080840160005b8381101561332a5781516001600160a01b031687529582019590820190600101613349565b60608152600061338160608301866132fa565b82810360208401526133938186613335565b90508281036040840152612ca281856132fa565b6040815260006133ba6040830185613335565b82810360208401526133cc81856132fa565b95945050505050565b600080600080608085870312156133eb57600080fd5b84356133f681612fec565b9350602085013567ffffffffffffffff8082111561341357600080fd5b61341f888389016131c7565b9450604087013591508082111561343557600080fd5b506134428782880161323b565b949793965093946060013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805160ff811681146124bb57600080fd5b6000602082840312156134ab57600080fd5b612e4b82613488565b6000602082840312156134c657600080fd5b5051919050565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561352a5761352a6134fa565b500290565b60008261354c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115613564576135646134fa565b500190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600181815b808511156135e45781600019048211156135ca576135ca6134fa565b808516156135d757918102915b93841c93908002906135ae565b509250929050565b6000826135fb575060016117fe565b81613608575060006117fe565b816001811461361e576002811461362857613644565b60019150506117fe565b60ff841115613639576136396134fa565b50506001821b6117fe565b5060208310610133831016604e8410600b8410161715613667575081810a6117fe565b61367183836135a9565b8060001904821115613685576136856134fa565b029392505050565b6000612e4b60ff8416836135ec565b600060ff821660ff8416808210156136b6576136b66134fa565b90039392505050565b60006000198214156136d3576136d36134fa565b5060010190565b6000816136e9576136e96134fa565b506000190190565b600082601f83011261370257600080fd5b815160206137126131e8836131a3565b82815260059290921b8401810191818101908684111561373157600080fd5b8286015b848110156132305780518352918301918301613735565b6000806040838503121561375f57600080fd5b825167ffffffffffffffff8082111561377757600080fd5b818501915085601f83011261378b57600080fd5b8151602061379b6131e8836131a3565b82815260059290921b840181019181810190898411156137ba57600080fd5b948201945b838610156137e15785516137d281612fec565b825294820194908201906137bf565b918801519196509093505050808211156137fa57600080fd5b506132f0858286016136f1565b6000806040838503121561381a57600080fd5b8251915061382a60208401613488565b90509250929050565b600082821015613845576138456134fa565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156138f557600080fd5b81518015158114612e4b57600080fd5b6000612e4b83836135ec565b600082516139238184602087016130c4565b919091019291505056fea2646970667358221220fb2bd684e8946550963caa6f44283de5c6f17599bf2e5b0450aa5ad21f17c34064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80638855c91a11610146578063bd244af4116100c3578063e63cfa3b11610087578063e63cfa3b1461050d578063efca0d0714610549578063f13dc2e214610552578063f2fde38b1461055b578063f851a4401461056e578063ffec4eb11461058157600080fd5b8063bd244af4146104cf578063c54e44eb146104d7578063c89d5b8b146104ea578063db2e21bc146104f2578063e5e19776146104fa57600080fd5b8063a8c62e761161010a578063a8c62e761461045d578063a9d98f5914610470578063aae0923614610483578063ac25f6891461049a578063b47c6a27146104b057600080fd5b80638855c91a146104145780638da5cb5b1461041d5780639af1d35a1461042e5780639b86088214610437578063a8602fea1461044a57600080fd5b8063476343ee116101d45780635c975abb116101985780635c975abb146103c85780636d2b3d7b146103d3578063704b6c02146103e6578063715018a6146103f95780637da0a8771461040157600080fd5b8063476343ee14610352578063486ff0cd1461035a578063530e784f1461037d578063564b81ef14610390578063572b6c051461039657600080fd5b80632630c12f1161021b5780632630c12f146102e657806333a100ca1461031157806345d207ec146103245780634626402b14610337578063470343d81461034a57600080fd5b8063057feb99146102585780630b47b7ff1461028b5780630d8b76a8146102a05780631459457a146102b357806319dac5af146102c6575b600080fd5b610278610266366004612fd3565b60d66020526000908152604090205481565b6040519081526020015b60405180910390f35b61029e610299366004612fd3565b61058a565b005b61029e6102ae366004613001565b610634565b61029e6102c136600461301e565b61069f565b6102786102d4366004613001565b60d56020526000908152604090205481565b60cc546102f9906001600160a01b031681565b6040516001600160a01b039091168152602001610282565b61029e61031f366004613001565b610874565b61029e61033236600461308f565b61097d565b60ce546102f9906001600160a01b031681565b61029e610d97565b61029e610e03565b60408051808201825260018152603160f81b6020820152905161028291906130f0565b61029e61038b366004613001565b610ffb565b46610278565b6103b86103a4366004613001565b60d1546001600160a01b0391821691161490565b6040519015158152602001610282565b60655460ff166103b8565b61029e6103e1366004613123565b611066565b61029e6103f4366004613001565b61127d565b61029e611328565b60d1546102f9906001600160a01b031681565b61027860d35481565b6097546001600160a01b03166102f9565b61027860d05481565b61029e610445366004613296565b61137b565b61029e610458366004613001565b6116d7565b60cb546102f9906001600160a01b031681565b61027861047e366004612fd3565b61177a565b61048b611804565b6040516102829392919061336e565b6104a2611ac3565b6040516102829291906133a7565b6104b8611b58565b6040805192835260ff909116602083015201610282565b610278611bda565b60c9546102f9906001600160a01b031681565b610278611d7c565b61029e611dfe565b61029e6105083660046133d5565b611ed7565b61053461051b366004612fd3565b60d4602052600090815260409020805460019091015482565b60408051928352602083019190915201610282565b61027860cd5481565b61027860cf5481565b61029e610569366004613001565b612348565b60ca546102f9906001600160a01b031681565b61027860d25481565b6105926123ff565b6001600160a01b03166105ad6097546001600160a01b031690565b6001600160a01b0316146105dc5760405162461bcd60e51b81526004016105d390613453565b60405180910390fd5b610bb960cd541061062f5760405162461bcd60e51b815260206004820152601760248201527f50726f666974206665652063616e6e6f74203e2033302500000000000000000060448201526064016105d3565b60cd55565b61063c6123ff565b6001600160a01b03166106576097546001600160a01b031690565b6001600160a01b03161461067d5760405162461bcd60e51b81526004016105d390613453565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60006106ab6001612433565b905080156106c3576000805461ff0019166101001790555b6106cb6124c0565b60ce80546001600160a01b038089166001600160a01b03199283161790925560ca805488841690831617905560cb805487841690831617905560cc80548684169083161790556107d060cd5560c9805492851692909116821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b15801561075c57600080fd5b505afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190613499565b60c9805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156108065760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d203600000000000000000060448201526064016105d3565b60cb5460c954610825916001600160a01b0391821691166000196124ef565b801561086c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050505050565b61087c6123ff565b6001600160a01b03166108976097546001600160a01b031690565b6001600160a01b0316146108bd5760405162461bcd60e51b81526004016105d390613453565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095791906134b4565b61097a5760cb5460c95461097a916001600160a01b0391821691166000196124ef565b50565b6097546001600160a01b03163314806109a0575060ca546001600160a01b031633145b6109bc5760405162461bcd60e51b81526004016105d3906134cd565b60026001541415610a0f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105d3565b600260015581610a565760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b60448201526064016105d3565b670de0b6b3a7640000821115610a9a5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016105d3565b6000610aa4611bda565b90506000670de0b6b3a7640000610abb8584613510565b610ac5919061352f565b6001600160a01b038616600090815260d560205260409020549091508311610b215760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b60448201526064016105d3565b6001600160a01b038516600090815260d56020908152604080832086905585835260d69091529020819055610b56838361264b565b600060d05483610b669190613551565b610b7883670de0b6b3a7640000613510565b610b82919061352f565b90506000610b9260655460ff1690565b610c815760cb5460405163ed47d90960e01b8152600481018490526001600160a01b039091169063ed47d90990602401600060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f91906134b4565b9050610c7c836000612697565b610d1f565b60c9546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0891906134b4565b610d129190613510565b610d1c919061352f565b90505b60c954610d36906001600160a01b03168883612719565b60c954604080516001600160a01b038a81168252602082018790529092168282015260608201889052517f457f950b75085c30ff780acd57bde642ff1316cc4aad9f286af2c1ffc4163a789181900360800190a15050600180555050505050565b6097546001600160a01b0316331480610dba575060ca546001600160a01b031633145b610dd65760405162461bcd60e51b81526004016105d3906134cd565b60655460ff1615610df95760405162461bcd60e51b81526004016105d390613569565b610e01612749565b565b6097546001600160a01b0316331480610e26575060ca546001600160a01b031633145b610e425760405162461bcd60e51b81526004016105d3906134cd565b60655460ff16610f665760cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906134b4565b60d0549091506000828210610ee657670de0b6b3a7640000610f03565b82610ef983670de0b6b3a7640000613510565b610f03919061352f565b60cb5460405163ed47d90960e01b8152600481018390529192506001600160a01b03169063ed47d90990602401600060405180830381600087803b158015610f4a57600080fd5b505af1158015610f5e573d6000803e3d6000fd5b505050505050505b60c9546040516370a0823160e01b8152306004820152610ff7916001600160a01b0316906370a082319060240160206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906134b4565b60408051600081526020810190915261285d565b5050565b6110036123ff565b6001600160a01b031661101e6097546001600160a01b031690565b6001600160a01b0316146110445760405162461bcd60e51b81526004016105d390613453565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b0316331480611089575060ca546001600160a01b031633145b6110a55760405162461bcd60e51b81526004016105d3906134cd565b60cb5460405163778d98b360e11b815260048101859052602481018490526000916001600160a01b03169063ef1b316690604401602060405180830381600087803b1580156110f357600080fd5b505af1158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b91906134b4565b905080156112775760408051600180825281830190925260009160208083019080368337019050509050828160008151811061116957611169613593565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905082816000815181106111ba576111ba613593565b602090810291909101015260cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b71906111f790859085906004016133a7565b600060405180830381600087803b15801561121157600080fd5b505af1158015611225573d6000803e3d6000fd5b505060408051898152602081018990529081018690526001600160a01b03871660608201527f2be1fd30870a31378112c815f24e8611c8a87ed036bce5cf5670a8e34dbf210a92506080019050610863565b50505050565b6112856123ff565b6001600160a01b03166112a06097546001600160a01b031690565b6001600160a01b0316146112c65760405162461bcd60e51b81526004016105d390613453565b60ca80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b6113306123ff565b6001600160a01b031661134b6097546001600160a01b031690565b6001600160a01b0316146113715760405162461bcd60e51b81526004016105d390613453565b610e016000612a33565b6097546001600160a01b031633148061139e575060ca546001600160a01b031633145b6113ba5760405162461bcd60e51b81526004016105d3906134cd565b60655460ff166114035760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d3565b81518151811461144e5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b60448201526064016105d3565b611456612a85565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561149a57600080fd5b505afa1580156114ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d291906134b4565b90508015611277576000806114e5611b58565b909250905060006114f782600a61368d565b60c954849061151190600160a01b900460ff16601261369c565b61151c90600a61368d565b6115269087613510565b6115309190613510565b61153a919061352f565b90506000805b868110156115775787818151811061155a5761155a613593565b60200260200101519150808061156f906136bf565b915050611540565b5060008667ffffffffffffffff8111156115935761159361315c565b6040519080825280602002602001820160405280156115bc578160200160208202803683370190505b50905060005b878110156116295782878a83815181106115de576115de613593565b60200260200101516115f09190613510565b6115fa919061352f565b82828151811061160c5761160c613593565b602090810291909101015280611621816136bf565b9150506115c2565b5060cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b719061165c908c9085906004016133a7565b600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b50505050611699836001612697565b6040518681527fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed79060200160405180910390a1505050505050505050565b6116df6123ff565b6001600160a01b03166116fa6097546001600160a01b031690565b6001600160a01b0316146117205760405162461bcd60e51b81526004016105d390613453565b60ce80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed7910161131c565b600060d2546000146117f65760d25482101561179857506000919050565b60d35482116117f657815b60d25481106117f457600081815260d4602090815260409182902082518084019093528054835260010154908201819052156117e157519392505050565b50806117ec816136da565b9150506117a3565b505b6117fe611bda565b92915050565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611893919081019061374c565b80519193509150468167ffffffffffffffff8111156118b4576118b461315c565b6040519080825280602002602001820160405280156118dd578160200160208202803683370190505b50945060005b8281101561191b57818682815181106118fe576118fe613593565b602090810291909101015280611913816136bf565b9150506118e3565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561196057600080fd5b505afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199891906134b4565b90506000811180156119aa5750600083115b15611abb576000806119ba611b58565b909250905060006119cc82600a61368d565b60c95484906119e690600160a01b900460ff16601261369c565b6119f190600a61368d565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611a3457600080fd5b505afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c91906134b4565b611a769190613510565b611a809190613510565b611a8a919061352f565b90508087600081518110611aa057611aa0613593565b60200260200101818151611ab49190613551565b9052505050505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b158015611b1457600080fd5b505afa158015611b28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b50919081019061374c565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b158015611ba257600080fd5b505afa158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b509190613807565b600080611be960655460ff1690565b15611cd057600080611bf9611b58565b9092509050611c0981600a61368d565b60c9548390611c2390600160a01b900460ff16601261369c565b611c2e90600a61368d565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611c7157600080fd5b505afa158015611c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca991906134b4565b611cb39190613510565b611cbd9190613510565b611cc7919061352f565b92505050611d59565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1e57600080fd5b505afa158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5691906134b4565b90505b60d0548111611d69576000611d76565b60d054611d769082613833565b91505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b158015611dc157600080fd5b505afa158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df991906134b4565b905090565b6097546001600160a01b0316331480611e21575060ca546001600160a01b031633145b611e3d5760405162461bcd60e51b81526004016105d3906134cd565b60655460ff1615611e605760405162461bcd60e51b81526004016105d390613569565b611e68612b1e565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611eb857600080fd5b505af1158015611ecc573d6000803e3d6000fd5b5050600060cf555050565b6097546001600160a01b0316331480611efa575060ca546001600160a01b031633145b611f165760405162461bcd60e51b81526004016105d3906134cd565b60026001541415611f695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105d3565b600260015560655460ff1615611f915760405162461bcd60e51b81526004016105d390613569565b6001600160a01b038416611fd95760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b60448201526064016105d3565b8251825181146120245760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b60448201526064016105d3565b60c95460009061204090600690600160a01b900460ff1661369c565b61204b90600a61368d565b90506000805b838110156120d5578286828151811061206c5761206c613593565b602002602001015161207e9190613510565b86828151811061209057612090613593565b6020026020010181815250508581815181106120ae576120ae613593565b6020026020010151826120c19190613551565b9150806120cd816136bf565b915050612051565b50806000106121195760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b60448201526064016105d3565b6001600160a01b038716600090815260d5602052604090205484116121725760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b60448201526064016105d3565b6001600160a01b03808816600090815260d56020526040902085905560c95461219c911682612b77565b600085815260d660205260409020556121bc846121b7611bda565b61264b565b60c9546121d4906001600160a01b0316883084612cac565b6000806121df611b58565b909250905060006121f182600a61368d565b60c954849061220b90600160a01b900460ff16601261369c565b61221690600a61368d565b6122209087613510565b61222a9190613510565b612234919061352f565b60cf549091501561224757612247612749565b600080612254868b61285d565b909250905081156122c45760cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190612291908e9085906004016133a7565b600060405180830381600087803b1580156122ab57600080fd5b505af11580156122bf573d6000803e3d6000fd5b505050505b6122cf836001612697565b60c9546040517fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f9161232e918f918a916001600160a01b03909116906001600160a01b0393841681526020810192909252909116604082015260600190565b60405180910390a150506001805550505050505050505050565b6123506123ff565b6001600160a01b031661236b6097546001600160a01b031690565b6001600160a01b0316146123915760405162461bcd60e51b81526004016105d390613453565b6001600160a01b0381166123f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105d3565b61097a81612a33565b60006018361080159061241c575060d1546001600160a01b031633145b1561242e575060131936013560601c90565b503390565b60008054610100900460ff161561247a578160ff1660011480156124565750303b155b6124725760405162461bcd60e51b81526004016105d39061384a565b506000919050565b60005460ff8084169116106124a15760405162461bcd60e51b81526004016105d39061384a565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166124e75760405162461bcd60e51b81526004016105d390613898565b610e01612ce4565b8015806125785750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257691906134b4565b155b6125e35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105d3565b6040516001600160a01b03831660248201526044810182905261264690849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d1b565b505050565b604080518082018252828152426020808301918252600086815260d49091529290922090518155905160019091015560d2546126875760d28290555b8160d3541015610ff7575060d355565b60cf546001821515146126c7578260cf54116126b45760006126d5565b8260cf546126c29190613833565b6126d5565b8260cf546126d59190613551565b60cf81905560408051918252602082018390527f07b7fa586c4fdef11992d9448b97ba78814c23ddec7e1d4bf195fda6716e472691015b60405180910390a1505050565b6040516001600160a01b03831660248201526044810182905261264690849063a9059cbb60e01b9060640161260f565b60cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b15801561278e57600080fd5b505afa1580156127a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c691906134b4565b60cf5490915060008183111561281f5760006127e28385613833565b905061271060cd54826127f59190613510565b6127ff919061352f565b91508160d060008282546128139190613551565b90915550505060cf8390555b60408051848152602081018490529081018290527fa3e3c8c92ed1e364d04865f99cd96c3ae8f5a7d800f4a1d8148a58c6de6f1b719060600161270c565b60d0546000906060908015612a2a57600080612877611b58565b60c9549193509150600090839061289990600160a01b900460ff16601261369c565b6128a490600a61368d565b6128ae9190613510565b6128b983600a61368d565b6128c39086613510565b6128cd919061352f565b87519091508890818310156128f157600095506128ea838b613833565b9950612952565b6128fc84600a61368d565b60c954869061291690600160a01b900460ff16601261369c565b61292190600a61368d565b61292b908d613510565b6129359190613510565b61293f919061352f565b6129499087613833565b60009a90965092505b60d086905560005b818110156129c157828b8b838151811061297657612976613593565b60200260200101516129889190613510565b612992919061352f565b8a82815181106129a4576129a4613593565b6020908102919091010152806129b9816136bf565b91505061295a565b5060ce5460c9546129df916001600160a01b03918216911685612719565b60c954604080518581526001600160a01b0390921660208301527f6e027f1905abd7233c51c9483e29a545074ed10d39db528c9791a246b26741ff910160405180910390a150505050505b50929391925050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16612ace5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105d3565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b016123ff565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615612b415760405162461bcd60e51b81526004016105d390613569565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b016123ff565b60cc5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b158015612bc257600080fd5b505afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa9190613807565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3957600080fd5b505afa158015612c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c719190613499565b9050612c7e82600a61368d565b83612c8e878460ff166012612ded565b612c989190613510565b612ca2919061352f565b9695505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112779085906323b872dd60e01b9060840161260f565b600054610100900460ff16612d0b5760405162461bcd60e51b81526004016105d390613898565b610e01612d166123ff565b612a33565b6000612d70826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e529092919063ffffffff16565b8051909150156126465780806020019051810190612d8e91906138e3565b6126465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d3565b600081831415612dfe575082612e4b565b81831015612e2c57612e108383613833565b612e1b90600a613905565b612e259085613510565b9050612e4b565b612e368284613833565b612e4190600a613905565b612e25908561352f565b9392505050565b6060612e618484600085612e69565b949350505050565b606082471015612eca5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105d3565b6001600160a01b0385163b612f215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d3565b600080866001600160a01b03168587604051612f3d9190613911565b60006040518083038185875af1925050503d8060008114612f7a576040519150601f19603f3d011682016040523d82523d6000602084013e612f7f565b606091505b5091509150612f8f828286612f9a565b979650505050505050565b60608315612fa9575081612e4b565b825115612fb95782518084602001fd5b8160405162461bcd60e51b81526004016105d391906130f0565b600060208284031215612fe557600080fd5b5035919050565b6001600160a01b038116811461097a57600080fd5b60006020828403121561301357600080fd5b8135612e4b81612fec565b600080600080600060a0868803121561303657600080fd5b853561304181612fec565b9450602086013561305181612fec565b9350604086013561306181612fec565b9250606086013561307181612fec565b9150608086013561308181612fec565b809150509295509295909350565b6000806000606084860312156130a457600080fd5b83356130af81612fec565b95602085013595506040909401359392505050565b60005b838110156130df5781810151838201526020016130c7565b838111156112775750506000910152565b602081526000825180602084015261310f8160408501602087016130c4565b601f01601f19169190910160400192915050565b60008060006060848603121561313857600080fd5b8335925060208401359150604084013561315181612fec565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561319b5761319b61315c565b604052919050565b600067ffffffffffffffff8211156131bd576131bd61315c565b5060051b60200190565b600082601f8301126131d857600080fd5b813560206131ed6131e8836131a3565b613172565b82815260059290921b8401810191818101908684111561320c57600080fd5b8286015b8481101561323057803561322381612fec565b8352918301918301613210565b509695505050505050565b600082601f83011261324c57600080fd5b8135602061325c6131e8836131a3565b82815260059290921b8401810191818101908684111561327b57600080fd5b8286015b84811015613230578035835291830191830161327f565b600080604083850312156132a957600080fd5b823567ffffffffffffffff808211156132c157600080fd5b6132cd868387016131c7565b935060208501359150808211156132e357600080fd5b506132f08582860161323b565b9150509250929050565b600081518084526020808501945080840160005b8381101561332a5781518752958201959082019060010161330e565b509495945050505050565b600081518084526020808501945080840160005b8381101561332a5781516001600160a01b031687529582019590820190600101613349565b60608152600061338160608301866132fa565b82810360208401526133938186613335565b90508281036040840152612ca281856132fa565b6040815260006133ba6040830185613335565b82810360208401526133cc81856132fa565b95945050505050565b600080600080608085870312156133eb57600080fd5b84356133f681612fec565b9350602085013567ffffffffffffffff8082111561341357600080fd5b61341f888389016131c7565b9450604087013591508082111561343557600080fd5b506134428782880161323b565b949793965093946060013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805160ff811681146124bb57600080fd5b6000602082840312156134ab57600080fd5b612e4b82613488565b6000602082840312156134c657600080fd5b5051919050565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561352a5761352a6134fa565b500290565b60008261354c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115613564576135646134fa565b500190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600181815b808511156135e45781600019048211156135ca576135ca6134fa565b808516156135d757918102915b93841c93908002906135ae565b509250929050565b6000826135fb575060016117fe565b81613608575060006117fe565b816001811461361e576002811461362857613644565b60019150506117fe565b60ff841115613639576136396134fa565b50506001821b6117fe565b5060208310610133831016604e8410600b8410161715613667575081810a6117fe565b61367183836135a9565b8060001904821115613685576136856134fa565b029392505050565b6000612e4b60ff8416836135ec565b600060ff821660ff8416808210156136b6576136b66134fa565b90039392505050565b60006000198214156136d3576136d36134fa565b5060010190565b6000816136e9576136e96134fa565b506000190190565b600082601f83011261370257600080fd5b815160206137126131e8836131a3565b82815260059290921b8401810191818101908684111561373157600080fd5b8286015b848110156132305780518352918301918301613735565b6000806040838503121561375f57600080fd5b825167ffffffffffffffff8082111561377757600080fd5b818501915085601f83011261378b57600080fd5b8151602061379b6131e8836131a3565b82815260059290921b840181019181810190898411156137ba57600080fd5b948201945b838610156137e15785516137d281612fec565b825294820194908201906137bf565b918801519196509093505050808211156137fa57600080fd5b506132f0858286016136f1565b6000806040838503121561381a57600080fd5b8251915061382a60208401613488565b90509250929050565b600082821015613845576138456134fa565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156138f557600080fd5b81518015158114612e4b57600080fd5b6000612e4b83836135ec565b600082516139238184602087016130c4565b919091019291505056fea2646970667358221220fb2bd684e8946550963caa6f44283de5c6f17599bf2e5b0450aa5ad21f17c34064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositByAdmin(address,address[],uint256[],uint256)": {
        "params": {
          "_USDTAmts": "amounts of USDT should be deposited to each pools. It's 6 decimals"
        }
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawPercByAdmin(address,uint256,uint256)": {
        "params": {
          "_sharePerc": "percentage of assets which should be withdrawn. It's 18 decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositByAdmin(address,address[],uint256[],uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 390,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 434,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2709,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5863,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "USDT",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20UpgradeableExt)51017"
      },
      {
        "astId": 5865,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "201",
        "type": "t_uint8"
      },
      {
        "astId": 5867,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "admin",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 5870,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "strategy",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IStrategy)5845"
      },
      {
        "astId": 5873,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "priceOracle",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IPriceOracle)9022"
      },
      {
        "astId": 5875,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "profitFeePerc",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 5877,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 5879,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "watermark",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 5881,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "fees",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 5883,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 5885,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "firstOperationNonce",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 5887,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "lastOperationNonce",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 5892,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "poolAtNonce",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_uint256,t_struct(PoolSnapshot)5860_storage)"
      },
      {
        "astId": 5896,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "userLastOperationNonce",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5900,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "operationAmounts",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)51017": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)9022": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)5845": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PoolSnapshot)5860_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BNIVault.PoolSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolSnapshot)5860_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolSnapshot)5860_storage": {
        "encoding": "inplace",
        "label": "struct BNIVault.PoolSnapshot",
        "members": [
          {
            "astId": 5857,
            "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
            "label": "poolInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5859,
            "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}