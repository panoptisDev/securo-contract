{
  "address": "0x48203cA1d7dF09e05a832D462fd6227f6Ef2Db28",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryWallet",
          "type": "address"
        }
      ],
      "name": "SetTreasuryWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AVAXVault",
      "outputs": [
        {
          "internalType": "contract IStVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEmergencyWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimer2ReqIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "getAllUnbonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "waitingInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unbondedInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waitForTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmergencyWithdrawalUnbonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "waitingInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unbondedInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waitForTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolUnbonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "waiting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waitingInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unbonded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unbondedInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waitForTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "getPoolsUnbonded",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "waitings",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "waitingInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "unbondeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "unbondedInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "waitForTses",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SWAP_BASE_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IStVault",
          "name": "_AVAXVault",
          "type": "address"
        }
      ],
      "name": "initialize1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reqId2Index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStVault",
          "name": "_AVAXVault",
          "type": "address"
        }
      ],
      "name": "setStVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x99f756515053ee03d25d3179fc360993fa6a0aecb465cc97203dfab05671b708",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x48203cA1d7dF09e05a832D462fd6227f6Ef2Db28",
    "transactionIndex": 0,
    "gasUsed": "4107493",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb4794d7e269b22c365df6506e63873fb7a22fdde4404953ae25490bf307ec911",
    "transactionHash": "0x99f756515053ee03d25d3179fc360993fa6a0aecb465cc97203dfab05671b708",
    "logs": [],
    "blockNumber": 12279756,
    "cumulativeGasUsed": "4107493",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6644b0a9238d655c0d3bed5065c63e58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVAXVault\",\"outputs\":[{\"internalType\":\"contract IStVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_BASE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEmergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimer2ReqIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getAllUnbonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"waitingInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondedInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitForTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyWithdrawalUnbonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"waitingInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondedInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitForTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolUnbonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"waiting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitingInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbonded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondedInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitForTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getPoolsUnbonded\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"waitings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"waitingInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondedInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"waitForTses\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SWAP_BASE_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IStVault\",\"name\":\"_AVAXVault\",\"type\":\"address\"}],\"name\":\"initialize1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reqId2Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStVault\",\"name\":\"_AVAXVault\",\"type\":\"address\"}],\"name\":\"setStVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPoolUnbonded(address,uint256)\":{\"returns\":{\"unbonded\":\"is token amount that is unbonded.\",\"unbondedInUSD\":\"is USD value of token amount that is unbonded.\",\"waitForTs\":\"is timestamp to wait to the next claim.\",\"waiting\":\"is token amount that is not unbonded.\",\"waitingInUSD\":\"is USD value of token amount that is not unbonded.\"}},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"invest(address[],uint256[])\":{\"params\":{\"_USDTAmts\":\"amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"reinvest(address[],uint256[])\":{\"params\":{\"_USDTAmts\":\"amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sti/strategy/AvaxSTIStrategyTest.sol\":\"AvaxSTIStrategyTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664; // Should be replaced with testnet address\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x7536e002827bce7dde31950fff83577b8236433829ddd5c4c13b31ae5fb99ebe\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/sti/strategy/AvaxSTIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./BasicSTIStrategy.sol\\\";\\nimport \\\"../../bni/constant/AvaxConstant.sol\\\";\\nimport \\\"../../../interfaces/IStVault.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\n\\ninterface IJoeRouter {\\n    function swapExactAVAXForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\\ncontract AvaxSTIStrategy is BasicSTIStrategy {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IStVault public AVAXVault;\\n\\n    function initialize1(\\n        address _admin,\\n        address _priceOracle,\\n        IStVault _AVAXVault\\n    ) public virtual initializer {\\n        super.initialize(\\n            _admin,\\n            _priceOracle,\\n            0x60aE616a2155Ee3d9A68541Ba4544862310933d4, // TraderJoe\\n            AvaxConstant.WAVAX,\\n            AvaxConstant.USDT,\\n            Const.NATIVE_ASSET\\n        );\\n\\n        AVAXVault = _AVAXVault;\\n    }\\n\\n    function setStVault(IStVault _AVAXVault) external onlyOwner {\\n        AVAXVault = _AVAXVault;\\n    }\\n\\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\\n        if (_token == Const.NATIVE_ASSET) {\\n            stVault = AVAXVault;\\n        }\\n    }\\n\\n    function _swapETH(address _tokenB, uint _amt, uint _minAmount) internal override returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(SWAP_BASE_TOKEN);\\n        path[1] = _tokenB;\\n        return (IJoeRouter(address(router)).swapExactAVAXForTokens{value: _amt}(_minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swapForETH(address _tokenA, uint _amt, uint _minAmount) internal override returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = address(SWAP_BASE_TOKEN);\\n        return (IJoeRouter(address(router)).swapExactTokensForAVAX(_amt, _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n}\\n\",\"keccak256\":\"0x56532b42e762dcf04f975321d842b82b9762eda1a066661f8594d55d20a241d8\",\"license\":\"MIT\"},\"contracts/sti/strategy/AvaxSTIStrategyTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./AvaxSTIStrategy.sol\\\";\\nimport \\\"../../bni/constant/AvaxConstantTest.sol\\\";\\nimport \\\"../../../interfaces/IStVault.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\n\\ncontract AvaxSTIStrategyTest is AvaxSTIStrategy {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    function initialize1(\\n        address _admin,\\n        address _priceOracle,\\n        IStVault _AVAXVault\\n    ) public override initializer {\\n        super.initialize(\\n            _admin,\\n            _priceOracle,\\n            0xd7f655E3376cE2D7A2b08fF01Eb3B1023191A901, // TraderJoe\\n            AvaxConstantTest.WAVAX,\\n            AvaxConstantTest.USDT,\\n            Const.NATIVE_ASSET\\n        );\\n\\n        AVAXVault = _AVAXVault;\\n    }\\n}\\n\",\"keccak256\":\"0x50820c3a56a8ce072e326be5c1aeb0f5cd94e83a6dee0ec0d4c6da23f0e41cab\",\"license\":\"MIT\"},\"contracts/sti/strategy/BasicSTIStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../bni/priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../../interfaces/IUniRouter.sol\\\";\\nimport \\\"../../../interfaces/IStVault.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\n\\ncontract BasicSTIStrategy is PausableUpgradeable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    IUniRouter public router;\\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    address public admin;\\n    address public vault;\\n    IPriceOracle public priceOracle;\\n\\n    address[] public tokens;\\n    mapping(address => uint) public pid; // Pool indices in tokens array\\n\\n    // maps the address to array of the owned tokens, the first key is token address.\\n    mapping(address => mapping(address => uint[])) public claimer2ReqIds;\\n    // reqId can be owned by only one address at the time, therefore reqId is present in only one of those arrays in the mapping\\n    // this mapping stores the index of the reqId in one of those arrays, the first key is token address.\\n    mapping(address => mapping(uint => uint)) public reqId2Index;\\n\\n    event AddToken(address token, uint pid);\\n    event RemoveToken(address token, uint pid);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event Claim(address claimer, address token, uint tokenAmt, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _admin,\\n        address _priceOracle,\\n        address _router, address _SWAP_BASE_TOKEN,\\n        address _USDT, address _token0\\n    ) public virtual initializer {\\n        require(_router != address(0), \\\"Invalid router\\\");\\n        require(_SWAP_BASE_TOKEN != address(0), \\\"Invalid SWAP_BASE_TOKEN\\\");\\n        require(_USDT != address(0), \\\"Invalid USDT\\\");\\n        require(_token0 != address(0), \\\"Invalid token0\\\");\\n        __Ownable_init();\\n\\n        admin = _admin;\\n        priceOracle = IPriceOracle(_priceOracle);\\n        router = IUniRouter(_router);\\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(usdtDecimals >= 6, \\\"USDT decimals must >= 6\\\");\\n\\n        tokens.push(_token0);\\n        updatePid();\\n\\n        USDT.safeApprove(address(router), type(uint).max);\\n        if (_token0 != Const.NATIVE_ASSET) {\\n            IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\\n        }\\n    }\\n\\n    function updatePid() internal {\\n        address[] memory _tokens = tokens;\\n\\n        uint tokenCnt = _tokens.length;\\n        for (uint i = 0; i < tokenCnt; i ++) {\\n            pid[_tokens[i]] = i;\\n        }\\n    }\\n\\n    function getPoolCount() public view returns (uint) {\\n        return tokens.length;\\n    }\\n\\n    function getTokens() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    function addToken(address _token) external onlyOwner {\\n        uint _pid = pid[_token];\\n        require ((_pid == 0 && _token != tokens[0]), \\\"Already added\\\");\\n\\n        tokens.push(_token);\\n        _pid = tokens.length-1;\\n        pid[_token] = _pid;\\n\\n        if (_token != Const.NATIVE_ASSET && IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\\n            IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\\n        }\\n        emit AddToken(_token, _pid);\\n    }\\n\\n    function removeToken(uint _pid) external onlyOwner {\\n        uint tokenCnt = tokens.length;\\n        require(_pid < tokenCnt, \\\"Invalid pid\\\");\\n        uint pool = _getPoolInUSD(_pid);\\n        require(pool == 0, \\\"Pool is not empty\\\");\\n\\n        address _token = tokens[_pid];\\n        tokens[_pid] = tokens[tokenCnt-1];\\n        tokens.pop();\\n\\n        pid[_token] = 0;\\n        updatePid();\\n\\n        emit RemoveToken(_token, _pid);\\n    }\\n\\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\\n        _investInternal(_tokens, _USDTAmts);\\n    }\\n\\n    function _investInternal(address[] memory _tokens, uint[] memory _USDTAmts) internal {\\n        uint poolCnt = _tokens.length;\\n        uint USDTAmt;\\n        uint[] memory USDTAmts = new uint[](tokens.length);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            uint amount = _USDTAmts[i];\\n            USDTAmt += amount;\\n            uint _pid = pid[_tokens[i]];\\n            USDTAmts[_pid] += amount;\\n        }\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n\\n        _invest(USDTAmts);\\n    }\\n\\n    function _invest(uint[] memory _USDTAmts) internal virtual {\\n        uint poolCnt = _USDTAmts.length;\\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\\n            uint USDTAmt = _USDTAmts[_pid];\\n            if (USDTAmt == 0) continue;\\n\\n            address token = tokens[_pid];\\n            uint tokenAmt;\\n            if (token != address(USDT)) {\\n                (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n                (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\\n                uint8 tokenDecimals = _assetDecimals(token);\\n                uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n                uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n                uint amountOutMin = USDTAmt * numerator * 85 / (denominator * 100);\\n\\n                if (token == Const.NATIVE_ASSET) {\\n                    tokenAmt = _swapForETH(address(USDT), USDTAmt, amountOutMin);\\n                } else if (token == address(SWAP_BASE_TOKEN)) {\\n                    tokenAmt = _swap(address(USDT), token, USDTAmt, amountOutMin);\\n                } else {\\n                    tokenAmt = _swap2(address(USDT), token, USDTAmt, amountOutMin);\\n                }\\n            } else {\\n                tokenAmt = USDTAmt;\\n            }\\n\\n            IStVault stVault = getStVault(token);\\n            if (address(stVault) != address(0)) {\\n                if (token == Const.NATIVE_ASSET) {\\n                    stVault.depositETH{value: tokenAmt}();\\n                } else {\\n                    stVault.deposit(tokenAmt);\\n                }\\n            }\\n        }\\n    }\\n\\n    function withdrawPerc(address _claimer, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        USDTAmt = _withdraw(_claimer, _sharePerc);\\n        if (USDTAmt > 0) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit Withdraw(_sharePerc, USDTAmt);\\n    }\\n\\n    function _withdraw(address _claimer, uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        uint poolCnt = tokens.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            USDTAmt += _withdrawFromPool(_claimer, i, _sharePerc);\\n        }\\n    }\\n\\n    function _withdrawFromPool(address _claimer, uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        address token = tokens[_pid];\\n        IStVault stVault = getStVault(token);\\n        if (address(stVault) != address(0)) {\\n            uint reqId;\\n            (USDTAmt, reqId) = _withdrawStVault(stVault, _sharePerc);\\n            if (reqId > 0) {\\n                addReqId(tokens[_pid], _claimer, reqId);\\n            }\\n        } else {\\n            uint amount = _balanceOf(token, address(this)) * _sharePerc / 1e18;\\n            if (0 < amount) {\\n                if (token == address(USDT)) {\\n                    USDTAmt = amount;\\n                } else {\\n                    USDTAmt = _swapForUSDT(token, amount);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _withdrawStVault(IStVault _stVault, uint _sharePerc) private returns (uint USDTAmt, uint reqId) {\\n        uint amount = _stVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            (uint tokenAmt, uint _reqId) = _stVault.withdraw(amount);\\n            if (tokenAmt > 0) {\\n                USDTAmt = _swapForUSDT(address(_stVault.token()), tokenAmt);\\n            }\\n            reqId = _reqId;\\n        }\\n    }\\n\\n    function _swapForUSDT(address token, uint amount) internal returns (uint USDTAmt) {\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\\n        uint8 tokenDecimals = _assetDecimals(token);\\n        uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n        uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n        uint amountOutMin = amount * numerator * 85 / (denominator * 100);\\n\\n        if (address(token) == address(Const.NATIVE_ASSET)) {\\n            USDTAmt = _swapETH(address(USDT), amount, amountOutMin);\\n        } else if (address(token) == address(SWAP_BASE_TOKEN)) {\\n            USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\\n        } else{\\n            USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](3);\\n        path[0] = _tokenA;\\n        path[1] = address(SWAP_BASE_TOKEN);\\n        path[2] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\\n    }\\n\\n    function _swapETH(address _tokenB, uint _amt, uint _minAmount) internal virtual returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(SWAP_BASE_TOKEN);\\n        path[1] = _tokenB;\\n        return (router.swapExactETHForTokens{value: _amt}(_minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swapForETH(address _tokenA, uint _amt, uint _minAmount) internal virtual returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = address(SWAP_BASE_TOKEN);\\n        return (router.swapExactTokensForETH(_amt, _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        _pause();\\n        // 1e18 == 100% of share\\n        uint USDTAmt = _withdraw(address(this), 1e18);\\n        if (USDTAmt > 0) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function claimEmergencyWithdrawal() external onlyVault {\\n        _claimAllAndTransfer(address(this));\\n    }\\n\\n    function getEmergencyWithdrawalUnbonded() public view returns (\\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\\n    ) {\\n        return _getAllUnbonded(address(this));\\n    }\\n\\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\\n    function reinvest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\\n        _unpause();\\n        _investInternal(_tokens, _USDTAmts);\\n    }\\n\\n    function addReqId(address _token, address _claimer, uint _reqId) internal {\\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\\n\\n        reqIds.push(_reqId);\\n        reqId2Index[_token][_reqId] = reqIds.length - 1;\\n    }\\n\\n    function removeReqId(address _token, address _claimer, uint _reqId) internal {\\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\\n        uint length = reqIds.length;\\n        uint reqIdIndex = reqId2Index[_token][_reqId];\\n\\n        if (reqIdIndex != length-1) {\\n            uint256 lastReqId = reqIds[length - 1];\\n            reqIds[reqIdIndex] = lastReqId;\\n            reqId2Index[_token][lastReqId] = reqIdIndex;\\n        }\\n\\n        reqIds.pop();\\n        delete reqId2Index[_token][_reqId];\\n    }\\n\\n    function removeReqIds(address _token, address _claimer, uint[] memory _reqIds) internal {\\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\\n        uint length = reqIds.length;\\n\\n        for (uint i = 0; i < _reqIds.length; i++) {\\n            uint reqId = _reqIds[i];\\n            uint reqIdIndex = reqId2Index[_token][reqId];\\n\\n            if (reqIdIndex != length-1) {\\n                uint256 lastReqId = reqIds[length - 1];\\n                reqIds[reqIdIndex] = lastReqId;\\n                reqId2Index[_token][lastReqId] = reqIdIndex;\\n            }\\n\\n            reqIds.pop();\\n            length --;\\n            delete reqId2Index[_token][reqId];\\n        }\\n    }\\n\\n    function getStVault(address _token) internal view virtual returns (IStVault stVault) {\\n    }\\n\\n    ///@return waiting is token amount that is not unbonded.\\n    ///@return waitingInUSD is USD value of token amount that is not unbonded.\\n    ///@return unbonded is token amount that is unbonded.\\n    ///@return unbondedInUSD is USD value of token amount that is unbonded.\\n    ///@return waitForTs is timestamp to wait to the next claim.\\n    function getPoolUnbonded(address _claimer, uint _pid) public view returns (\\n        uint waiting, uint waitingInUSD,\\n        uint unbonded, uint unbondedInUSD,\\n        uint waitForTs\\n    ) {\\n        if (_pid < tokens.length) {\\n            address token = tokens[_pid];\\n            IStVault stVault = getStVault(token);\\n            if (address(stVault) != address(0)) {\\n                uint[] memory reqIds = claimer2ReqIds[token][_claimer];\\n\\n                for (uint i = 0; i < reqIds.length; i ++) {\\n                    uint reqId = reqIds[i];\\n                    (bool _claimable, uint _tokenAmt,,, uint _waitForTs) = stVault.getWithdrawRequest(reqId);\\n\\n                    if (_claimable) {\\n                        unbonded += _tokenAmt;\\n                    } else {\\n                        waiting += _tokenAmt;\\n                        if (waitForTs == 0 || waitForTs > _waitForTs) waitForTs = _waitForTs;\\n                    }\\n                }\\n\\n                if (waiting > 0) waitingInUSD = getValueInUSD(token, waiting);\\n                if (unbonded > 0) unbondedInUSD = getValueInUSD(token, unbonded);\\n            }\\n        }\\n    }\\n\\n    function getPoolsUnbonded(address _claimer) external view returns (\\n        address[] memory,\\n        uint[] memory waitings,\\n        uint[] memory waitingInUSDs,\\n        uint[] memory unbondeds,\\n        uint[] memory unbondedInUSDs,\\n        uint[] memory waitForTses\\n    ) {\\n        uint poolCnt = tokens.length;\\n        waitings = new uint[](poolCnt);\\n        waitingInUSDs = new uint[](poolCnt);\\n        unbondeds = new uint[](poolCnt);\\n        unbondedInUSDs = new uint[](poolCnt);\\n        waitForTses = new uint[](poolCnt);\\n\\n        for (uint _pid = 0; _pid < poolCnt; _pid++) {\\n            (uint _waiting, uint _waitingInUSD, uint _unbonded, uint _unbondedInUSD, uint _waitForTs) = getPoolUnbonded(_claimer, _pid);\\n            waitings[_pid] = _waiting;\\n            waitingInUSDs[_pid] = _waitingInUSD;\\n            unbondeds[_pid] = _unbonded;\\n            unbondedInUSDs[_pid] = _unbondedInUSD;\\n            waitForTses[_pid] = _waitForTs;\\n        }\\n        return (tokens, waitings, waitingInUSDs, unbondeds, unbondedInUSDs, waitForTses);\\n    }\\n\\n    function _getAllUnbonded(address _claimer) internal view returns (\\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\\n    ) {\\n        uint poolCnt = tokens.length;\\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\\n            (, uint _waitingInUSD,, uint _unbondedInUSD, uint _waitForTs) = getPoolUnbonded(_claimer, _pid);\\n            waitingInUSD += _waitingInUSD;\\n            unbondedInUSD += _unbondedInUSD;\\n            if (waitingInUSD > 0) {\\n                if (waitForTs == 0 || waitForTs > _waitForTs) {\\n                    waitForTs = _waitForTs;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getAllUnbonded(address _claimer) external view returns (\\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\\n    ) {\\n        return _getAllUnbonded(_claimer);\\n    }\\n\\n    function claim(address _claimer) external onlyVault returns (uint USDTAmt) {\\n        USDTAmt = _claimAllAndTransfer(_claimer);\\n    }\\n\\n    function _claimAllAndTransfer(address _claimer) internal returns (uint USDTAmt) {\\n        uint poolCnt = tokens.length;\\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\\n            USDTAmt += _claim(_claimer, _pid);\\n        }\\n        if (USDTAmt > 0) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n    }\\n\\n    function _claim(address _claimer, uint _pid) internal returns (uint USDTAmt) {\\n        address token = tokens[_pid];\\n        IStVault stVault = getStVault(token);\\n        if (address(stVault) != address(0)) {\\n            uint[] memory reqIds = claimer2ReqIds[token][_claimer];\\n\\n            (uint amount, uint claimedCount, bool[] memory claimed) = stVault.claimMulti(reqIds);\\n            if (amount > 0) {\\n                uint[] memory claimedReqIds = new uint[](claimedCount);\\n                uint index;\\n                for (uint i = 0; i < reqIds.length; i ++) {\\n                    if (claimed[i]) {\\n                        claimedReqIds[index++] = reqIds[i];\\n                    }\\n                }\\n                removeReqIds(token, _claimer, claimedReqIds);\\n\\n                USDTAmt = _swapForUSDT(address(token), amount);\\n                emit Claim(_claimer, token, amount, USDTAmt);\\n            }\\n        }\\n    }\\n\\n    function _balanceOf(address _token, address _account) internal view returns (uint) {\\n        return (_token != Const.NATIVE_ASSET)\\n            ? IERC20Upgradeable(_token).balanceOf(_account)\\n            : _account.balance;\\n    }\\n\\n    function _assetDecimals(address _asset) internal view returns (uint8 _decimals) {\\n        _decimals = (_asset == Const.NATIVE_ASSET) ? 18 : IERC20UpgradeableExt(_asset).decimals();\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(address(USDT));\\n    }\\n\\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\\n        return (tokens, _getEachPoolInUSD());\\n    }\\n\\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        uint poolCnt = tokens.length;\\n        pools = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            pools[i] = _getPoolInUSD(i);\\n        }\\n    }\\n\\n    function _getPoolInUSD(uint _pid) internal view virtual returns (uint pool) {\\n        address token = tokens[_pid];\\n        IStVault stVault = getStVault(token);\\n        if (address(stVault) != address(0)) {\\n            pool = getStVaultPoolInUSD(stVault);\\n        } else {\\n            uint amount = _balanceOf(token, address(this));\\n            if (0 < amount) {\\n                pool = getValueInUSD(token, amount);\\n            }\\n        }\\n    }\\n\\n    function getStVaultPoolInUSD(IStVault _stVault) internal view returns (uint) {\\n        uint stVaultTotalSupply = _stVault.totalSupply();\\n        return stVaultTotalSupply == 0 ? 0 : _stVault.getAllPoolInUSD() * _stVault.balanceOf(address(this)) / stVaultTotalSupply;\\n    }\\n\\n    ///@return the value in USD. it's scaled by 1e18;\\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\\n        uint8 _decimals = _assetDecimals(_asset);\\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        if (paused()) {\\n            (uint waitingInUSD, uint unbondedInUSD,) = getEmergencyWithdrawalUnbonded();\\n            allPool += (waitingInUSD + unbondedInUSD);\\n        }\\n        return allPool;\\n    }\\n\\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : Const.DENOMINATOR / poolCnt;\\n        percentages = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * Const.DENOMINATOR / allPool;\\n        }\\n        return (tokens, percentages);\\n    }\\n\\n    function getAPR() public view virtual returns (uint) {\\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\\n        uint allApr;\\n        uint poolCnt = _tokens.length;\\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\\n            IStVault stVault = getStVault(tokens[_pid]);\\n            if (address(stVault) != address(0)) {\\n                allApr += stVault.getAPR() * perc[_pid];\\n            }\\n        }\\n        return (allApr / Const.DENOMINATOR);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[39] private __gap;\\n}\\n\",\"keccak256\":\"0xc294e9d9d4e84fdc9ad6b42c1b6741985e6085f2e453cb6f0058a88ca246d1b3\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"interfaces/IStVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IStVault is IERC20Upgradeable {\\r\\n\\r\\n    struct WithdrawRequest {\\r\\n        uint tokenAmt;\\r\\n        uint stTokenAmt;\\r\\n        uint requestTs;\\r\\n    }\\r\\n\\r\\n    // fee percentage that treasury takes from rewards.\\r\\n    function yieldFee() external view returns(uint);\\r\\n    // treasury wallet address.\\r\\n    function treasuryWallet() external view returns(address);\\r\\n    // administrator address.\\r\\n    function admin() external view returns(address);\\r\\n\\r\\n    // underlying token such as ETH, WMATIC, and so on.\\r\\n    function token() external view returns(IERC20Upgradeable);\\r\\n    // staked token such as stETH, stMATIC, and so on.\\r\\n    function stToken() external view returns(IERC20Upgradeable);\\r\\n\\r\\n    // the buffered deposit token amount that is not yet staked into the staking pool.\\r\\n    function bufferedDeposits() external view returns(uint);\\r\\n    // On some staking pools, the rewards are accumulated until unbonded even though redeem is requested. This function considers it.\\r\\n    function getBufferedDeposits() external view returns(uint);\\r\\n    // the buffered withdrawal token amount that is unstaked from the staking pool but not yet withdrawn from the user.\\r\\n    function bufferedWithdrawals() external view returns(uint);\\r\\n    // the token amount that shares is already burnt but not withdrawn.\\r\\n    function pendingWithdrawals() external view returns(uint);\\r\\n    // the total amount of withdrawal stToken that is not yet requested to the staking pool.\\r\\n    function pendingRedeems() external view returns(uint);\\r\\n    // the amount of stToken that is emergency unbonding, and shares according to them are not burnt yet.\\r\\n    function getEmergencyUnbondings() external view returns(uint);\\r\\n    // the amount of stToken that has invested into L2 vaults to get extra benefit.\\r\\n    function getInvestedStTokens() external view returns(uint);\\r\\n    \\r\\n    // the seconds to wait for unbonded since withdarwal requested. For example, 30 days in case of unstaking stDOT to get xcDOT\\r\\n    function unbondingPeriod() external view returns(uint);\\r\\n    // the minimum amount of token to invest.\\r\\n    function minInvestAmount() external view returns(uint);\\r\\n    // the minimum amount of stToken to redeem.\\r\\n    function minRedeemAmount() external view returns(uint);\\r\\n\\r\\n    // the timestamp that the last investment was executed on.\\r\\n    function lastInvestTs() external view returns(uint);\\r\\n    // minimum seconds to wait before next investment. For example, MetaPool's stNEAR buffer is replenished every 5 minutes.\\r\\n    function investInterval() external view returns(uint);\\r\\n    // the timestamp that the last redeem was requested on.\\r\\n    function lastRedeemTs() external view returns(uint);\\r\\n    // minimum seconds to wait before next redeem. For example, Lido have up to 20 redeem requests to stDOT in parallel. Therefore, the next redeem should be requested after about 1 day.\\r\\n    function redeemInterval() external view returns(uint);\\r\\n    // the timestamp that the profit last collected on.\\r\\n    function lastCollectProfitTs() external view returns(uint);\\r\\n    // the timestamp of one epoch. Each epoch, the stToken price or balance will increase as staking-rewards are added to the pool.\\r\\n    function oneEpoch() external view returns(uint);\\r\\n\\r\\n    ///@return the total amount of tokens in the vault.\\r\\n    function getAllPool() external view returns (uint);\\r\\n    ///@return the amount of shares that corresponds to `_amount` of token.\\r\\n    function getSharesByPool(uint _amount) external view returns (uint);\\r\\n    ///@return the amount of token that corresponds to `_shares` of shares.\\r\\n    function getPoolByShares(uint _shares) external view returns (uint);\\r\\n    ///@return the total USD value of tokens in the vault.\\r\\n    function getAllPoolInUSD() external view returns (uint);\\r\\n    ///@return the USD value of rewards that is avilable to claim. It's scaled by 1e18.\\r\\n    function getPendingRewards() external view returns (uint);\\r\\n    ///@return the APR in the vault. It's scaled by 1e18.\\r\\n    function getAPR() external view returns (uint);\\r\\n    ///@return _claimable specifys whether user can claim tokens for it.\\r\\n    ///@return _tokenAmt is amount of token to claim.\\r\\n    ///@return _stTokenAmt is amount of stToken to redeem.\\r\\n    ///@return _requestTs is timestmap when withdrawal requested.\\r\\n    ///@return _waitForTs is timestamp to wait for.\\r\\n    function getWithdrawRequest(uint _reqId) external view returns (\\r\\n        bool _claimable,\\r\\n        uint _tokenAmt, uint _stTokenAmt,\\r\\n        uint _requestTs, uint _waitForTs\\r\\n    );\\r\\n    ///@return the unbonded token amount that is claimable from the staking pool.\\r\\n    function getTokenUnbonded() external view returns (uint);\\r\\n\\r\\n    ///@dev deposit `_amount` of token.\\r\\n    function deposit(uint _amount) external;\\r\\n    ///@dev deposit the native asset.\\r\\n    function depositETH() external payable;\\r\\n    ///@dev request a withdrawal that corresponds to `_shares` of shares.\\r\\n    ///@return _amount is the amount of withdrawn token.\\r\\n    ///@return _reqId is the NFT token id indicating the request for rest of withdrawal. 0 if no request is made.\\r\\n    function withdraw(uint _shares) external returns (uint _amount, uint _reqId);\\r\\n    ///@dev claim token with NFT token\\r\\n    ///@return _amount is the amount of claimed token.\\r\\n    function claim(uint _reqId) external returns (uint _amount);\\r\\n    ///@dev claim token with NFT tokens\\r\\n    ///@return _amount is the amount of claimed token.\\r\\n    ///@return _claimedCount is the count of reqIds that are claimed.\\r\\n    ///@return _claimed is the flag indicating whether the token is claimed.\\r\\n    function claimMulti(uint[] memory _reqIds) external returns (uint _amount, uint _claimedCount, bool[] memory _claimed);\\r\\n    ///@dev stake the buffered deposits into the staking pool. It's called by admin.\\r\\n    function invest() external;\\r\\n    ///@dev redeem the requested withdrawals from the staking pool. It's called by admin.\\r\\n    function redeem() external;\\r\\n    ///@dev claim the unbonded tokens from the staking pool. It's called by admin.\\r\\n    function claimUnbonded() external;\\r\\n    ///@dev request a withdrawal for all staked tokens. It's called by admin.\\r\\n    function emergencyWithdraw() external;\\r\\n    ///@dev the total amount of emergency withdrawal stToken that is not yet requested to the staking pool.\\r\\n    function emergencyPendingRedeems() external view returns (uint _redeems);\\r\\n    ///@dev In emergency mode, redeem the rest of stTokens. Especially it's needed for stNEAR because the MetaPool has a buffer limit.\\r\\n    function emergencyRedeem() external;\\r\\n    ///@dev reinvest the tokens, and set the vault status as normal. It's called by admin.\\r\\n    function reinvest() external;\\r\\n    ///@dev take rewards and reinvest them. It's called by admin.\\r\\n    function yield() external;\\r\\n    ///@dev collect profit and update the watermark\\r\\n    function collectProfitAndUpdateWatermark() external;\\r\\n    ///@dev transfer out fees.\\r\\n    function withdrawFees() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xfe50f78aeb3c39c41499935cbef759143a5216dfc53cd59b8b462c0eaa6934db\",\"license\":\"MIT\"},\"interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IUniRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x59f7a2ab33aea25e617afdb630240a1ba0e7641844f392008e454e4cfc9a512f\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n}\\r\\n\",\"keccak256\":\"0x1fe6004a4b9bb67e1c6083bf8a0aa20a312d110f184d7fa396d34cbad86a739b\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcff7c4cca7e1209596f7725bc59261d604e809e82fada4e1be03b2c31f3d6f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPoolUnbonded(address,uint256)": {
        "returns": {
          "unbonded": "is token amount that is unbonded.",
          "unbondedInUSD": "is USD value of token amount that is unbonded.",
          "waitForTs": "is timestamp to wait to the next claim.",
          "waiting": "is token amount that is not unbonded.",
          "waitingInUSD": "is USD value of token amount that is not unbonded."
        }
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "invest(address[],uint256[])": {
        "params": {
          "_USDTAmts": "amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "reinvest(address[],uint256[])": {
        "params": {
          "_USDTAmts": "amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2709,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 46466,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "router",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IUniRouter)52936"
      },
      {
        "astId": 46469,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "SWAP_BASE_TOKEN",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC20UpgradeableExt)52440"
      },
      {
        "astId": 46472,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "USDT",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IERC20UpgradeableExt)52440"
      },
      {
        "astId": 46474,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "153",
        "type": "t_uint8"
      },
      {
        "astId": 46476,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "admin",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 46478,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "vault",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 46481,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "priceOracle",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IPriceOracle)11071"
      },
      {
        "astId": 46484,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "tokens",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 46488,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "pid",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46495,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "claimer2ReqIds",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 46501,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "reqId2Index",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 49202,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "161",
        "type": "t_array(t_uint256)39_storage"
      },
      {
        "astId": 46210,
        "contract": "contracts/sti/strategy/AvaxSTIStrategyTest.sol:AvaxSTIStrategyTest",
        "label": "AVAXVault",
        "offset": 0,
        "slot": "200",
        "type": "t_contract(IStVault)52760"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)39_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[39]",
        "numberOfBytes": "1248"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)52440": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)11071": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStVault)52760": {
        "encoding": "inplace",
        "label": "contract IStVault",
        "numberOfBytes": "20"
      },
      "t_contract(IUniRouter)52936": {
        "encoding": "inplace",
        "label": "contract IUniRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}