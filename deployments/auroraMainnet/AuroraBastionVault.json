{
  "address": "0x2D4b72F950b500f086E1c16322522Fb21B46a082",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Invest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "SetTreasuryWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "SetYieldFeePerc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Yield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "YieldFee",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Router",
      "outputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WNEAR",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cToken",
      "outputs": [
        {
          "internalType": "contract ICToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlocksPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "inUSD",
          "type": "bool"
        }
      ],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "_cToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributor",
      "outputs": [
        {
          "internalType": "contract IRewardDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yieldFeePerc",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2228ef54c586674ba83ec98b4c6814ea87602f5f1a9f3819e05a96d892662363",
  "receipt": {
    "to": null,
    "from": "0x3f68A3c1023d736D8Be867CA49Cb18c543373B99",
    "contractAddress": "0x2D4b72F950b500f086E1c16322522Fb21B46a082",
    "transactionIndex": 0,
    "gasUsed": "3718535",
    "logsBloom": "0x
    "blockHash": "0x3a4dbd7b4acbe83d678d4bac71b9fa2623aa7975ca9bf3e3d2a326f3956727f3",
    "transactionHash": "0x2228ef54c586674ba83ec98b4c6814ea87602f5f1a9f3819e05a96d892662363",
    "logs": [],
    "blockNumber": 71417754,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9a335077fa45839f87120ae1e6af8ee1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetYieldFeePerc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Yield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"YieldFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Router\",\"outputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNEAR\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inUSD\",\"type\":\"bool\"}],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldFeePerc\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"_amount\":\"amount of lptokens to deposit\"}},\"getAPR()\":{\"details\":\"It's scaled by 1e18\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_yieldFeePerc\":\"deposit fee percentage. 2000 for 20%\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"_shares\":\"amount of shares to burn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw()\":{\"notice\":\"Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\"},\"getPendingRewards()\":{\"notice\":\"Returns the pending rewards in USD.\"},\"reinvest()\":{\"notice\":\"Unpauses deposit, yield, invest functions, and invests funds.\"},\"setFee(uint256)\":{\"notice\":\"Function to set deposit and yield fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l2Vaults/compound/AuroraBastionVault.sol\":\"AuroraBastionVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/l2Vaults/compound/AuroraBastionVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./BasicCompoundVault.sol\\\";\\nimport \\\"../../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../../interfaces/IUniRouter.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\n\\ninterface IBastionComptroller {\\n    function rewardDistributor() external view returns (address);\\n}\\n\\nstruct RewardMarketState {\\n    /// @notice The market's last updated borrowIndex or supplyIndex\\n    uint224 index;\\n    /// @notice The timestamp number the index was last updated at\\n    uint32 timestamp;\\n}\\n\\ninterface IRewardDistributor {\\n    function getRewardAddress(uint rewardType) external view returns (address);\\n    function rewardSupplySpeeds(uint8 rewardType, address cToken) external view returns (uint);\\n    function rewardSupplyState(uint8 rewardType,  address cToken) external view returns (RewardMarketState memory);\\n    function rewardSupplierIndex(uint8 rewardType, address cToken, address supplier) external view returns(uint);\\n    function rewardAccrued(uint8 rewardType, address supplyer) external view returns(uint);\\n\\n    function claimReward(uint8 rewardType, address holder, address[] memory cTokens) external;\\n}\\n\\ncontract AuroraBastionVault is BasicCompoundVault {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public constant WNEAR = IERC20Upgradeable(0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d);\\n\\n    IUniRouter public constant Router = IUniRouter(0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B); // Trisolaris\\n\\n    uint constant REWARD_COUNT = 2;\\n    uint constant doubleScale = 1e36;\\n    uint constant rewardInitialIndex = 1e36;\\n    IRewardDistributor public rewardDistributor;\\n\\n    event YieldFee(uint _amount);\\n    event Yield(uint _amount);\\n\\n    function initialize(string memory _name, string memory _symbol, \\n        address _treasury, address _admin,\\n        address _priceOracle,\\n        ICToken _cToken\\n    ) public virtual override initializer {\\n        super.initialize(_name, _symbol, _treasury, _admin, _priceOracle, _cToken);\\n\\n        _updateRewardDistributor();\\n    }\\n\\n    function _updateRewardDistributor() private {\\n        rewardDistributor = IRewardDistributor(IBastionComptroller(address(comptroller)).rewardDistributor());\\n        // It needs to approve router for reward token\\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\\n            address reward = rewardDistributor.getRewardAddress(rewardType);\\n            IERC20Upgradeable(reward).safeApprove(address(Router), type(uint).max);\\n        }\\n    }\\n    function updateRewardDistributor() external onlyOwner {\\n        _updateRewardDistributor();\\n    }\\n\\n    function _yield() internal override {\\n        address[] memory cTokens = new address[](1);\\n        cTokens[0] = address(cToken);\\n\\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\\n            rewardDistributor.claimReward(rewardType, address(this), cTokens);\\n            address reward = rewardDistributor.getRewardAddress(rewardType);\\n            uint amount = IERC20Upgradeable(reward).balanceOf(address(this));\\n            if (0 < amount) {\\n                uint fee = amount * yieldFee / Const.DENOMINATOR; //yield fee\\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, fee);\\n                amount -= fee;\\n\\n                if (address(token) != reward) {\\n                    if (token == WNEAR || reward == address(WNEAR)) {\\n                        _swap(reward, address(token), amount);\\n                    } else {\\n                        _swap2(reward, address(token), amount);\\n                    }\\n                }\\n                uint rewardInUSD = getValueInUSD(reward, amount+fee);\\n                emit Yield(rewardInUSD);\\n                emit YieldFee(rewardInUSD * yieldFee / Const.DENOMINATOR);\\n            }\\n        }\\n\\n        _invest();\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint){\\n        address[] memory path = new address[](2);\\n        path[0] = address(_tokenA);\\n        path[1] = address(_tokenB);\\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[1];\\n    }\\n\\n    function _swap2(address _tokenA, address _tokenB, uint _amt) private returns (uint){\\n        address[] memory path = new address[](3);\\n        path[0] = address(_tokenA);\\n        path[1] = address(WNEAR);\\n        path[2] = address(_tokenB);\\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[2];\\n    }\\n\\n    function getPendingRewards() public view override returns (uint) {\\n        uint pending;\\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\\n            uint amount = _getPendingRewardAmount(rewardType);\\n            if (amount > 0) {\\n                address reward = rewardDistributor.getRewardAddress(rewardType);\\n                pending += getValueInUSD(reward, amount);\\n            }\\n        }\\n        return pending;\\n    }\\n\\n    function _getPendingRewardAmount(uint8 rewardType) private view returns (uint supplierAccrued) {\\n        RewardMarketState memory supplyState = rewardDistributor.rewardSupplyState(rewardType, address(cToken));\\n        uint supplySpeed = rewardDistributor.rewardSupplySpeeds(rewardType, address(cToken));\\n        uint256 deltaTimestamps = block.timestamp - uint(supplyState.timestamp);\\n        if (deltaTimestamps > 0 && supplySpeed > 0) {\\n            uint supplyTokens = cToken.totalSupply();\\n            uint _rewardAccrued = deltaTimestamps * supplySpeed;\\n            uint ratio = supplyTokens > 0\\n                ? _rewardAccrued * doubleScale / supplyTokens\\n                : 0;\\n            uint supplyIndex = uint(supplyState.index) + ratio;\\n            uint supplierIndex = rewardDistributor.rewardSupplierIndex(rewardType, address(cToken), address(this));\\n            if (supplierIndex == 0 && supplyIndex > 0) {\\n                supplierIndex = rewardInitialIndex;\\n            }\\n            uint deltaIndex = supplyIndex - supplierIndex;\\n            uint supplierDelta = cToken.balanceOf(address(this)) * deltaIndex / doubleScale;\\n            supplierAccrued = rewardDistributor.rewardAccrued(rewardType, address(this)) + supplierDelta;\\n        }\\n    }\\n\\n    function getBlocksPerYear() public view override returns (uint) {\\n        return 28_908_000; //55 * 60 * 24 * 365;\\n    }\\n\\n    function getAPR() public view virtual override returns (uint) {\\n        uint rewardsPerYear;\\n        for (uint rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\\n            uint supplySpeed = rewardDistributor.rewardSupplySpeeds(uint8(rewardType), address(cToken));\\n            if (supplySpeed > 0) {\\n                address reward = rewardDistributor.getRewardAddress(rewardType);\\n                rewardsPerYear += getValueInUSD(reward, supplySpeed * Const.YEAR_IN_SEC);\\n            }\\n        }\\n        if (rewardsPerYear > 0) {\\n            uint underlyingSupply = (cToken.totalSupply() * cToken.exchangeRateStored()) / MANTISSA_ONE;\\n            uint rewardsApr = rewardsPerYear * 1e18 / getValueInUSD(address(token), underlyingSupply);\\n            return super.getAPR() + (rewardsApr * (Const.DENOMINATOR-yieldFee) / Const.DENOMINATOR);\\n        } else {\\n            return super.getAPR();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f2aa21083fc32310fba5dc9005d820e60b3d684e3e3dacffd606f6057668878\",\"license\":\"MIT\"},\"contracts/l2Vaults/compound/BasicCompoundVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../../bni/priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../../libs/Math.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\n\\ninterface ICToken is IERC20Upgradeable {\\n    function comptroller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function exchangeRateStored() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n}\\n\\ninterface IComptroller {\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n}\\n\\ncontract BasicCompoundVault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint public yieldFee;\\n\\n    ICToken public cToken;\\n    IERC20Upgradeable public token;\\n    uint8 private tokenDecimals;\\n    IComptroller public comptroller;\\n\\n    address public treasuryWallet;\\n    address public admin;\\n    IPriceOracle public priceOracle;\\n\\n    mapping(address => uint) private depositedBlock;\\n\\n    uint constant MANTISSA_ONE = 1e18;\\n\\n    event Deposit(address _user, uint _amount, uint _shares);\\n    event EmergencyWithdraw(uint _amount);\\n    event Invest(uint _amount);\\n    event SetAdmin(address _oldAdmin, address _newAdmin);\\n    event SetYieldFeePerc(uint _fee);\\n    event SetTreasuryWallet(address _wallet);\\n    event Withdraw(address _user, uint _amount, uint _shares);\\n\\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == admin, \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    function initialize(string memory _name, string memory _symbol, \\n        address _treasury, address _admin,\\n        address _priceOracle,\\n        ICToken _cToken\\n    ) public virtual initializer {\\n\\n        __ERC20_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        treasuryWallet = _treasury;\\n        admin = _admin;\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        yieldFee = 2000; //20%\\n        cToken = _cToken;\\n\\n        token = IERC20Upgradeable(_cToken.underlying());\\n        tokenDecimals = IERC20UpgradeableExt(address(_cToken)).decimals();\\n        comptroller = IComptroller(_cToken.comptroller());\\n        \\n        address[] memory cTokens = new address[](1);\\n        cTokens[0] = address(_cToken);\\n        comptroller.enterMarkets(cTokens);\\n        token.approve(address(_cToken), type(uint).max);\\n    }\\n    \\n    /**\\n     *@param _amount amount of lptokens to deposit\\n    */\\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        uint _pool = getAllPool();\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        depositedBlock[msg.sender] = block.number;\\n\\n        cToken.mint(token.balanceOf(address(this)));\\n\\n        uint _totalSupply = totalSupply();\\n        uint _shares = (_pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / _pool;\\n        _mint(msg.sender, _shares);\\n\\n        emit Deposit(msg.sender, _amount, _shares);\\n    }\\n\\n    /**\\n     *@param _shares amount of shares to burn\\n    */\\n    function withdraw(uint _shares) external nonReentrant{\\n        require(_shares > 0, \\\"Invalid Amount\\\");\\n        require(balanceOf(msg.sender) >= _shares, \\\"Not enough balance\\\");\\n        require(depositedBlock[msg.sender] != block.number, \\\"Withdraw within same block\\\");\\n\\n        uint _pool = getAllPool();\\n        uint _amountToWithdraw = _pool * _shares / totalSupply();\\n\\n        uint available = token.balanceOf(address(this));\\n        if(available < _amountToWithdraw) {\\n            uint cTokenAmount = Math.roundedDiv(cToken.balanceOf(address(this)) * (_amountToWithdraw - available), (_pool - available));\\n            cToken.redeem(cTokenAmount);\\n            _amountToWithdraw = token.balanceOf(address(this));\\n        }\\n        _burn(msg.sender, _shares);\\n\\n        token.safeTransfer(msg.sender, _amountToWithdraw);\\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\\n    }\\n\\n    function _invest() internal returns (uint available){\\n        available = token.balanceOf(address(this));\\n        if(available > 0) {\\n            cToken.mint(available);\\n        }\\n    }\\n\\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \\n        _pause();\\n        _yield();\\n        uint stakedTokens = cToken.balanceOf(address(this));\\n        if(stakedTokens > 0 ) {\\n            cToken.redeem(stakedTokens);\\n        }\\n        emit EmergencyWithdraw(stakedTokens);\\n    }\\n\\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\\n        _unpause();\\n        _invest();\\n    }\\n\\n    function setAdmin(address _newAdmin) external onlyOwner{\\n        address oldAdmin = admin;\\n        admin = _newAdmin;\\n\\n        emit SetAdmin(oldAdmin, _newAdmin);\\n    }\\n\\n    ///@notice Function to set deposit and yield fee\\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\\n    function setFee(uint _yieldFeePerc) external onlyOwner{\\n        require(_yieldFeePerc < 3001, \\\"Yield Fee cannot > 30%\\\");\\n        yieldFee = _yieldFeePerc;\\n        emit SetYieldFeePerc(_yieldFeePerc);\\n    }\\n\\n    function setTreasuryWallet(address _wallet) external onlyOwner {\\n        require(_wallet != address(0), \\\"wallet invalid\\\");\\n        treasuryWallet = _wallet;\\n        emit SetTreasuryWallet(_wallet);\\n    }\\n\\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\\n        _yield();\\n    }\\n\\n    function _yield() internal virtual {\\n    }\\n\\n    function getAllPool() public view returns (uint) {\\n        uint rate = cToken.exchangeRateStored();\\n        uint underlyingAmount = (cToken.balanceOf(address(this)) * rate) / MANTISSA_ONE;\\n        return token.balanceOf(address(this)) + underlyingAmount;\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint _pool = getAllPool();\\n        return getValueInUSD(address(token), _pool);\\n    }\\n\\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\\n        uint _totalSupply = totalSupply();\\n        if (_totalSupply == 0) return 1e18;\\n        return inUSD == true ?\\n            getAllPoolInUSD() * 1e18 / _totalSupply :\\n            getAllPool() * 1e18 / _totalSupply;\\n    }\\n\\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\\n    }\\n\\n    ///@notice Returns the pending rewards in USD.\\n    function getPendingRewards() public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    function getBlocksPerYear() public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    ///@dev It's scaled by 1e18\\n    function getAPR() public view virtual returns (uint) {\\n        return cToken.supplyRatePerBlock() * getBlocksPerYear();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[41] private __gap;\\n}\\n\",\"keccak256\":\"0x4f959aceb504914054007f58e49c2687a2f6544aab248d76ac238d97ec673321\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IUniRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x59f7a2ab33aea25e617afdb630240a1ba0e7641844f392008e454e4cfc9a512f\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n}\\r\\n\",\"keccak256\":\"0x1fe6004a4b9bb67e1c6083bf8a0aa20a312d110f184d7fa396d34cbad86a739b\",\"license\":\"MIT\"},\"libs/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Division, round to nearest integer (AKA round-half-up)\\r\\n     * @param a What to divide\\r\\n     * @param b Divide by this number\\r\\n     */\\r\\n    function roundedDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity automatically throws, but please emit reason\\r\\n        require(b > 0, \\\"div by 0\\\"); \\r\\n\\r\\n        uint256 halfB = (b + 1) / 2;\\r\\n        return (a % b >= halfB) ? (a / b + 1) : (a / b);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63f677b03255a6a9eda9e2820e12962e918c24d64b1f1d2e3b06abce9182966f\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcff7c4cca7e1209596f7725bc59261d604e809e82fada4e1be03b2c31f3d6f88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061424e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80638da5cb5b11610146578063c89d5b8b116100c3578063f2fde38b11610087578063f2fde38b146104cc578063f66fed26146104df578063f6d7eade146104e7578063f851a44014610502578063fc0c546a14610516578063fdb5a03e1461052957600080fd5b8063c89d5b8b1461048e578063d9621f9e14610496578063db2e21bc1461049e578063dd62ed3e146104a6578063e56f2fe4146104b957600080fd5b8063a9059cbb1161010a578063a9059cbb14610431578063acc2166a14610444578063b6b55f2514610458578063b9875f531461046b578063bd244af41461048657600080fd5b80638da5cb5b146103ea57806395d89b41146103fb578063a20a4cb414610403578063a457c2d71461040b578063a8602fea1461041e57600080fd5b806339509351116101d457806369fe0e2d1161019857806369fe0e2d14610389578063704b6c021461039c57806370a08231146103af578063715018a6146103d8578063741de148146103e057600080fd5b806339509351146103325780634626402b146103455780635c975abb146103585780635fe3b5671461036357806369e527da1461037657600080fd5b806323b872dd1161021b57806323b872dd146102c75780632630c12f146102da57806328593984146103065780632e1a7d4d14610310578063313ce5671461032357600080fd5b8063034f40831461025857806306fdde0314610274578063095ea7b31461028957806318160ddd146102ac57806320f14908146102b4575b600080fd5b61026160fb5481565b6040519081526020015b60405180910390f35b61027c610531565b60405161026b91906139c7565b61029c610297366004613a0f565b6105c3565b604051901515815260200161026b565b603554610261565b6102616102c2366004613a49565b6105dd565b61029c6102d5366004613a66565b610660565b610101546102ee906001600160a01b031681565b6040516001600160a01b03909116815260200161026b565b61030e610684565b005b61030e61031e366004613aa7565b6106df565b6040516012815260200161026b565b61029c610340366004613a0f565b610aef565b60ff546102ee906001600160a01b031681565b60975460ff1661029c565b60fe546102ee906001600160a01b031681565b60fc546102ee906001600160a01b031681565b61030e610397366004613aa7565b610b11565b61030e6103aa366004613ac0565b610b9f565b6102616103bd366004613ac0565b6001600160a01b031660009081526033602052604090205490565b61030e610c09565b6301b919e0610261565b6065546001600160a01b03166102ee565b61027c610c1b565b610261610c2a565b61029c610419366004613a0f565b610de5565b61030e61042c366004613ac0565b610e60565b61029c61043f366004613a0f565b610efd565b61012c546102ee906001600160a01b031681565b61030e610466366004613aa7565b610f0b565b6102ee73c42c30ac6cc15fac9bd938618bcaa1a1fae8501d81565b610261611160565b61026161118a565b61026161149f565b61030e611577565b6102616104b4366004613add565b611703565b61030e6104c7366004613bcd565b61172e565b61030e6104da366004613ac0565b61180d565b61030e611886565b6102ee732cb45edb4517d5947afde3beabf95a582506858b81565b610100546102ee906001600160a01b031681565b60fd546102ee906001600160a01b031681565b61030e611896565b60606036805461054090613c7c565b80601f016020809104026020016040519081016040528092919081815260200182805461056c90613c7c565b80156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b5050505050905090565b6000336105d18185856118ee565b60019150505b92915050565b6000806105e960355490565b9050806106005750670de0b6b3a764000092915050565b6001831515146106345780610613610c2a565b61062590670de0b6b3a7640000613cc7565b61062f9190613cfc565b610659565b8061063d611160565b61064f90670de0b6b3a7640000613cc7565b6106599190613cfc565b9392505050565b60003361066e858285611a13565b610679858585611a8d565b506001949350505050565b6065546001600160a01b03163314806106a85750610100546001600160a01b031633145b6106cd5760405162461bcd60e51b81526004016106c490613d10565b60405180910390fd5b6106d5611c5b565b6106dd611ca1565b565b600260c95414156107325760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c4565b600260c955806107755760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908105b5bdd5b9d60921b60448201526064016106c4565b336000908152603360205260409020548111156107c95760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b60448201526064016106c4565b33600090815261010260205260409020544314156108295760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772077697468696e2073616d6520626c6f636b00000000000060448201526064016106c4565b6000610833610c2a565b9050600061084060355490565b61084a8484613cc7565b6108549190613cfc565b60fd546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190613d3d565b905081811015610a815760006109826108ee8385613d56565b60fc546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190613d3d565b6109739190613cc7565b61097d8487613d56565b61201f565b60fc5460405163db006a7560e01b8152600481018390529192506001600160a01b03169063db006a7590602401602060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190613d3d565b5060fd546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190613d3d565b9250505b610a8b33856120b3565b60fd54610aa2906001600160a01b031633846121fe565b60408051338152602081018490529081018590527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906060015b60405180910390a15050600160c9555050565b6000336105d1818585610b028383611703565b610b0c9190613d6d565b6118ee565b610b19612261565b610bb98110610b635760405162461bcd60e51b81526020600482015260166024820152755969656c64204665652063616e6e6f74203e2033302560501b60448201526064016106c4565b60fb8190556040518181527f5cdc47cbc2be1e35e5429dd646b1e2047ab328f4108873ab71318989f7566ceb906020015b60405180910390a150565b610ba7612261565b61010080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f848ac24ab84501710d6631faab117b66b79aba7ec6f7778cf3bcff428c1a4efc910160405180910390a15050565b610c11612261565b6106dd60006122bb565b60606037805461054090613c7c565b60008060fc60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7b57600080fd5b505afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190613d3d565b60fc546040516370a0823160e01b8152306004820152919250600091670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015610d0857600080fd5b505afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d409190613d3d565b610d4a9190613cc7565b610d549190613cfc565b60fd546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b158015610d9c57600080fd5b505afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190613d3d565b610dde9190613d6d565b9250505090565b60003381610df38286611703565b905083811015610e535760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106c4565b61067982868684036118ee565b610e68612261565b6001600160a01b038116610eaf5760405162461bcd60e51b815260206004820152600e60248201526d1dd85b1b195d081a5b9d985b1a5960921b60448201526064016106c4565b60ff80546001600160a01b0319166001600160a01b0383169081179091556040519081527f60edc991b058a7e279075cf86f19a6b478334efec47e089d09890b139c78232790602001610b94565b6000336105d1818585611a8d565b600260c9541415610f5e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c4565b600260c955610f6b611c5b565b60008111610fac5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064016106c4565b6000610fb6610c2a565b60fd54909150610fd1906001600160a01b031633308561230d565b33600090815261010260205260409081902043905560fc5460fd5491516370a0823160e01b81523060048201526001600160a01b039182169263a0712d689216906370a082319060240160206040518083038186803b15801561103357600080fd5b505afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190613d3d565b6040518263ffffffff1660e01b815260040161108991815260200190565b602060405180830381600087803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db9190613d3d565b5060006110e760355490565b905060008215806110f6575081155b61111457826111058386613cc7565b61110f9190613cfc565b611116565b835b90506111223382612345565b60408051338152602081018690529081018290527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590606001610adc565b60008061116b610c2a565b60fd54909150611184906001600160a01b031682612424565b91505090565b60008060005b60028110156112e65761012c5460fc5460405162619cc760e31b815260ff841660048201526001600160a01b039182166024820152600092919091169063030ce6389060440160206040518083038186803b1580156111ee57600080fd5b505afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112269190613d3d565b905080156112d35761012c54604051632c36c65960e21b8152600481018490526000916001600160a01b03169063b0db19649060240160206040518083038186803b15801561127457600080fd5b505afa158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ac9190613d85565b90506112c5816112c06301e1338085613cc7565b612424565b6112cf9085613d6d565b9350505b50806112de81613da2565b915050611190565b508015611493576000670de0b6b3a764000060fc60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561134657600080fd5b505afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190613d3d565b60fc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cc57600080fd5b505afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114049190613d3d565b61140e9190613cc7565b6114189190613cfc565b60fd54909150600090611434906001600160a01b031683612424565b61144684670de0b6b3a7640000613cc7565b6114509190613cfc565b905061271060fb546127106114659190613d56565b61146f9083613cc7565b6114799190613cfc565b61148161255a565b61148b9190613d6d565b935050505090565b61118461255a565b5090565b60008060005b60028160ff1610156115715760006114bc826125f6565b9050801561155e5761012c54604051632c36c65960e21b815260ff841660048201526000916001600160a01b03169063b0db19649060240160206040518083038186803b15801561150c57600080fd5b505afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115449190613d85565b90506115508183612424565b61155a9085613d6d565b9350505b508061156981613dbd565b9150506114a5565b50919050565b6065546001600160a01b031633148061159b5750610100546001600160a01b031633145b6115b75760405162461bcd60e51b81526004016106c490613d10565b6115bf611c5b565b6115c7612a35565b6115cf611ca1565b60fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b9190613d3d565b905080156116d35760fc5460405163db006a7560e01b8152600481018390526001600160a01b039091169063db006a7590602401602060405180830381600087803b15801561169957600080fd5b505af11580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d19190613d3d565b505b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c90602001610b94565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600054610100900460ff161580801561174e5750600054600160ff909116105b806117685750303b158015611768575060005460ff166001145b6117845760405162461bcd60e51b81526004016106c490613ddd565b6000805460ff1916600117905580156117a7576000805461ff0019166101001790555b6117b5878787878787612a8f565b6117bd612eaf565b8015611804576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050505050565b611815612261565b6001600160a01b03811661187a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c4565b611883816122bb565b50565b61188e612261565b6106dd612eaf565b6065546001600160a01b03163314806118ba5750610100546001600160a01b031633145b6118d65760405162461bcd60e51b81526004016106c490613d10565b6118de613024565b6118e661306d565b6118836130a6565b6001600160a01b0383166119505760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106c4565b6001600160a01b0382166119b15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106c4565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611a1f8484611703565b90506000198114611a875781811015611a7a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106c4565b611a8784848484036118ee565b50505050565b6001600160a01b038316611af15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106c4565b6001600160a01b038216611b535760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106c4565b6001600160a01b03831660009081526033602052604090205481811015611bcb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106c4565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611c02908490613d6d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c4e91815260200190565b60405180910390a3611a87565b60975460ff16156106dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106c4565b60408051600180825281830190925260009160208083019080368337505060fc5482519293506001600160a01b031691839150600090611ce357611ce3613e2b565b60200260200101906001600160a01b031690816001600160a01b03168152505060005b60028160ff1610156120125761012c54604051633a22995760e11b81526001600160a01b039091169063744532ae90611d4790849030908790600401613e85565b600060405180830381600087803b158015611d6157600080fd5b505af1158015611d75573d6000803e3d6000fd5b505061012c54604051632c36c65960e21b815260ff85166004820152600093506001600160a01b03909116915063b0db19649060240160206040518083038186803b158015611dc357600080fd5b505afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb9190613d85565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015611e4057600080fd5b505afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190613d3d565b90508015611ffd57600061271060fb5483611e939190613cc7565b611e9d9190613cfc565b60ff54909150611eba906001600160a01b038581169116836121fe565b611ec48183613d56565b60fd549092506001600160a01b03848116911614611f625760fd546001600160a01b031673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d1480611f2557506001600160a01b03831673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d145b15611f485760fd54611f429084906001600160a01b0316846131ab565b50611f62565b60fd54611f609084906001600160a01b0316846132ea565b505b6000611f72846112c08486613d6d565b90507f913f67bfd2c6ac4a84007665147ed6861715996d03ed38d610c52e28c088380381604051611fa591815260200190565b60405180910390a17f6d415483528749d9b4bfa85837aeca6271d845839c39bfa4614240e15dabeb1e61271060fb5483611fdf9190613cc7565b611fe99190613cfc565b60405190815260200160405180910390a150505b5050808061200a90613dbd565b915050611d06565b5061201b6130a6565b5050565b600080821161205b5760405162461bcd60e51b8152602060048201526008602482015267064697620627920360c41b60448201526064016106c4565b6000600261206a846001613d6d565b6120749190613cfc565b9050806120818486613ebb565b1015612096576120918385613cfc565b6120ab565b6120a08385613cfc565b6120ab906001613d6d565b949350505050565b6001600160a01b0382166121135760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106c4565b6001600160a01b038216600090815260336020526040902054818110156121875760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106c4565b6001600160a01b03831660009081526033602052604081208383039055603580548492906121b6908490613d56565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611a06565b505050565b6040516001600160a01b0383166024820152604481018290526121f990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613460565b6065546001600160a01b031633146106dd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c4565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611a879085906323b872dd60e01b9060840161222a565b6001600160a01b03821661239b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106c4565b80603560008282546123ad9190613d6d565b90915550506001600160a01b038216600090815260336020526040812080548392906123da908490613d6d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6101015460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190613ee5565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156124e757600080fd5b505afa1580156124fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251f9190613f11565b905061252c82600a614010565b8361253c878460ff166012613532565b6125469190613cc7565b6125509190613cfc565b9695505050505050565b60006301b919e060fc60009054906101000a90046001600160a01b03166001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156125af57600080fd5b505afa1580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190613d3d565b6125f19190613cc7565b905090565b61012c5460fc5460405163d81c5e4560e01b815260ff841660048201526001600160a01b0391821660248201526000928392169063d81c5e4590604401604080518083038186803b15801561264a57600080fd5b505afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612682919061401f565b61012c5460fc5460405162619cc760e31b815260ff871660048201526001600160a01b03918216602482015292935060009291169063030ce6389060440160206040518083038186803b1580156126d857600080fd5b505afa1580156126ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127109190613d3d565b90506000826020015163ffffffff164261272a9190613d56565b905060008111801561273c5750600082115b15612a2d5760fc54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561278657600080fd5b505afa15801561279a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127be9190613d3d565b905060006127cc8484613cc7565b905060008083116127de576000612802565b826127f86ec097ce7bc90715b34b9f100000000084613cc7565b6128029190613cfc565b905060008187600001516001600160e01b031661281f9190613d6d565b61012c5460fc5460405163111d2e5760e31b815260ff8d1660048201526001600160a01b0391821660248201523060448201529293506000929116906388e972b89060640160206040518083038186803b15801561287c57600080fd5b505afa158015612890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b49190613d3d565b9050801580156128c45750600082115b156128db57506ec097ce7bc90715b34b9f10000000005b60006128e78284613d56565b60fc546040516370a0823160e01b81523060048201529192506000916ec097ce7bc90715b34b9f10000000009184916001600160a01b03909116906370a082319060240160206040518083038186803b15801561294357600080fd5b505afa158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b9190613d3d565b6129859190613cc7565b61298f9190613cfc565b61012c546040516305b9783d60e01b815260ff8f16600482015230602482015291925082916001600160a01b03909116906305b9783d9060440160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a199190613d3d565b612a239190613d6d565b9a50505050505050505b505050919050565b612a3d611c5b565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a723390565b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff1615808015612aaf5750600054600160ff909116105b80612ac95750303b158015612ac9575060005460ff166001145b612ae55760405162461bcd60e51b81526004016106c490613ddd565b6000805460ff191660011790558015612b08576000805461ff0019166101001790555b612b128787613590565b612b1a6135c1565b60ff80546001600160a01b038088166001600160a01b031992831617909255610100805487841690831617905561010180548684169083161790556107d060fb5560fc8054928516929091168217905560408051636f307dc360e01b81529051636f307dc391600481810192602092909190829003018186803b158015612ba057600080fd5b505afa158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd89190613d85565b60fd60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3757600080fd5b505afa158015612c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6f9190613f11565b60fd60146101000a81548160ff021916908360ff160217905550816001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612cc257600080fd5b505afa158015612cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfa9190613d85565b60fe80546001600160a01b0319166001600160a01b0392909216919091179055604080516001808252818301909252600091602080830190803683370190505090508281600081518110612d5057612d50613e2b565b6001600160a01b03928316602091820292909201015260fe54604051631853304760e31b815291169063c299823890612d8d908490600401614093565b600060405180830381600087803b158015612da757600080fd5b505af1158015612dbb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612de391908101906140a6565b5060fd5460405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529091169063095ea7b390604401602060405180830381600087803b158015612e3357600080fd5b505af1158015612e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6b919061414c565b50508015611804576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016117fb565b60fe60009054906101000a90046001600160a01b03166001600160a01b031663acc2166a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612efd57600080fd5b505afa158015612f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f359190613d85565b61012c80546001600160a01b0319166001600160a01b039290921691909117905560005b60028160ff1610156118835761012c54604051632c36c65960e21b815260ff831660048201526000916001600160a01b03169063b0db19649060240160206040518083038186803b158015612fad57600080fd5b505afa158015612fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe59190613d85565b90506130116001600160a01b038216732cb45edb4517d5947afde3beabf95a582506858b6000196135f0565b508061301c81613dbd565b915050612f59565b60975460ff166106dd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106c4565b613075613024565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612a72565b60fd546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156130ea57600080fd5b505afa1580156130fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131229190613d3d565b905080156131a85760fc5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561317057600080fd5b505af1158015613184573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b9190613d3d565b90565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106131e4576131e4613e2b565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061321857613218613e2b565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152732cb45edb4517d5947afde3beabf95a582506858b906338ed173990613270908690600090869030904290600401614169565b600060405180830381600087803b15801561328a57600080fd5b505af115801561329e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132c691908101906140a6565b6001815181106132d8576132d8613e2b565b60200260200101519150509392505050565b6040805160038082526080820190925260009182919060208201606080368337019050509050848160008151811061332457613324613e2b565b60200260200101906001600160a01b031690816001600160a01b03168152505073c42c30ac6cc15fac9bd938618bcaa1a1fae8501d8160018151811061336c5761336c613e2b565b60200260200101906001600160a01b031690816001600160a01b03168152505083816002815181106133a0576133a0613e2b565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152732cb45edb4517d5947afde3beabf95a582506858b906338ed1739906133f8908690600090869030904290600401614169565b600060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261344e91908101906140a6565b6002815181106132d8576132d8613e2b565b60006134b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137149092919063ffffffff16565b8051909150156121f957808060200190518101906134d3919061414c565b6121f95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c4565b600081831415613543575082610659565b81831015613571576135558383613d56565b61356090600a6141a5565b61356a9085613cc7565b9050610659565b61357b8284613d56565b61358690600a6141a5565b61356a9085613cfc565b600054610100900460ff166135b75760405162461bcd60e51b81526004016106c4906141b1565b61201b8282613723565b600054610100900460ff166135e85760405162461bcd60e51b81526004016106c4906141b1565b6106dd613771565b8015806136795750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561363f57600080fd5b505afa158015613653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136779190613d3d565b155b6136e45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106c4565b6040516001600160a01b0383166024820152604481018290526121f990849063095ea7b360e01b9060640161222a565b60606120ab84846000856137a1565b600054610100900460ff1661374a5760405162461bcd60e51b81526004016106c4906141b1565b815161375d90603690602085019061390b565b5080516121f990603790602084019061390b565b600054610100900460ff166137985760405162461bcd60e51b81526004016106c4906141b1565b6106dd336122bb565b6060824710156138025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106c4565b6001600160a01b0385163b6138595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c4565b600080866001600160a01b0316858760405161387591906141fc565b60006040518083038185875af1925050503d80600081146138b2576040519150601f19603f3d011682016040523d82523d6000602084013e6138b7565b606091505b50915091506138c78282866138d2565b979650505050505050565b606083156138e1575081610659565b8251156138f15782518084602001fd5b8160405162461bcd60e51b81526004016106c491906139c7565b82805461391790613c7c565b90600052602060002090601f016020900481019282613939576000855561397f565b82601f1061395257805160ff191683800117855561397f565b8280016001018555821561397f579182015b8281111561397f578251825591602001919060010190613964565b5061149b9291505b8082111561149b5760008155600101613987565b60005b838110156139b657818101518382015260200161399e565b83811115611a875750506000910152565b60208152600082518060208401526139e681604085016020870161399b565b601f01601f19169190910160400192915050565b6001600160a01b038116811461188357600080fd5b60008060408385031215613a2257600080fd5b8235613a2d816139fa565b946020939093013593505050565b801515811461188357600080fd5b600060208284031215613a5b57600080fd5b813561065981613a3b565b600080600060608486031215613a7b57600080fd5b8335613a86816139fa565b92506020840135613a96816139fa565b929592945050506040919091013590565b600060208284031215613ab957600080fd5b5035919050565b600060208284031215613ad257600080fd5b8135610659816139fa565b60008060408385031215613af057600080fd5b8235613afb816139fa565b91506020830135613b0b816139fa565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b5557613b55613b16565b604052919050565b600082601f830112613b6e57600080fd5b813567ffffffffffffffff811115613b8857613b88613b16565b613b9b601f8201601f1916602001613b2c565b818152846020838601011115613bb057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c08789031215613be657600080fd5b863567ffffffffffffffff80821115613bfe57600080fd5b613c0a8a838b01613b5d565b97506020890135915080821115613c2057600080fd5b50613c2d89828a01613b5d565b9550506040870135613c3e816139fa565b93506060870135613c4e816139fa565b92506080870135613c5e816139fa565b915060a0870135613c6e816139fa565b809150509295509295509295565b600181811c90821680613c9057607f821691505b6020821081141561157157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613ce157613ce1613cb1565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613d0b57613d0b613ce6565b500490565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b600060208284031215613d4f57600080fd5b5051919050565b600082821015613d6857613d68613cb1565b500390565b60008219821115613d8057613d80613cb1565b500190565b600060208284031215613d9757600080fd5b8151610659816139fa565b6000600019821415613db657613db6613cb1565b5060010190565b600060ff821660ff811415613dd457613dd4613cb1565b60010192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015613e7a5781516001600160a01b031687529582019590820190600101613e55565b509495945050505050565b60ff841681526001600160a01b0383166020820152606060408201819052600090613eb290830184613e41565b95945050505050565b600082613eca57613eca613ce6565b500690565b805160ff81168114613ee057600080fd5b919050565b60008060408385031215613ef857600080fd5b82519150613f0860208401613ecf565b90509250929050565b600060208284031215613f2357600080fd5b61065982613ecf565b600181815b80851115613f67578160001904821115613f4d57613f4d613cb1565b80851615613f5a57918102915b93841c9390800290613f31565b509250929050565b600082613f7e575060016105d7565b81613f8b575060006105d7565b8160018114613fa15760028114613fab57613fc7565b60019150506105d7565b60ff841115613fbc57613fbc613cb1565b50506001821b6105d7565b5060208310610133831016604e8410600b8410161715613fea575081810a6105d7565b613ff48383613f2c565b806000190482111561400857614008613cb1565b029392505050565b600061065960ff841683613f6f565b60006040828403121561403157600080fd5b6040516040810181811067ffffffffffffffff8211171561405457614054613b16565b60405282516001600160e01b038116811461406e57600080fd5b8152602083015163ffffffff8116811461408757600080fd5b60208201529392505050565b6020815260006106596020830184613e41565b600060208083850312156140b957600080fd5b825167ffffffffffffffff808211156140d157600080fd5b818501915085601f8301126140e557600080fd5b8151818111156140f7576140f7613b16565b8060051b9150614108848301613b2c565b818152918301840191848101908884111561412257600080fd5b938501935b8385101561414057845182529385019390850190614127565b98975050505050505050565b60006020828403121561415e57600080fd5b815161065981613a3b565b85815284602082015260a06040820152600061418860a0830186613e41565b6001600160a01b0394909416606083015250608001529392505050565b60006106598383613f6f565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161420e81846020870161399b565b919091019291505056fea2646970667358221220aa7f97c0aa383a42fdc1b924ec7b3030f78fbd885dd6d8fcc435facca22e1c5264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80638da5cb5b11610146578063c89d5b8b116100c3578063f2fde38b11610087578063f2fde38b146104cc578063f66fed26146104df578063f6d7eade146104e7578063f851a44014610502578063fc0c546a14610516578063fdb5a03e1461052957600080fd5b8063c89d5b8b1461048e578063d9621f9e14610496578063db2e21bc1461049e578063dd62ed3e146104a6578063e56f2fe4146104b957600080fd5b8063a9059cbb1161010a578063a9059cbb14610431578063acc2166a14610444578063b6b55f2514610458578063b9875f531461046b578063bd244af41461048657600080fd5b80638da5cb5b146103ea57806395d89b41146103fb578063a20a4cb414610403578063a457c2d71461040b578063a8602fea1461041e57600080fd5b806339509351116101d457806369fe0e2d1161019857806369fe0e2d14610389578063704b6c021461039c57806370a08231146103af578063715018a6146103d8578063741de148146103e057600080fd5b806339509351146103325780634626402b146103455780635c975abb146103585780635fe3b5671461036357806369e527da1461037657600080fd5b806323b872dd1161021b57806323b872dd146102c75780632630c12f146102da57806328593984146103065780632e1a7d4d14610310578063313ce5671461032357600080fd5b8063034f40831461025857806306fdde0314610274578063095ea7b31461028957806318160ddd146102ac57806320f14908146102b4575b600080fd5b61026160fb5481565b6040519081526020015b60405180910390f35b61027c610531565b60405161026b91906139c7565b61029c610297366004613a0f565b6105c3565b604051901515815260200161026b565b603554610261565b6102616102c2366004613a49565b6105dd565b61029c6102d5366004613a66565b610660565b610101546102ee906001600160a01b031681565b6040516001600160a01b03909116815260200161026b565b61030e610684565b005b61030e61031e366004613aa7565b6106df565b6040516012815260200161026b565b61029c610340366004613a0f565b610aef565b60ff546102ee906001600160a01b031681565b60975460ff1661029c565b60fe546102ee906001600160a01b031681565b60fc546102ee906001600160a01b031681565b61030e610397366004613aa7565b610b11565b61030e6103aa366004613ac0565b610b9f565b6102616103bd366004613ac0565b6001600160a01b031660009081526033602052604090205490565b61030e610c09565b6301b919e0610261565b6065546001600160a01b03166102ee565b61027c610c1b565b610261610c2a565b61029c610419366004613a0f565b610de5565b61030e61042c366004613ac0565b610e60565b61029c61043f366004613a0f565b610efd565b61012c546102ee906001600160a01b031681565b61030e610466366004613aa7565b610f0b565b6102ee73c42c30ac6cc15fac9bd938618bcaa1a1fae8501d81565b610261611160565b61026161118a565b61026161149f565b61030e611577565b6102616104b4366004613add565b611703565b61030e6104c7366004613bcd565b61172e565b61030e6104da366004613ac0565b61180d565b61030e611886565b6102ee732cb45edb4517d5947afde3beabf95a582506858b81565b610100546102ee906001600160a01b031681565b60fd546102ee906001600160a01b031681565b61030e611896565b60606036805461054090613c7c565b80601f016020809104026020016040519081016040528092919081815260200182805461056c90613c7c565b80156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b5050505050905090565b6000336105d18185856118ee565b60019150505b92915050565b6000806105e960355490565b9050806106005750670de0b6b3a764000092915050565b6001831515146106345780610613610c2a565b61062590670de0b6b3a7640000613cc7565b61062f9190613cfc565b610659565b8061063d611160565b61064f90670de0b6b3a7640000613cc7565b6106599190613cfc565b9392505050565b60003361066e858285611a13565b610679858585611a8d565b506001949350505050565b6065546001600160a01b03163314806106a85750610100546001600160a01b031633145b6106cd5760405162461bcd60e51b81526004016106c490613d10565b60405180910390fd5b6106d5611c5b565b6106dd611ca1565b565b600260c95414156107325760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c4565b600260c955806107755760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908105b5bdd5b9d60921b60448201526064016106c4565b336000908152603360205260409020548111156107c95760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b60448201526064016106c4565b33600090815261010260205260409020544314156108295760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772077697468696e2073616d6520626c6f636b00000000000060448201526064016106c4565b6000610833610c2a565b9050600061084060355490565b61084a8484613cc7565b6108549190613cfc565b60fd546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190613d3d565b905081811015610a815760006109826108ee8385613d56565b60fc546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561093157600080fd5b505afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190613d3d565b6109739190613cc7565b61097d8487613d56565b61201f565b60fc5460405163db006a7560e01b8152600481018390529192506001600160a01b03169063db006a7590602401602060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190613d3d565b5060fd546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190613d3d565b9250505b610a8b33856120b3565b60fd54610aa2906001600160a01b031633846121fe565b60408051338152602081018490529081018590527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906060015b60405180910390a15050600160c9555050565b6000336105d1818585610b028383611703565b610b0c9190613d6d565b6118ee565b610b19612261565b610bb98110610b635760405162461bcd60e51b81526020600482015260166024820152755969656c64204665652063616e6e6f74203e2033302560501b60448201526064016106c4565b60fb8190556040518181527f5cdc47cbc2be1e35e5429dd646b1e2047ab328f4108873ab71318989f7566ceb906020015b60405180910390a150565b610ba7612261565b61010080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f848ac24ab84501710d6631faab117b66b79aba7ec6f7778cf3bcff428c1a4efc910160405180910390a15050565b610c11612261565b6106dd60006122bb565b60606037805461054090613c7c565b60008060fc60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7b57600080fd5b505afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190613d3d565b60fc546040516370a0823160e01b8152306004820152919250600091670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015610d0857600080fd5b505afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d409190613d3d565b610d4a9190613cc7565b610d549190613cfc565b60fd546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b158015610d9c57600080fd5b505afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190613d3d565b610dde9190613d6d565b9250505090565b60003381610df38286611703565b905083811015610e535760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106c4565b61067982868684036118ee565b610e68612261565b6001600160a01b038116610eaf5760405162461bcd60e51b815260206004820152600e60248201526d1dd85b1b195d081a5b9d985b1a5960921b60448201526064016106c4565b60ff80546001600160a01b0319166001600160a01b0383169081179091556040519081527f60edc991b058a7e279075cf86f19a6b478334efec47e089d09890b139c78232790602001610b94565b6000336105d1818585611a8d565b600260c9541415610f5e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106c4565b600260c955610f6b611c5b565b60008111610fac5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064016106c4565b6000610fb6610c2a565b60fd54909150610fd1906001600160a01b031633308561230d565b33600090815261010260205260409081902043905560fc5460fd5491516370a0823160e01b81523060048201526001600160a01b039182169263a0712d689216906370a082319060240160206040518083038186803b15801561103357600080fd5b505afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190613d3d565b6040518263ffffffff1660e01b815260040161108991815260200190565b602060405180830381600087803b1580156110a357600080fd5b505af11580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db9190613d3d565b5060006110e760355490565b905060008215806110f6575081155b61111457826111058386613cc7565b61110f9190613cfc565b611116565b835b90506111223382612345565b60408051338152602081018690529081018290527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590606001610adc565b60008061116b610c2a565b60fd54909150611184906001600160a01b031682612424565b91505090565b60008060005b60028110156112e65761012c5460fc5460405162619cc760e31b815260ff841660048201526001600160a01b039182166024820152600092919091169063030ce6389060440160206040518083038186803b1580156111ee57600080fd5b505afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112269190613d3d565b905080156112d35761012c54604051632c36c65960e21b8152600481018490526000916001600160a01b03169063b0db19649060240160206040518083038186803b15801561127457600080fd5b505afa158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ac9190613d85565b90506112c5816112c06301e1338085613cc7565b612424565b6112cf9085613d6d565b9350505b50806112de81613da2565b915050611190565b508015611493576000670de0b6b3a764000060fc60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561134657600080fd5b505afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e9190613d3d565b60fc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cc57600080fd5b505afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114049190613d3d565b61140e9190613cc7565b6114189190613cfc565b60fd54909150600090611434906001600160a01b031683612424565b61144684670de0b6b3a7640000613cc7565b6114509190613cfc565b905061271060fb546127106114659190613d56565b61146f9083613cc7565b6114799190613cfc565b61148161255a565b61148b9190613d6d565b935050505090565b61118461255a565b5090565b60008060005b60028160ff1610156115715760006114bc826125f6565b9050801561155e5761012c54604051632c36c65960e21b815260ff841660048201526000916001600160a01b03169063b0db19649060240160206040518083038186803b15801561150c57600080fd5b505afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115449190613d85565b90506115508183612424565b61155a9085613d6d565b9350505b508061156981613dbd565b9150506114a5565b50919050565b6065546001600160a01b031633148061159b5750610100546001600160a01b031633145b6115b75760405162461bcd60e51b81526004016106c490613d10565b6115bf611c5b565b6115c7612a35565b6115cf611ca1565b60fc546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b9190613d3d565b905080156116d35760fc5460405163db006a7560e01b8152600481018390526001600160a01b039091169063db006a7590602401602060405180830381600087803b15801561169957600080fd5b505af11580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d19190613d3d565b505b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c90602001610b94565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600054610100900460ff161580801561174e5750600054600160ff909116105b806117685750303b158015611768575060005460ff166001145b6117845760405162461bcd60e51b81526004016106c490613ddd565b6000805460ff1916600117905580156117a7576000805461ff0019166101001790555b6117b5878787878787612a8f565b6117bd612eaf565b8015611804576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050505050565b611815612261565b6001600160a01b03811661187a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c4565b611883816122bb565b50565b61188e612261565b6106dd612eaf565b6065546001600160a01b03163314806118ba5750610100546001600160a01b031633145b6118d65760405162461bcd60e51b81526004016106c490613d10565b6118de613024565b6118e661306d565b6118836130a6565b6001600160a01b0383166119505760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106c4565b6001600160a01b0382166119b15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106c4565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611a1f8484611703565b90506000198114611a875781811015611a7a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106c4565b611a8784848484036118ee565b50505050565b6001600160a01b038316611af15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106c4565b6001600160a01b038216611b535760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106c4565b6001600160a01b03831660009081526033602052604090205481811015611bcb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106c4565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290611c02908490613d6d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c4e91815260200190565b60405180910390a3611a87565b60975460ff16156106dd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106c4565b60408051600180825281830190925260009160208083019080368337505060fc5482519293506001600160a01b031691839150600090611ce357611ce3613e2b565b60200260200101906001600160a01b031690816001600160a01b03168152505060005b60028160ff1610156120125761012c54604051633a22995760e11b81526001600160a01b039091169063744532ae90611d4790849030908790600401613e85565b600060405180830381600087803b158015611d6157600080fd5b505af1158015611d75573d6000803e3d6000fd5b505061012c54604051632c36c65960e21b815260ff85166004820152600093506001600160a01b03909116915063b0db19649060240160206040518083038186803b158015611dc357600080fd5b505afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb9190613d85565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015611e4057600080fd5b505afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190613d3d565b90508015611ffd57600061271060fb5483611e939190613cc7565b611e9d9190613cfc565b60ff54909150611eba906001600160a01b038581169116836121fe565b611ec48183613d56565b60fd549092506001600160a01b03848116911614611f625760fd546001600160a01b031673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d1480611f2557506001600160a01b03831673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d145b15611f485760fd54611f429084906001600160a01b0316846131ab565b50611f62565b60fd54611f609084906001600160a01b0316846132ea565b505b6000611f72846112c08486613d6d565b90507f913f67bfd2c6ac4a84007665147ed6861715996d03ed38d610c52e28c088380381604051611fa591815260200190565b60405180910390a17f6d415483528749d9b4bfa85837aeca6271d845839c39bfa4614240e15dabeb1e61271060fb5483611fdf9190613cc7565b611fe99190613cfc565b60405190815260200160405180910390a150505b5050808061200a90613dbd565b915050611d06565b5061201b6130a6565b5050565b600080821161205b5760405162461bcd60e51b8152602060048201526008602482015267064697620627920360c41b60448201526064016106c4565b6000600261206a846001613d6d565b6120749190613cfc565b9050806120818486613ebb565b1015612096576120918385613cfc565b6120ab565b6120a08385613cfc565b6120ab906001613d6d565b949350505050565b6001600160a01b0382166121135760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106c4565b6001600160a01b038216600090815260336020526040902054818110156121875760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106c4565b6001600160a01b03831660009081526033602052604081208383039055603580548492906121b6908490613d56565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611a06565b505050565b6040516001600160a01b0383166024820152604481018290526121f990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613460565b6065546001600160a01b031633146106dd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106c4565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611a879085906323b872dd60e01b9060840161222a565b6001600160a01b03821661239b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106c4565b80603560008282546123ad9190613d6d565b90915550506001600160a01b038216600090815260336020526040812080548392906123da908490613d6d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6101015460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190613ee5565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156124e757600080fd5b505afa1580156124fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251f9190613f11565b905061252c82600a614010565b8361253c878460ff166012613532565b6125469190613cc7565b6125509190613cfc565b9695505050505050565b60006301b919e060fc60009054906101000a90046001600160a01b03166001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156125af57600080fd5b505afa1580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190613d3d565b6125f19190613cc7565b905090565b61012c5460fc5460405163d81c5e4560e01b815260ff841660048201526001600160a01b0391821660248201526000928392169063d81c5e4590604401604080518083038186803b15801561264a57600080fd5b505afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612682919061401f565b61012c5460fc5460405162619cc760e31b815260ff871660048201526001600160a01b03918216602482015292935060009291169063030ce6389060440160206040518083038186803b1580156126d857600080fd5b505afa1580156126ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127109190613d3d565b90506000826020015163ffffffff164261272a9190613d56565b905060008111801561273c5750600082115b15612a2d5760fc54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561278657600080fd5b505afa15801561279a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127be9190613d3d565b905060006127cc8484613cc7565b905060008083116127de576000612802565b826127f86ec097ce7bc90715b34b9f100000000084613cc7565b6128029190613cfc565b905060008187600001516001600160e01b031661281f9190613d6d565b61012c5460fc5460405163111d2e5760e31b815260ff8d1660048201526001600160a01b0391821660248201523060448201529293506000929116906388e972b89060640160206040518083038186803b15801561287c57600080fd5b505afa158015612890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b49190613d3d565b9050801580156128c45750600082115b156128db57506ec097ce7bc90715b34b9f10000000005b60006128e78284613d56565b60fc546040516370a0823160e01b81523060048201529192506000916ec097ce7bc90715b34b9f10000000009184916001600160a01b03909116906370a082319060240160206040518083038186803b15801561294357600080fd5b505afa158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b9190613d3d565b6129859190613cc7565b61298f9190613cfc565b61012c546040516305b9783d60e01b815260ff8f16600482015230602482015291925082916001600160a01b03909116906305b9783d9060440160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a199190613d3d565b612a239190613d6d565b9a50505050505050505b505050919050565b612a3d611c5b565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a723390565b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff1615808015612aaf5750600054600160ff909116105b80612ac95750303b158015612ac9575060005460ff166001145b612ae55760405162461bcd60e51b81526004016106c490613ddd565b6000805460ff191660011790558015612b08576000805461ff0019166101001790555b612b128787613590565b612b1a6135c1565b60ff80546001600160a01b038088166001600160a01b031992831617909255610100805487841690831617905561010180548684169083161790556107d060fb5560fc8054928516929091168217905560408051636f307dc360e01b81529051636f307dc391600481810192602092909190829003018186803b158015612ba057600080fd5b505afa158015612bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd89190613d85565b60fd60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3757600080fd5b505afa158015612c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6f9190613f11565b60fd60146101000a81548160ff021916908360ff160217905550816001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612cc257600080fd5b505afa158015612cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfa9190613d85565b60fe80546001600160a01b0319166001600160a01b0392909216919091179055604080516001808252818301909252600091602080830190803683370190505090508281600081518110612d5057612d50613e2b565b6001600160a01b03928316602091820292909201015260fe54604051631853304760e31b815291169063c299823890612d8d908490600401614093565b600060405180830381600087803b158015612da757600080fd5b505af1158015612dbb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612de391908101906140a6565b5060fd5460405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529091169063095ea7b390604401602060405180830381600087803b158015612e3357600080fd5b505af1158015612e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6b919061414c565b50508015611804576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016117fb565b60fe60009054906101000a90046001600160a01b03166001600160a01b031663acc2166a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612efd57600080fd5b505afa158015612f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f359190613d85565b61012c80546001600160a01b0319166001600160a01b039290921691909117905560005b60028160ff1610156118835761012c54604051632c36c65960e21b815260ff831660048201526000916001600160a01b03169063b0db19649060240160206040518083038186803b158015612fad57600080fd5b505afa158015612fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe59190613d85565b90506130116001600160a01b038216732cb45edb4517d5947afde3beabf95a582506858b6000196135f0565b508061301c81613dbd565b915050612f59565b60975460ff166106dd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106c4565b613075613024565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612a72565b60fd546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156130ea57600080fd5b505afa1580156130fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131229190613d3d565b905080156131a85760fc5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561317057600080fd5b505af1158015613184573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b9190613d3d565b90565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106131e4576131e4613e2b565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061321857613218613e2b565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152732cb45edb4517d5947afde3beabf95a582506858b906338ed173990613270908690600090869030904290600401614169565b600060405180830381600087803b15801561328a57600080fd5b505af115801561329e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132c691908101906140a6565b6001815181106132d8576132d8613e2b565b60200260200101519150509392505050565b6040805160038082526080820190925260009182919060208201606080368337019050509050848160008151811061332457613324613e2b565b60200260200101906001600160a01b031690816001600160a01b03168152505073c42c30ac6cc15fac9bd938618bcaa1a1fae8501d8160018151811061336c5761336c613e2b565b60200260200101906001600160a01b031690816001600160a01b03168152505083816002815181106133a0576133a0613e2b565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152732cb45edb4517d5947afde3beabf95a582506858b906338ed1739906133f8908690600090869030904290600401614169565b600060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261344e91908101906140a6565b6002815181106132d8576132d8613e2b565b60006134b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137149092919063ffffffff16565b8051909150156121f957808060200190518101906134d3919061414c565b6121f95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c4565b600081831415613543575082610659565b81831015613571576135558383613d56565b61356090600a6141a5565b61356a9085613cc7565b9050610659565b61357b8284613d56565b61358690600a6141a5565b61356a9085613cfc565b600054610100900460ff166135b75760405162461bcd60e51b81526004016106c4906141b1565b61201b8282613723565b600054610100900460ff166135e85760405162461bcd60e51b81526004016106c4906141b1565b6106dd613771565b8015806136795750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561363f57600080fd5b505afa158015613653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136779190613d3d565b155b6136e45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106c4565b6040516001600160a01b0383166024820152604481018290526121f990849063095ea7b360e01b9060640161222a565b60606120ab84846000856137a1565b600054610100900460ff1661374a5760405162461bcd60e51b81526004016106c4906141b1565b815161375d90603690602085019061390b565b5080516121f990603790602084019061390b565b600054610100900460ff166137985760405162461bcd60e51b81526004016106c4906141b1565b6106dd336122bb565b6060824710156138025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106c4565b6001600160a01b0385163b6138595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c4565b600080866001600160a01b0316858760405161387591906141fc565b60006040518083038185875af1925050503d80600081146138b2576040519150601f19603f3d011682016040523d82523d6000602084013e6138b7565b606091505b50915091506138c78282866138d2565b979650505050505050565b606083156138e1575081610659565b8251156138f15782518084602001fd5b8160405162461bcd60e51b81526004016106c491906139c7565b82805461391790613c7c565b90600052602060002090601f016020900481019282613939576000855561397f565b82601f1061395257805160ff191683800117855561397f565b8280016001018555821561397f579182015b8281111561397f578251825591602001919060010190613964565b5061149b9291505b8082111561149b5760008155600101613987565b60005b838110156139b657818101518382015260200161399e565b83811115611a875750506000910152565b60208152600082518060208401526139e681604085016020870161399b565b601f01601f19169190910160400192915050565b6001600160a01b038116811461188357600080fd5b60008060408385031215613a2257600080fd5b8235613a2d816139fa565b946020939093013593505050565b801515811461188357600080fd5b600060208284031215613a5b57600080fd5b813561065981613a3b565b600080600060608486031215613a7b57600080fd5b8335613a86816139fa565b92506020840135613a96816139fa565b929592945050506040919091013590565b600060208284031215613ab957600080fd5b5035919050565b600060208284031215613ad257600080fd5b8135610659816139fa565b60008060408385031215613af057600080fd5b8235613afb816139fa565b91506020830135613b0b816139fa565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b5557613b55613b16565b604052919050565b600082601f830112613b6e57600080fd5b813567ffffffffffffffff811115613b8857613b88613b16565b613b9b601f8201601f1916602001613b2c565b818152846020838601011115613bb057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c08789031215613be657600080fd5b863567ffffffffffffffff80821115613bfe57600080fd5b613c0a8a838b01613b5d565b97506020890135915080821115613c2057600080fd5b50613c2d89828a01613b5d565b9550506040870135613c3e816139fa565b93506060870135613c4e816139fa565b92506080870135613c5e816139fa565b915060a0870135613c6e816139fa565b809150509295509295509295565b600181811c90821680613c9057607f821691505b6020821081141561157157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613ce157613ce1613cb1565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613d0b57613d0b613ce6565b500490565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b600060208284031215613d4f57600080fd5b5051919050565b600082821015613d6857613d68613cb1565b500390565b60008219821115613d8057613d80613cb1565b500190565b600060208284031215613d9757600080fd5b8151610659816139fa565b6000600019821415613db657613db6613cb1565b5060010190565b600060ff821660ff811415613dd457613dd4613cb1565b60010192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015613e7a5781516001600160a01b031687529582019590820190600101613e55565b509495945050505050565b60ff841681526001600160a01b0383166020820152606060408201819052600090613eb290830184613e41565b95945050505050565b600082613eca57613eca613ce6565b500690565b805160ff81168114613ee057600080fd5b919050565b60008060408385031215613ef857600080fd5b82519150613f0860208401613ecf565b90509250929050565b600060208284031215613f2357600080fd5b61065982613ecf565b600181815b80851115613f67578160001904821115613f4d57613f4d613cb1565b80851615613f5a57918102915b93841c9390800290613f31565b509250929050565b600082613f7e575060016105d7565b81613f8b575060006105d7565b8160018114613fa15760028114613fab57613fc7565b60019150506105d7565b60ff841115613fbc57613fbc613cb1565b50506001821b6105d7565b5060208310610133831016604e8410600b8410161715613fea575081810a6105d7565b613ff48383613f2c565b806000190482111561400857614008613cb1565b029392505050565b600061065960ff841683613f6f565b60006040828403121561403157600080fd5b6040516040810181811067ffffffffffffffff8211171561405457614054613b16565b60405282516001600160e01b038116811461406e57600080fd5b8152602083015163ffffffff8116811461408757600080fd5b60208201529392505050565b6020815260006106596020830184613e41565b600060208083850312156140b957600080fd5b825167ffffffffffffffff808211156140d157600080fd5b818501915085601f8301126140e557600080fd5b8151818111156140f7576140f7613b16565b8060051b9150614108848301613b2c565b818152918301840191848101908884111561412257600080fd5b938501935b8385101561414057845182529385019390850190614127565b98975050505050505050565b60006020828403121561415e57600080fd5b815161065981613a3b565b85815284602082015260a06040820152600061418860a0830186613e41565b6001600160a01b0394909416606083015250608001529392505050565b60006106598383613f6f565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161420e81846020870161399b565b919091019291505056fea2646970667358221220aa7f97c0aa383a42fdc1b924ec7b3030f78fbd885dd6d8fcc435facca22e1c5264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "amount of lptokens to deposit"
        }
      },
      "getAPR()": {
        "details": "It's scaled by 1e18"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_yieldFeePerc": "deposit fee percentage. 2000 for 20%"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "_shares": "amount of shares to burn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw()": {
        "notice": "Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions"
      },
      "getPendingRewards()": {
        "notice": "Returns the pending rewards in USD."
      },
      "reinvest()": {
        "notice": "Unpauses deposit, yield, invest functions, and invests funds."
      },
      "setFee(uint256)": {
        "notice": "Function to set deposit and yield fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2836,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 487,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 493,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 495,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 499,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1078,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 408,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 467,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19133,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "yieldFee",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 19136,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "cToken",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(ICToken)19100"
      },
      {
        "astId": 19139,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "token",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IERC20Upgradeable)1157"
      },
      {
        "astId": 19141,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "tokenDecimals",
        "offset": 20,
        "slot": "253",
        "type": "t_uint8"
      },
      {
        "astId": 19144,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "comptroller",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(IComptroller)19117"
      },
      {
        "astId": 19146,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 19148,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "admin",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 19151,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "priceOracle",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IPriceOracle)11580"
      },
      {
        "astId": 19155,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "depositedBlock",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19884,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "__gap",
        "offset": 0,
        "slot": "259",
        "type": "t_array(t_uint256)41_storage"
      },
      {
        "astId": 18324,
        "contract": "contracts/l2Vaults/compound/AuroraBastionVault.sol:AuroraBastionVault",
        "label": "rewardDistributor",
        "offset": 0,
        "slot": "300",
        "type": "t_contract(IRewardDistributor)18294"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)41_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[41]",
        "numberOfBytes": "1312"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICToken)19100": {
        "encoding": "inplace",
        "label": "contract ICToken",
        "numberOfBytes": "20"
      },
      "t_contract(IComptroller)19117": {
        "encoding": "inplace",
        "label": "contract IComptroller",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1157": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)11580": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardDistributor)18294": {
        "encoding": "inplace",
        "label": "contract IRewardDistributor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}